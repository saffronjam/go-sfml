// Code generated by go-sfml. DO NOT EDIT.

package sfml

import (
	"C"
	"unsafe"
)

type BlendEquation int32

const (
	sfBlendEquationAdd BlendEquation = C.sfBlendEquationAdd
	sfBlendEquationSubtract BlendEquation = C.sfBlendEquationSubtract
	sfBlendEquationReverseSubtract BlendEquation = C.sfBlendEquationReverseSubtract
	sfBlendEquationMin BlendEquation = C.sfBlendEquationMin
	sfBlendEquationMax BlendEquation = C.sfBlendEquationMax
)

type BlendFactor int32

const (
	sfBlendFactorZero BlendFactor = C.sfBlendFactorZero
	sfBlendFactorOne BlendFactor = C.sfBlendFactorOne
	sfBlendFactorSrcColor BlendFactor = C.sfBlendFactorSrcColor
	sfBlendFactorOneMinusSrcColor BlendFactor = C.sfBlendFactorOneMinusSrcColor
	sfBlendFactorDstColor BlendFactor = C.sfBlendFactorDstColor
	sfBlendFactorOneMinusDstColor BlendFactor = C.sfBlendFactorOneMinusDstColor
	sfBlendFactorSrcAlpha BlendFactor = C.sfBlendFactorSrcAlpha
	sfBlendFactorOneMinusSrcAlpha BlendFactor = C.sfBlendFactorOneMinusSrcAlpha
	sfBlendFactorDstAlpha BlendFactor = C.sfBlendFactorDstAlpha
	sfBlendFactorOneMinusDstAlpha BlendFactor = C.sfBlendFactorOneMinusDstAlpha
)

type BlendMode struct {
	ptr unsafe.Pointer
}

func (blendMode *BlendMode) CPtr() unsafe.Pointer {
	return (*C.sfBlendMode)(blendMode.ptr)
}

type Buffer struct {
	ptr unsafe.Pointer
}

func (buffer *Buffer) CPtr() unsafe.Pointer {
	return (*C.sfBuffer)(buffer.ptr)
}

type CircleShape struct {
	ptr unsafe.Pointer
}

func (circleShape *CircleShape) CPtr() unsafe.Pointer {
	return (*C.sfCircleShape)(circleShape.ptr)
}

type Clock struct {
	ptr unsafe.Pointer
}

func (clock *Clock) CPtr() unsafe.Pointer {
	return (*C.sfClock)(clock.ptr)
}

type Color struct {
	ptr unsafe.Pointer
}

func (color *Color) CPtr() unsafe.Pointer {
	return (*C.sfColor)(color.ptr)
}

type Context struct {
	ptr unsafe.Pointer
}

func (context *Context) CPtr() unsafe.Pointer {
	return (*C.sfContext)(context.ptr)
}

type ContextAttribute int32

const (
	sfContextDefault ContextAttribute = C.sfContextDefault
	sfContextCore ContextAttribute = C.sfContextCore
	sfContextDebug ContextAttribute = C.sfContextDebug
)

type ContextSettings struct {
	ptr unsafe.Pointer
}

func (contextSettings *ContextSettings) CPtr() unsafe.Pointer {
	return (*C.sfContextSettings)(contextSettings.ptr)
}

type ConvexShape struct {
	ptr unsafe.Pointer
}

func (convexShape *ConvexShape) CPtr() unsafe.Pointer {
	return (*C.sfConvexShape)(convexShape.ptr)
}

type Cursor struct {
	ptr unsafe.Pointer
}

func (cursor *Cursor) CPtr() unsafe.Pointer {
	return (*C.sfCursor)(cursor.ptr)
}

type CursorType int32

const (
	sfCursorArrow CursorType = C.sfCursorArrow
	sfCursorArrowWait CursorType = C.sfCursorArrowWait
	sfCursorWait CursorType = C.sfCursorWait
	sfCursorText CursorType = C.sfCursorText
	sfCursorHand CursorType = C.sfCursorHand
	sfCursorSizeHorizontal CursorType = C.sfCursorSizeHorizontal
	sfCursorSizeVertical CursorType = C.sfCursorSizeVertical
	sfCursorSizeTopLeftBottomRight CursorType = C.sfCursorSizeTopLeftBottomRight
	sfCursorSizeBottomLeftTopRight CursorType = C.sfCursorSizeBottomLeftTopRight
	sfCursorSizeLeft CursorType = C.sfCursorSizeLeft
	sfCursorSizeRight CursorType = C.sfCursorSizeRight
	sfCursorSizeTop CursorType = C.sfCursorSizeTop
	sfCursorSizeBottom CursorType = C.sfCursorSizeBottom
	sfCursorSizeTopLeft CursorType = C.sfCursorSizeTopLeft
	sfCursorSizeBottomRight CursorType = C.sfCursorSizeBottomRight
	sfCursorSizeBottomLeft CursorType = C.sfCursorSizeBottomLeft
	sfCursorSizeTopRight CursorType = C.sfCursorSizeTopRight
	sfCursorSizeAll CursorType = C.sfCursorSizeAll
	sfCursorCross CursorType = C.sfCursorCross
	sfCursorHelp CursorType = C.sfCursorHelp
	sfCursorNotAllowed CursorType = C.sfCursorNotAllowed
)

type Event struct {
	ptr unsafe.Pointer
}

func (event *Event) CPtr() unsafe.Pointer {
	return (*C.sfEvent)(event.ptr)
}

type EventType int32

const (
	sfEvtClosed EventType = C.sfEvtClosed
	sfEvtResized EventType = C.sfEvtResized
	sfEvtLostFocus EventType = C.sfEvtLostFocus
	sfEvtGainedFocus EventType = C.sfEvtGainedFocus
	sfEvtTextEntered EventType = C.sfEvtTextEntered
	sfEvtKeyPressed EventType = C.sfEvtKeyPressed
	sfEvtKeyReleased EventType = C.sfEvtKeyReleased
	sfEvtMouseWheelMoved EventType = C.sfEvtMouseWheelMoved
	sfEvtMouseWheelScrolled EventType = C.sfEvtMouseWheelScrolled
	sfEvtMouseButtonPressed EventType = C.sfEvtMouseButtonPressed
	sfEvtMouseButtonReleased EventType = C.sfEvtMouseButtonReleased
	sfEvtMouseMoved EventType = C.sfEvtMouseMoved
	sfEvtMouseEntered EventType = C.sfEvtMouseEntered
	sfEvtMouseLeft EventType = C.sfEvtMouseLeft
	sfEvtJoystickButtonPressed EventType = C.sfEvtJoystickButtonPressed
	sfEvtJoystickButtonReleased EventType = C.sfEvtJoystickButtonReleased
	sfEvtJoystickMoved EventType = C.sfEvtJoystickMoved
	sfEvtJoystickConnected EventType = C.sfEvtJoystickConnected
	sfEvtJoystickDisconnected EventType = C.sfEvtJoystickDisconnected
	sfEvtTouchBegan EventType = C.sfEvtTouchBegan
	sfEvtTouchMoved EventType = C.sfEvtTouchMoved
	sfEvtTouchEnded EventType = C.sfEvtTouchEnded
	sfEvtSensorChanged EventType = C.sfEvtSensorChanged
	sfEvtCount EventType = C.sfEvtCount
)

type FloatRect struct {
	ptr unsafe.Pointer
}

func (floatRect *FloatRect) CPtr() unsafe.Pointer {
	return (*C.sfFloatRect)(floatRect.ptr)
}

type Font struct {
	ptr unsafe.Pointer
}

func (font *Font) CPtr() unsafe.Pointer {
	return (*C.sfFont)(font.ptr)
}

type FontInfo struct {
	ptr unsafe.Pointer
}

func (fontInfo *FontInfo) CPtr() unsafe.Pointer {
	return (*C.sfFontInfo)(fontInfo.ptr)
}

type Ftp struct {
	ptr unsafe.Pointer
}

func (ftp *Ftp) CPtr() unsafe.Pointer {
	return (*C.sfFtp)(ftp.ptr)
}

type FtpDirectoryResponse struct {
	ptr unsafe.Pointer
}

func (ftpDirectoryResponse *FtpDirectoryResponse) CPtr() unsafe.Pointer {
	return (*C.sfFtpDirectoryResponse)(ftpDirectoryResponse.ptr)
}

type FtpListingResponse struct {
	ptr unsafe.Pointer
}

func (ftpListingResponse *FtpListingResponse) CPtr() unsafe.Pointer {
	return (*C.sfFtpListingResponse)(ftpListingResponse.ptr)
}

type FtpResponse struct {
	ptr unsafe.Pointer
}

func (ftpResponse *FtpResponse) CPtr() unsafe.Pointer {
	return (*C.sfFtpResponse)(ftpResponse.ptr)
}

type FtpStatus int32

const (
	sfFtpRestartMarkerReply FtpStatus = C.sfFtpRestartMarkerReply
	sfFtpServiceReadySoon FtpStatus = C.sfFtpServiceReadySoon
	sfFtpDataConnectionAlreadyOpened FtpStatus = C.sfFtpDataConnectionAlreadyOpened
	sfFtpOpeningDataConnection FtpStatus = C.sfFtpOpeningDataConnection
	sfFtpOk FtpStatus = C.sfFtpOk
	sfFtpPointlessCommand FtpStatus = C.sfFtpPointlessCommand
	sfFtpSystemStatus FtpStatus = C.sfFtpSystemStatus
	sfFtpDirectoryStatus FtpStatus = C.sfFtpDirectoryStatus
	sfFtpFileStatus FtpStatus = C.sfFtpFileStatus
	sfFtpHelpMessage FtpStatus = C.sfFtpHelpMessage
	sfFtpSystemType FtpStatus = C.sfFtpSystemType
	sfFtpServiceReady FtpStatus = C.sfFtpServiceReady
	sfFtpClosingConnection FtpStatus = C.sfFtpClosingConnection
	sfFtpDataConnectionOpened FtpStatus = C.sfFtpDataConnectionOpened
	sfFtpClosingDataConnection FtpStatus = C.sfFtpClosingDataConnection
	sfFtpEnteringPassiveMode FtpStatus = C.sfFtpEnteringPassiveMode
	sfFtpLoggedIn FtpStatus = C.sfFtpLoggedIn
	sfFtpFileActionOk FtpStatus = C.sfFtpFileActionOk
	sfFtpDirectoryOk FtpStatus = C.sfFtpDirectoryOk
	sfFtpNeedPassword FtpStatus = C.sfFtpNeedPassword
	sfFtpNeedAccountToLogIn FtpStatus = C.sfFtpNeedAccountToLogIn
	sfFtpNeedInformation FtpStatus = C.sfFtpNeedInformation
	sfFtpServiceUnavailable FtpStatus = C.sfFtpServiceUnavailable
	sfFtpDataConnectionUnavailable FtpStatus = C.sfFtpDataConnectionUnavailable
	sfFtpTransferAborted FtpStatus = C.sfFtpTransferAborted
	sfFtpFileActionAborted FtpStatus = C.sfFtpFileActionAborted
	sfFtpLocalError FtpStatus = C.sfFtpLocalError
	sfFtpInsufficientStorageSpace FtpStatus = C.sfFtpInsufficientStorageSpace
	sfFtpCommandUnknown FtpStatus = C.sfFtpCommandUnknown
	sfFtpParametersUnknown FtpStatus = C.sfFtpParametersUnknown
	sfFtpCommandNotImplemented FtpStatus = C.sfFtpCommandNotImplemented
	sfFtpBadCommandSequence FtpStatus = C.sfFtpBadCommandSequence
	sfFtpParameterNotImplemented FtpStatus = C.sfFtpParameterNotImplemented
	sfFtpNotLoggedIn FtpStatus = C.sfFtpNotLoggedIn
	sfFtpNeedAccountToStore FtpStatus = C.sfFtpNeedAccountToStore
	sfFtpFileUnavailable FtpStatus = C.sfFtpFileUnavailable
	sfFtpPageTypeUnknown FtpStatus = C.sfFtpPageTypeUnknown
	sfFtpNotEnoughMemory FtpStatus = C.sfFtpNotEnoughMemory
	sfFtpFilenameNotAllowed FtpStatus = C.sfFtpFilenameNotAllowed
	sfFtpInvalidResponse FtpStatus = C.sfFtpInvalidResponse
	sfFtpConnectionFailed FtpStatus = C.sfFtpConnectionFailed
	sfFtpConnectionClosed FtpStatus = C.sfFtpConnectionClosed
	sfFtpInvalidFile FtpStatus = C.sfFtpInvalidFile
)

type FtpTransferMode int32

const (
	sfFtpBinary FtpTransferMode = C.sfFtpBinary
	sfFtpAscii FtpTransferMode = C.sfFtpAscii
	sfFtpEbcdic FtpTransferMode = C.sfFtpEbcdic
)

type Vector2b struct {
	X bool
	Y bool
}

func (v Vector2b) ToC() C.sfGlslBvec2 {
	return C.sfGlslBvec2{ x: v.X, y: v.Y }
}

type Vector3b struct {
	X bool
	Y bool
	Z bool
}

func (v Vector3b) ToC() C.sfGlslBvec3 {
	return C.sfGlslBvec3{ x: v.X, y: v.Y, z: v.Z }
}

type Vector4b struct {
	X bool
	Y bool
	Z bool
	W bool
}

func (v Vector4b) ToC() C.sfGlslBvec4 {
	return C.sfGlslBvec4{ x: v.X, y: v.Y, z: v.Z, w: v.W }
}

type Vector3i struct {
	X int32
	Y int32
	Z int32
}

func (v Vector3i) ToC() C.sfGlslIvec3 {
	return C.sfGlslIvec3{ x: v.X, y: v.Y, z: v.Z }
}

type Vector4i struct {
	X int32
	Y int32
	Z int32
	W int32
}

func (v Vector4i) ToC() C.sfGlslIvec4 {
	return C.sfGlslIvec4{ x: v.X, y: v.Y, z: v.Z, w: v.W }
}

type GlslMat3 struct {
	ptr unsafe.Pointer
}

func (glslMat3 *GlslMat3) CPtr() unsafe.Pointer {
	return (*C.sfGlslMat3)(glslMat3.ptr)
}

type GlslMat4 struct {
	ptr unsafe.Pointer
}

func (glslMat4 *GlslMat4) CPtr() unsafe.Pointer {
	return (*C.sfGlslMat4)(glslMat4.ptr)
}

type Vector4f struct {
	X float32
	Y float32
	Z float32
	W float32
}

func (v Vector4f) ToC() C.sfGlslVec4 {
	return C.sfGlslVec4{ x: v.X, y: v.Y, z: v.Z, w: v.W }
}

type Glyph struct {
	ptr unsafe.Pointer
}

func (glyph *Glyph) CPtr() unsafe.Pointer {
	return (*C.sfGlyph)(glyph.ptr)
}

type Http struct {
	ptr unsafe.Pointer
}

func (http *Http) CPtr() unsafe.Pointer {
	return (*C.sfHttp)(http.ptr)
}

type HttpMethod int32

const (
	sfHttpGet HttpMethod = C.sfHttpGet
	sfHttpPost HttpMethod = C.sfHttpPost
	sfHttpHead HttpMethod = C.sfHttpHead
	sfHttpPut HttpMethod = C.sfHttpPut
	sfHttpDelete HttpMethod = C.sfHttpDelete
)

type HttpRequest struct {
	ptr unsafe.Pointer
}

func (httpRequest *HttpRequest) CPtr() unsafe.Pointer {
	return (*C.sfHttpRequest)(httpRequest.ptr)
}

type HttpResponse struct {
	ptr unsafe.Pointer
}

func (httpResponse *HttpResponse) CPtr() unsafe.Pointer {
	return (*C.sfHttpResponse)(httpResponse.ptr)
}

type HttpStatus int32

const (
	sfHttpOk HttpStatus = C.sfHttpOk
	sfHttpCreated HttpStatus = C.sfHttpCreated
	sfHttpAccepted HttpStatus = C.sfHttpAccepted
	sfHttpNoContent HttpStatus = C.sfHttpNoContent
	sfHttpResetContent HttpStatus = C.sfHttpResetContent
	sfHttpPartialContent HttpStatus = C.sfHttpPartialContent
	sfHttpMultipleChoices HttpStatus = C.sfHttpMultipleChoices
	sfHttpMovedPermanently HttpStatus = C.sfHttpMovedPermanently
	sfHttpMovedTemporarily HttpStatus = C.sfHttpMovedTemporarily
	sfHttpNotModified HttpStatus = C.sfHttpNotModified
	sfHttpBadRequest HttpStatus = C.sfHttpBadRequest
	sfHttpUnauthorized HttpStatus = C.sfHttpUnauthorized
	sfHttpForbidden HttpStatus = C.sfHttpForbidden
	sfHttpNotFound HttpStatus = C.sfHttpNotFound
	sfHttpRangeNotSatisfiable HttpStatus = C.sfHttpRangeNotSatisfiable
	sfHttpInternalServerError HttpStatus = C.sfHttpInternalServerError
	sfHttpNotImplemented HttpStatus = C.sfHttpNotImplemented
	sfHttpBadGateway HttpStatus = C.sfHttpBadGateway
	sfHttpServiceNotAvailable HttpStatus = C.sfHttpServiceNotAvailable
	sfHttpGatewayTimeout HttpStatus = C.sfHttpGatewayTimeout
	sfHttpVersionNotSupported HttpStatus = C.sfHttpVersionNotSupported
	sfHttpInvalidResponse HttpStatus = C.sfHttpInvalidResponse
	sfHttpConnectionFailed HttpStatus = C.sfHttpConnectionFailed
)

type Image struct {
	ptr unsafe.Pointer
}

func (image *Image) CPtr() unsafe.Pointer {
	return (*C.sfImage)(image.ptr)
}

type InputStream struct {
	ptr unsafe.Pointer
}

func (inputStream *InputStream) CPtr() unsafe.Pointer {
	return (*C.sfInputStream)(inputStream.ptr)
}

type IntRect struct {
	ptr unsafe.Pointer
}

func (intRect *IntRect) CPtr() unsafe.Pointer {
	return (*C.sfIntRect)(intRect.ptr)
}

type IpAddress struct {
	ptr unsafe.Pointer
}

func (ipAddress *IpAddress) CPtr() unsafe.Pointer {
	return (*C.sfIpAddress)(ipAddress.ptr)
}

type JoystickAxis int32

const (
	sfJoystickX JoystickAxis = C.sfJoystickX
	sfJoystickY JoystickAxis = C.sfJoystickY
	sfJoystickZ JoystickAxis = C.sfJoystickZ
	sfJoystickR JoystickAxis = C.sfJoystickR
	sfJoystickU JoystickAxis = C.sfJoystickU
	sfJoystickV JoystickAxis = C.sfJoystickV
	sfJoystickPovX JoystickAxis = C.sfJoystickPovX
	sfJoystickPovY JoystickAxis = C.sfJoystickPovY
)

type JoystickButtonEvent struct {
	ptr unsafe.Pointer
}

func (joystickButtonEvent *JoystickButtonEvent) CPtr() unsafe.Pointer {
	return (*C.sfJoystickButtonEvent)(joystickButtonEvent.ptr)
}

type JoystickConnectEvent struct {
	ptr unsafe.Pointer
}

func (joystickConnectEvent *JoystickConnectEvent) CPtr() unsafe.Pointer {
	return (*C.sfJoystickConnectEvent)(joystickConnectEvent.ptr)
}

type JoystickIdentification struct {
	ptr unsafe.Pointer
}

func (joystickIdentification *JoystickIdentification) CPtr() unsafe.Pointer {
	return (*C.sfJoystickIdentification)(joystickIdentification.ptr)
}

type JoystickMoveEvent struct {
	ptr unsafe.Pointer
}

func (joystickMoveEvent *JoystickMoveEvent) CPtr() unsafe.Pointer {
	return (*C.sfJoystickMoveEvent)(joystickMoveEvent.ptr)
}

type KeyCode int32

const (
	sfKeyUnknown KeyCode = C.sfKeyUnknown
	sfKeyA KeyCode = C.sfKeyA
	sfKeyB KeyCode = C.sfKeyB
	sfKeyC KeyCode = C.sfKeyC
	sfKeyD KeyCode = C.sfKeyD
	sfKeyE KeyCode = C.sfKeyE
	sfKeyF KeyCode = C.sfKeyF
	sfKeyG KeyCode = C.sfKeyG
	sfKeyH KeyCode = C.sfKeyH
	sfKeyI KeyCode = C.sfKeyI
	sfKeyJ KeyCode = C.sfKeyJ
	sfKeyK KeyCode = C.sfKeyK
	sfKeyL KeyCode = C.sfKeyL
	sfKeyM KeyCode = C.sfKeyM
	sfKeyN KeyCode = C.sfKeyN
	sfKeyO KeyCode = C.sfKeyO
	sfKeyP KeyCode = C.sfKeyP
	sfKeyQ KeyCode = C.sfKeyQ
	sfKeyR KeyCode = C.sfKeyR
	sfKeyS KeyCode = C.sfKeyS
	sfKeyT KeyCode = C.sfKeyT
	sfKeyU KeyCode = C.sfKeyU
	sfKeyV KeyCode = C.sfKeyV
	sfKeyW KeyCode = C.sfKeyW
	sfKeyX KeyCode = C.sfKeyX
	sfKeyY KeyCode = C.sfKeyY
	sfKeyZ KeyCode = C.sfKeyZ
	sfKeyNum0 KeyCode = C.sfKeyNum0
	sfKeyNum1 KeyCode = C.sfKeyNum1
	sfKeyNum2 KeyCode = C.sfKeyNum2
	sfKeyNum3 KeyCode = C.sfKeyNum3
	sfKeyNum4 KeyCode = C.sfKeyNum4
	sfKeyNum5 KeyCode = C.sfKeyNum5
	sfKeyNum6 KeyCode = C.sfKeyNum6
	sfKeyNum7 KeyCode = C.sfKeyNum7
	sfKeyNum8 KeyCode = C.sfKeyNum8
	sfKeyNum9 KeyCode = C.sfKeyNum9
	sfKeyEscape KeyCode = C.sfKeyEscape
	sfKeyLControl KeyCode = C.sfKeyLControl
	sfKeyLShift KeyCode = C.sfKeyLShift
	sfKeyLAlt KeyCode = C.sfKeyLAlt
	sfKeyLSystem KeyCode = C.sfKeyLSystem
	sfKeyRControl KeyCode = C.sfKeyRControl
	sfKeyRShift KeyCode = C.sfKeyRShift
	sfKeyRAlt KeyCode = C.sfKeyRAlt
	sfKeyRSystem KeyCode = C.sfKeyRSystem
	sfKeyMenu KeyCode = C.sfKeyMenu
	sfKeyLBracket KeyCode = C.sfKeyLBracket
	sfKeyRBracket KeyCode = C.sfKeyRBracket
	sfKeySemicolon KeyCode = C.sfKeySemicolon
	sfKeyComma KeyCode = C.sfKeyComma
	sfKeyPeriod KeyCode = C.sfKeyPeriod
	sfKeyApostrophe KeyCode = C.sfKeyApostrophe
	sfKeySlash KeyCode = C.sfKeySlash
	sfKeyBackslash KeyCode = C.sfKeyBackslash
	sfKeyGrave KeyCode = C.sfKeyGrave
	sfKeyEqual KeyCode = C.sfKeyEqual
	sfKeyHyphen KeyCode = C.sfKeyHyphen
	sfKeySpace KeyCode = C.sfKeySpace
	sfKeyEnter KeyCode = C.sfKeyEnter
	sfKeyBackspace KeyCode = C.sfKeyBackspace
	sfKeyTab KeyCode = C.sfKeyTab
	sfKeyPageUp KeyCode = C.sfKeyPageUp
	sfKeyPageDown KeyCode = C.sfKeyPageDown
	sfKeyEnd KeyCode = C.sfKeyEnd
	sfKeyHome KeyCode = C.sfKeyHome
	sfKeyInsert KeyCode = C.sfKeyInsert
	sfKeyDelete KeyCode = C.sfKeyDelete
	sfKeyAdd KeyCode = C.sfKeyAdd
	sfKeySubtract KeyCode = C.sfKeySubtract
	sfKeyMultiply KeyCode = C.sfKeyMultiply
	sfKeyDivide KeyCode = C.sfKeyDivide
	sfKeyLeft KeyCode = C.sfKeyLeft
	sfKeyRight KeyCode = C.sfKeyRight
	sfKeyUp KeyCode = C.sfKeyUp
	sfKeyDown KeyCode = C.sfKeyDown
	sfKeyNumpad0 KeyCode = C.sfKeyNumpad0
	sfKeyNumpad1 KeyCode = C.sfKeyNumpad1
	sfKeyNumpad2 KeyCode = C.sfKeyNumpad2
	sfKeyNumpad3 KeyCode = C.sfKeyNumpad3
	sfKeyNumpad4 KeyCode = C.sfKeyNumpad4
	sfKeyNumpad5 KeyCode = C.sfKeyNumpad5
	sfKeyNumpad6 KeyCode = C.sfKeyNumpad6
	sfKeyNumpad7 KeyCode = C.sfKeyNumpad7
	sfKeyNumpad8 KeyCode = C.sfKeyNumpad8
	sfKeyNumpad9 KeyCode = C.sfKeyNumpad9
	sfKeyF1 KeyCode = C.sfKeyF1
	sfKeyF2 KeyCode = C.sfKeyF2
	sfKeyF3 KeyCode = C.sfKeyF3
	sfKeyF4 KeyCode = C.sfKeyF4
	sfKeyF5 KeyCode = C.sfKeyF5
	sfKeyF6 KeyCode = C.sfKeyF6
	sfKeyF7 KeyCode = C.sfKeyF7
	sfKeyF8 KeyCode = C.sfKeyF8
	sfKeyF9 KeyCode = C.sfKeyF9
	sfKeyF10 KeyCode = C.sfKeyF10
	sfKeyF11 KeyCode = C.sfKeyF11
	sfKeyF12 KeyCode = C.sfKeyF12
	sfKeyF13 KeyCode = C.sfKeyF13
	sfKeyF14 KeyCode = C.sfKeyF14
	sfKeyF15 KeyCode = C.sfKeyF15
	sfKeyPause KeyCode = C.sfKeyPause
	sfKeyCount KeyCode = C.sfKeyCount
	sfKeyTilde KeyCode = C.sfKeyTilde
	sfKeyDash KeyCode = C.sfKeyDash
	sfKeyBack KeyCode = C.sfKeyBack
	sfKeyBackSlash KeyCode = C.sfKeyBackSlash
	sfKeySemiColon KeyCode = C.sfKeySemiColon
	sfKeyReturn KeyCode = C.sfKeyReturn
	sfKeyQuote KeyCode = C.sfKeyQuote
)

type KeyEvent struct {
	ptr unsafe.Pointer
}

func (keyEvent *KeyEvent) CPtr() unsafe.Pointer {
	return (*C.sfKeyEvent)(keyEvent.ptr)
}

type MouseButton int32

const (
	sfMouseLeft MouseButton = C.sfMouseLeft
	sfMouseRight MouseButton = C.sfMouseRight
	sfMouseMiddle MouseButton = C.sfMouseMiddle
	sfMouseXButton1 MouseButton = C.sfMouseXButton1
	sfMouseXButton2 MouseButton = C.sfMouseXButton2
	sfMouseButtonCount MouseButton = C.sfMouseButtonCount
)

type MouseButtonEvent struct {
	ptr unsafe.Pointer
}

func (mouseButtonEvent *MouseButtonEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseButtonEvent)(mouseButtonEvent.ptr)
}

type MouseMoveEvent struct {
	ptr unsafe.Pointer
}

func (mouseMoveEvent *MouseMoveEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseMoveEvent)(mouseMoveEvent.ptr)
}

type MouseWheel int32

const (
	sfMouseVerticalWheel MouseWheel = C.sfMouseVerticalWheel
	sfMouseHorizontalWheel MouseWheel = C.sfMouseHorizontalWheel
)

type MouseWheelEvent struct {
	ptr unsafe.Pointer
}

func (mouseWheelEvent *MouseWheelEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseWheelEvent)(mouseWheelEvent.ptr)
}

type MouseWheelScrollEvent struct {
	ptr unsafe.Pointer
}

func (mouseWheelScrollEvent *MouseWheelScrollEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseWheelScrollEvent)(mouseWheelScrollEvent.ptr)
}

type Music struct {
	ptr unsafe.Pointer
}

func (music *Music) CPtr() unsafe.Pointer {
	return (*C.sfMusic)(music.ptr)
}

type Mutex struct {
	ptr unsafe.Pointer
}

func (mutex *Mutex) CPtr() unsafe.Pointer {
	return (*C.sfMutex)(mutex.ptr)
}

type Packet struct {
	ptr unsafe.Pointer
}

func (packet *Packet) CPtr() unsafe.Pointer {
	return (*C.sfPacket)(packet.ptr)
}

type PrimitiveType int32

const (
	sfPoints PrimitiveType = C.sfPoints
	sfLines PrimitiveType = C.sfLines
	sfLineStrip PrimitiveType = C.sfLineStrip
	sfTriangles PrimitiveType = C.sfTriangles
	sfTriangleStrip PrimitiveType = C.sfTriangleStrip
	sfTriangleFan PrimitiveType = C.sfTriangleFan
	sfQuads PrimitiveType = C.sfQuads
	sfLinesStrip PrimitiveType = C.sfLinesStrip
	sfTrianglesStrip PrimitiveType = C.sfTrianglesStrip
	sfTrianglesFan PrimitiveType = C.sfTrianglesFan
)

type RectangleShape struct {
	ptr unsafe.Pointer
}

func (rectangleShape *RectangleShape) CPtr() unsafe.Pointer {
	return (*C.sfRectangleShape)(rectangleShape.ptr)
}

type RenderStates struct {
	ptr unsafe.Pointer
}

func (renderStates *RenderStates) CPtr() unsafe.Pointer {
	return (*C.sfRenderStates)(renderStates.ptr)
}

type RenderTexture struct {
	ptr unsafe.Pointer
}

func (renderTexture *RenderTexture) CPtr() unsafe.Pointer {
	return (*C.sfRenderTexture)(renderTexture.ptr)
}

type RenderWindow struct {
	ptr unsafe.Pointer
}

func (renderWindow *RenderWindow) CPtr() unsafe.Pointer {
	return (*C.sfRenderWindow)(renderWindow.ptr)
}

type Scancode int32

const (
	sfScanUnknown Scancode = C.sfScanUnknown
	sfScanA Scancode = C.sfScanA
	sfScanB Scancode = C.sfScanB
	sfScanC Scancode = C.sfScanC
	sfScanD Scancode = C.sfScanD
	sfScanE Scancode = C.sfScanE
	sfScanF Scancode = C.sfScanF
	sfScanG Scancode = C.sfScanG
	sfScanH Scancode = C.sfScanH
	sfScanI Scancode = C.sfScanI
	sfScanJ Scancode = C.sfScanJ
	sfScanK Scancode = C.sfScanK
	sfScanL Scancode = C.sfScanL
	sfScanM Scancode = C.sfScanM
	sfScanN Scancode = C.sfScanN
	sfScanO Scancode = C.sfScanO
	sfScanP Scancode = C.sfScanP
	sfScanQ Scancode = C.sfScanQ
	sfScanR Scancode = C.sfScanR
	sfScanS Scancode = C.sfScanS
	sfScanT Scancode = C.sfScanT
	sfScanU Scancode = C.sfScanU
	sfScanV Scancode = C.sfScanV
	sfScanW Scancode = C.sfScanW
	sfScanX Scancode = C.sfScanX
	sfScanY Scancode = C.sfScanY
	sfScanZ Scancode = C.sfScanZ
	sfScanNum1 Scancode = C.sfScanNum1
	sfScanNum2 Scancode = C.sfScanNum2
	sfScanNum3 Scancode = C.sfScanNum3
	sfScanNum4 Scancode = C.sfScanNum4
	sfScanNum5 Scancode = C.sfScanNum5
	sfScanNum6 Scancode = C.sfScanNum6
	sfScanNum7 Scancode = C.sfScanNum7
	sfScanNum8 Scancode = C.sfScanNum8
	sfScanNum9 Scancode = C.sfScanNum9
	sfScanNum0 Scancode = C.sfScanNum0
	sfScanEnter Scancode = C.sfScanEnter
	sfScanEscape Scancode = C.sfScanEscape
	sfScanBackspace Scancode = C.sfScanBackspace
	sfScanTab Scancode = C.sfScanTab
	sfScanSpace Scancode = C.sfScanSpace
	sfScanHyphen Scancode = C.sfScanHyphen
	sfScanEqual Scancode = C.sfScanEqual
	sfScanLBracket Scancode = C.sfScanLBracket
	sfScanRBracket Scancode = C.sfScanRBracket
	sfScanBackslash Scancode = C.sfScanBackslash
	sfScanSemicolon Scancode = C.sfScanSemicolon
	sfScanApostrophe Scancode = C.sfScanApostrophe
	sfScanGrave Scancode = C.sfScanGrave
	sfScanComma Scancode = C.sfScanComma
	sfScanPeriod Scancode = C.sfScanPeriod
	sfScanSlash Scancode = C.sfScanSlash
	sfScanF1 Scancode = C.sfScanF1
	sfScanF2 Scancode = C.sfScanF2
	sfScanF3 Scancode = C.sfScanF3
	sfScanF4 Scancode = C.sfScanF4
	sfScanF5 Scancode = C.sfScanF5
	sfScanF6 Scancode = C.sfScanF6
	sfScanF7 Scancode = C.sfScanF7
	sfScanF8 Scancode = C.sfScanF8
	sfScanF9 Scancode = C.sfScanF9
	sfScanF10 Scancode = C.sfScanF10
	sfScanF11 Scancode = C.sfScanF11
	sfScanF12 Scancode = C.sfScanF12
	sfScanF13 Scancode = C.sfScanF13
	sfScanF14 Scancode = C.sfScanF14
	sfScanF15 Scancode = C.sfScanF15
	sfScanF16 Scancode = C.sfScanF16
	sfScanF17 Scancode = C.sfScanF17
	sfScanF18 Scancode = C.sfScanF18
	sfScanF19 Scancode = C.sfScanF19
	sfScanF20 Scancode = C.sfScanF20
	sfScanF21 Scancode = C.sfScanF21
	sfScanF22 Scancode = C.sfScanF22
	sfScanF23 Scancode = C.sfScanF23
	sfScanF24 Scancode = C.sfScanF24
	sfScanCapsLock Scancode = C.sfScanCapsLock
	sfScanPrintScreen Scancode = C.sfScanPrintScreen
	sfScanScrollLock Scancode = C.sfScanScrollLock
	sfScanPause Scancode = C.sfScanPause
	sfScanInsert Scancode = C.sfScanInsert
	sfScanHome Scancode = C.sfScanHome
	sfScanPageUp Scancode = C.sfScanPageUp
	sfScanDelete Scancode = C.sfScanDelete
	sfScanEnd Scancode = C.sfScanEnd
	sfScanPageDown Scancode = C.sfScanPageDown
	sfScanRight Scancode = C.sfScanRight
	sfScanLeft Scancode = C.sfScanLeft
	sfScanDown Scancode = C.sfScanDown
	sfScanUp Scancode = C.sfScanUp
	sfScanNumLock Scancode = C.sfScanNumLock
	sfScanNumpadDivide Scancode = C.sfScanNumpadDivide
	sfScanNumpadMultiply Scancode = C.sfScanNumpadMultiply
	sfScanNumpadMinus Scancode = C.sfScanNumpadMinus
	sfScanNumpadPlus Scancode = C.sfScanNumpadPlus
	sfScanNumpadEqual Scancode = C.sfScanNumpadEqual
	sfScanNumpadEnter Scancode = C.sfScanNumpadEnter
	sfScanNumpadDecimal Scancode = C.sfScanNumpadDecimal
	sfScanNumpad1 Scancode = C.sfScanNumpad1
	sfScanNumpad2 Scancode = C.sfScanNumpad2
	sfScanNumpad3 Scancode = C.sfScanNumpad3
	sfScanNumpad4 Scancode = C.sfScanNumpad4
	sfScanNumpad5 Scancode = C.sfScanNumpad5
	sfScanNumpad6 Scancode = C.sfScanNumpad6
	sfScanNumpad7 Scancode = C.sfScanNumpad7
	sfScanNumpad8 Scancode = C.sfScanNumpad8
	sfScanNumpad9 Scancode = C.sfScanNumpad9
	sfScanNumpad0 Scancode = C.sfScanNumpad0
	sfScanNonUsBackslash Scancode = C.sfScanNonUsBackslash
	sfScanApplication Scancode = C.sfScanApplication
	sfScanExecute Scancode = C.sfScanExecute
	sfScanModeChange Scancode = C.sfScanModeChange
	sfScanHelp Scancode = C.sfScanHelp
	sfScanMenu Scancode = C.sfScanMenu
	sfScanSelect Scancode = C.sfScanSelect
	sfScanRedo Scancode = C.sfScanRedo
	sfScanUndo Scancode = C.sfScanUndo
	sfScanCut Scancode = C.sfScanCut
	sfScanCopy Scancode = C.sfScanCopy
	sfScanPaste Scancode = C.sfScanPaste
	sfScanVolumeMute Scancode = C.sfScanVolumeMute
	sfScanVolumeUp Scancode = C.sfScanVolumeUp
	sfScanVolumeDown Scancode = C.sfScanVolumeDown
	sfScanMediaPlayPause Scancode = C.sfScanMediaPlayPause
	sfScanMediaStop Scancode = C.sfScanMediaStop
	sfScanMediaNextTrack Scancode = C.sfScanMediaNextTrack
	sfScanMediaPreviousTrack Scancode = C.sfScanMediaPreviousTrack
	sfScanLControl Scancode = C.sfScanLControl
	sfScanLShift Scancode = C.sfScanLShift
	sfScanLAlt Scancode = C.sfScanLAlt
	sfScanLSystem Scancode = C.sfScanLSystem
	sfScanRControl Scancode = C.sfScanRControl
	sfScanRShift Scancode = C.sfScanRShift
	sfScanRAlt Scancode = C.sfScanRAlt
	sfScanRSystem Scancode = C.sfScanRSystem
	sfScanBack Scancode = C.sfScanBack
	sfScanForward Scancode = C.sfScanForward
	sfScanRefresh Scancode = C.sfScanRefresh
	sfScanStop Scancode = C.sfScanStop
	sfScanSearch Scancode = C.sfScanSearch
	sfScanFavorites Scancode = C.sfScanFavorites
	sfScanHomePage Scancode = C.sfScanHomePage
	sfScanLaunchApplication1 Scancode = C.sfScanLaunchApplication1
	sfScanLaunchApplication2 Scancode = C.sfScanLaunchApplication2
	sfScanLaunchMail Scancode = C.sfScanLaunchMail
	sfScanLaunchMediaSelect Scancode = C.sfScanLaunchMediaSelect
	sfScancodeCount Scancode = C.sfScancodeCount
)

type SensorEvent struct {
	ptr unsafe.Pointer
}

func (sensorEvent *SensorEvent) CPtr() unsafe.Pointer {
	return (*C.sfSensorEvent)(sensorEvent.ptr)
}

type SensorType int32

const (
	sfSensorAccelerometer SensorType = C.sfSensorAccelerometer
	sfSensorGyroscope SensorType = C.sfSensorGyroscope
	sfSensorMagnetometer SensorType = C.sfSensorMagnetometer
	sfSensorGravity SensorType = C.sfSensorGravity
	sfSensorUserAcceleration SensorType = C.sfSensorUserAcceleration
	sfSensorOrientation SensorType = C.sfSensorOrientation
	sfSensorCount SensorType = C.sfSensorCount
)

type Shader struct {
	ptr unsafe.Pointer
}

func (shader *Shader) CPtr() unsafe.Pointer {
	return (*C.sfShader)(shader.ptr)
}

type Shape struct {
	ptr unsafe.Pointer
}

func (shape *Shape) CPtr() unsafe.Pointer {
	return (*C.sfShape)(shape.ptr)
}

type SizeEvent struct {
	ptr unsafe.Pointer
}

func (sizeEvent *SizeEvent) CPtr() unsafe.Pointer {
	return (*C.sfSizeEvent)(sizeEvent.ptr)
}

type SocketSelector struct {
	ptr unsafe.Pointer
}

func (socketSelector *SocketSelector) CPtr() unsafe.Pointer {
	return (*C.sfSocketSelector)(socketSelector.ptr)
}

type SocketStatus int32

const (
	sfSocketDone SocketStatus = C.sfSocketDone
	sfSocketNotReady SocketStatus = C.sfSocketNotReady
	sfSocketPartial SocketStatus = C.sfSocketPartial
	sfSocketDisconnected SocketStatus = C.sfSocketDisconnected
	sfSocketError SocketStatus = C.sfSocketError
)

type Sound struct {
	ptr unsafe.Pointer
}

func (sound *Sound) CPtr() unsafe.Pointer {
	return (*C.sfSound)(sound.ptr)
}

type SoundBuffer struct {
	ptr unsafe.Pointer
}

func (soundBuffer *SoundBuffer) CPtr() unsafe.Pointer {
	return (*C.sfSoundBuffer)(soundBuffer.ptr)
}

type SoundBufferRecorder struct {
	ptr unsafe.Pointer
}

func (soundBufferRecorder *SoundBufferRecorder) CPtr() unsafe.Pointer {
	return (*C.sfSoundBufferRecorder)(soundBufferRecorder.ptr)
}

type SoundStatus int32

const (
	sfStopped SoundStatus = C.sfStopped
	sfPaused SoundStatus = C.sfPaused
	sfPlaying SoundStatus = C.sfPlaying
)

type Sprite struct {
	ptr unsafe.Pointer
}

func (sprite *Sprite) CPtr() unsafe.Pointer {
	return (*C.sfSprite)(sprite.ptr)
}

type TcpListener struct {
	ptr unsafe.Pointer
}

func (tcpListener *TcpListener) CPtr() unsafe.Pointer {
	return (*C.sfTcpListener)(tcpListener.ptr)
}

type TcpSocket struct {
	ptr unsafe.Pointer
}

func (tcpSocket *TcpSocket) CPtr() unsafe.Pointer {
	return (*C.sfTcpSocket)(tcpSocket.ptr)
}

type Text struct {
	ptr unsafe.Pointer
}

func (text *Text) CPtr() unsafe.Pointer {
	return (*C.sfText)(text.ptr)
}

type TextEvent struct {
	ptr unsafe.Pointer
}

func (textEvent *TextEvent) CPtr() unsafe.Pointer {
	return (*C.sfTextEvent)(textEvent.ptr)
}

type TextStyle int32

const (
	sfTextRegular TextStyle = C.sfTextRegular
	sfTextBold TextStyle = C.sfTextBold
	sfTextItalic TextStyle = C.sfTextItalic
	sfTextUnderlined TextStyle = C.sfTextUnderlined
	sfTextStrikeThrough TextStyle = C.sfTextStrikeThrough
)

type Texture struct {
	ptr unsafe.Pointer
}

func (texture *Texture) CPtr() unsafe.Pointer {
	return (*C.sfTexture)(texture.ptr)
}

type TextureCoordinateType int32

const (
	sfTextureNormalized TextureCoordinateType = C.sfTextureNormalized
	sfTexturePixels TextureCoordinateType = C.sfTexturePixels
)

type Thread struct {
	ptr unsafe.Pointer
}

func (thread *Thread) CPtr() unsafe.Pointer {
	return (*C.sfThread)(thread.ptr)
}

type Time struct {
	ptr unsafe.Pointer
}

func (time *Time) CPtr() unsafe.Pointer {
	return (*C.sfTime)(time.ptr)
}

type TimeSpan struct {
	ptr unsafe.Pointer
}

func (timeSpan *TimeSpan) CPtr() unsafe.Pointer {
	return (*C.sfTimeSpan)(timeSpan.ptr)
}

type TouchEvent struct {
	ptr unsafe.Pointer
}

func (touchEvent *TouchEvent) CPtr() unsafe.Pointer {
	return (*C.sfTouchEvent)(touchEvent.ptr)
}

type Transform struct {
	ptr unsafe.Pointer
}

func (transform *Transform) CPtr() unsafe.Pointer {
	return (*C.sfTransform)(transform.ptr)
}

type Transformable struct {
	ptr unsafe.Pointer
}

func (transformable *Transformable) CPtr() unsafe.Pointer {
	return (*C.sfTransformable)(transformable.ptr)
}

type UdpSocket struct {
	ptr unsafe.Pointer
}

func (udpSocket *UdpSocket) CPtr() unsafe.Pointer {
	return (*C.sfUdpSocket)(udpSocket.ptr)
}

type Vector2f struct {
	X float32
	Y float32
}

func (v Vector2f) ToC() C.sfVector2f {
	return C.sfVector2f{ x: v.X, y: v.Y }
}

type Vector2i struct {
	X int32
	Y int32
}

func (v Vector2i) ToC() C.sfVector2i {
	return C.sfVector2i{ x: v.X, y: v.Y }
}

type Vector2u struct {
	X uint32
	Y uint32
}

func (v Vector2u) ToC() C.sfVector2u {
	return C.sfVector2u{ x: v.X, y: v.Y }
}

type Vector3f struct {
	X float32
	Y float32
	Z float32
}

func (v Vector3f) ToC() C.sfVector3f {
	return C.sfVector3f{ x: v.X, y: v.Y, z: v.Z }
}

type Vertex struct {
	ptr unsafe.Pointer
}

func (vertex *Vertex) CPtr() unsafe.Pointer {
	return (*C.sfVertex)(vertex.ptr)
}

type VertexArray struct {
	ptr unsafe.Pointer
}

func (vertexArray *VertexArray) CPtr() unsafe.Pointer {
	return (*C.sfVertexArray)(vertexArray.ptr)
}

type VertexBuffer struct {
	ptr unsafe.Pointer
}

func (vertexBuffer *VertexBuffer) CPtr() unsafe.Pointer {
	return (*C.sfVertexBuffer)(vertexBuffer.ptr)
}

type VertexBufferUsage int32

const (
	sfVertexBufferStream VertexBufferUsage = C.sfVertexBufferStream
	sfVertexBufferDynamic VertexBufferUsage = C.sfVertexBufferDynamic
	sfVertexBufferStatic VertexBufferUsage = C.sfVertexBufferStatic
)

type VideoMode struct {
	ptr unsafe.Pointer
}

func (videoMode *VideoMode) CPtr() unsafe.Pointer {
	return (*C.sfVideoMode)(videoMode.ptr)
}

type View struct {
	ptr unsafe.Pointer
}

func (view *View) CPtr() unsafe.Pointer {
	return (*C.sfView)(view.ptr)
}

type Window struct {
	ptr unsafe.Pointer
}

func (window *Window) CPtr() unsafe.Pointer {
	return (*C.sfWindow)(window.ptr)
}

type WindowBase struct {
	ptr unsafe.Pointer
}

func (windowBase *WindowBase) CPtr() unsafe.Pointer {
	return (*C.sfWindowBase)(windowBase.ptr)
}

type WindowStyle int32

const (
	sfNone WindowStyle = C.sfNone
	sfTitlebar WindowStyle = C.sfTitlebar
	sfResize WindowStyle = C.sfResize
	sfClose WindowStyle = C.sfClose
	sfFullscreen WindowStyle = C.sfFullscreen
	sfDefaultStyle WindowStyle = C.sfDefaultStyle
)

