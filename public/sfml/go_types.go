// Code generated by go-sfml. DO NOT EDIT.

package sfml

import (
	"C"
	"unsafe"
)

type BlendEquation int32

const (
	BlendEquationAdd BlendEquation = C.BlendEquationAdd
	BlendEquationSubtract BlendEquation = C.BlendEquationSubtract
	BlendEquationReverseSubtract BlendEquation = C.BlendEquationReverseSubtract
	BlendEquationMin BlendEquation = C.BlendEquationMin
	BlendEquationMax BlendEquation = C.BlendEquationMax
)

type BlendFactor int32

const (
	BlendFactorZero BlendFactor = C.BlendFactorZero
	BlendFactorOne BlendFactor = C.BlendFactorOne
	BlendFactorSrcColor BlendFactor = C.BlendFactorSrcColor
	BlendFactorOneMinusSrcColor BlendFactor = C.BlendFactorOneMinusSrcColor
	BlendFactorDstColor BlendFactor = C.BlendFactorDstColor
	BlendFactorOneMinusDstColor BlendFactor = C.BlendFactorOneMinusDstColor
	BlendFactorSrcAlpha BlendFactor = C.BlendFactorSrcAlpha
	BlendFactorOneMinusSrcAlpha BlendFactor = C.BlendFactorOneMinusSrcAlpha
	BlendFactorDstAlpha BlendFactor = C.BlendFactorDstAlpha
	BlendFactorOneMinusDstAlpha BlendFactor = C.BlendFactorOneMinusDstAlpha
)

type BlendMode struct {
	ColorSrcFactor BlendFactor
	ColorDstFactor BlendFactor
	ColorEquation BlendEquation
	AlphaSrcFactor BlendFactor
	AlphaDstFactor BlendFactor
	AlphaEquation BlendEquation
}

func (b BlendMode) ToC() C.sfBlendMode {
	return C.sfBlendMode{ colorSrcFactor: b.ColorSrcFactor, colorDstFactor: b.ColorDstFactor, colorEquation: b.ColorEquation, alphaSrcFactor: b.AlphaSrcFactor, alphaDstFactor: b.AlphaDstFactor, alphaEquation: b.AlphaEquation }
}

type Buffer struct {
	ptr unsafe.Pointer
}

func (buffer *Buffer) CPtr() unsafe.Pointer {
	return (*C.sfBuffer)(buffer.ptr)
}

type CircleShape struct {
	ptr unsafe.Pointer
}

func (circleShape *CircleShape) CPtr() unsafe.Pointer {
	return (*C.sfCircleShape)(circleShape.ptr)
}

type Clock struct {
	ptr unsafe.Pointer
}

func (clock *Clock) CPtr() unsafe.Pointer {
	return (*C.sfClock)(clock.ptr)
}

type Color struct {
	R uint8
	G uint8
	B uint8
	A uint8
}

func (c Color) ToC() C.sfColor {
	return C.sfColor{ r: c.R, g: c.G, b: c.B, a: c.A }
}

type Context struct {
	ptr unsafe.Pointer
}

func (context *Context) CPtr() unsafe.Pointer {
	return (*C.sfContext)(context.ptr)
}

type ContextAttribute int32

const (
	ContextDefault ContextAttribute = C.ContextDefault
	ContextCore ContextAttribute = C.ContextCore
	ContextDebug ContextAttribute = C.ContextDebug
)

type ContextSettings struct {
	DepthBits uint32
	StencilBits uint32
	AntialiasingLevel uint32
	MajorVersion uint32
	MinorVersion uint32
	AttributeFlags uint32
	SRgbCapable bool
}

func (c ContextSettings) ToC() C.sfContextSettings {
	return C.sfContextSettings{ depthBits: c.DepthBits, stencilBits: c.StencilBits, antialiasingLevel: c.AntialiasingLevel, majorVersion: c.MajorVersion, minorVersion: c.MinorVersion, attributeFlags: c.AttributeFlags, sRgbCapable: c.SRgbCapable }
}

type ConvexShape struct {
	ptr unsafe.Pointer
}

func (convexShape *ConvexShape) CPtr() unsafe.Pointer {
	return (*C.sfConvexShape)(convexShape.ptr)
}

type Cursor struct {
	ptr unsafe.Pointer
}

func (cursor *Cursor) CPtr() unsafe.Pointer {
	return (*C.sfCursor)(cursor.ptr)
}

type CursorType int32

const (
	CursorArrow CursorType = C.CursorArrow
	CursorArrowWait CursorType = C.CursorArrowWait
	CursorWait CursorType = C.CursorWait
	CursorText CursorType = C.CursorText
	CursorHand CursorType = C.CursorHand
	CursorSizeHorizontal CursorType = C.CursorSizeHorizontal
	CursorSizeVertical CursorType = C.CursorSizeVertical
	CursorSizeTopLeftBottomRight CursorType = C.CursorSizeTopLeftBottomRight
	CursorSizeBottomLeftTopRight CursorType = C.CursorSizeBottomLeftTopRight
	CursorSizeLeft CursorType = C.CursorSizeLeft
	CursorSizeRight CursorType = C.CursorSizeRight
	CursorSizeTop CursorType = C.CursorSizeTop
	CursorSizeBottom CursorType = C.CursorSizeBottom
	CursorSizeTopLeft CursorType = C.CursorSizeTopLeft
	CursorSizeBottomRight CursorType = C.CursorSizeBottomRight
	CursorSizeBottomLeft CursorType = C.CursorSizeBottomLeft
	CursorSizeTopRight CursorType = C.CursorSizeTopRight
	CursorSizeAll CursorType = C.CursorSizeAll
	CursorCross CursorType = C.CursorCross
	CursorHelp CursorType = C.CursorHelp
	CursorNotAllowed CursorType = C.CursorNotAllowed
)

type Event struct {
	ptr unsafe.Pointer
}

func (event *Event) CPtr() unsafe.Pointer {
	return (*C.sfEvent)(event.ptr)
}

type EventType int32

const (
	EvtClosed EventType = C.EvtClosed
	EvtResized EventType = C.EvtResized
	EvtLostFocus EventType = C.EvtLostFocus
	EvtGainedFocus EventType = C.EvtGainedFocus
	EvtTextEntered EventType = C.EvtTextEntered
	EvtKeyPressed EventType = C.EvtKeyPressed
	EvtKeyReleased EventType = C.EvtKeyReleased
	EvtMouseWheelMoved EventType = C.EvtMouseWheelMoved
	EvtMouseWheelScrolled EventType = C.EvtMouseWheelScrolled
	EvtMouseButtonPressed EventType = C.EvtMouseButtonPressed
	EvtMouseButtonReleased EventType = C.EvtMouseButtonReleased
	EvtMouseMoved EventType = C.EvtMouseMoved
	EvtMouseEntered EventType = C.EvtMouseEntered
	EvtMouseLeft EventType = C.EvtMouseLeft
	EvtJoystickButtonPressed EventType = C.EvtJoystickButtonPressed
	EvtJoystickButtonReleased EventType = C.EvtJoystickButtonReleased
	EvtJoystickMoved EventType = C.EvtJoystickMoved
	EvtJoystickConnected EventType = C.EvtJoystickConnected
	EvtJoystickDisconnected EventType = C.EvtJoystickDisconnected
	EvtTouchBegan EventType = C.EvtTouchBegan
	EvtTouchMoved EventType = C.EvtTouchMoved
	EvtTouchEnded EventType = C.EvtTouchEnded
	EvtSensorChanged EventType = C.EvtSensorChanged
	EvtCount EventType = C.EvtCount
)

type FloatRect struct {
	Left float32
	Top float32
	Width float32
	Height float32
}

func (f FloatRect) ToC() C.sfFloatRect {
	return C.sfFloatRect{ left: f.Left, top: f.Top, width: f.Width, height: f.Height }
}

type Font struct {
	ptr unsafe.Pointer
}

func (font *Font) CPtr() unsafe.Pointer {
	return (*C.sfFont)(font.ptr)
}

type FontInfo struct {
	ptr unsafe.Pointer
}

func (fontInfo *FontInfo) CPtr() unsafe.Pointer {
	return (*C.sfFontInfo)(fontInfo.ptr)
}

type Vector2b struct {
	X bool
	Y bool
}

func (v Vector2b) ToC() C.sfGlslBvec2 {
	return C.sfGlslBvec2{ x: v.X, y: v.Y }
}

type Vector3b struct {
	X bool
	Y bool
	Z bool
}

func (v Vector3b) ToC() C.sfGlslBvec3 {
	return C.sfGlslBvec3{ x: v.X, y: v.Y, z: v.Z }
}

type Vector4b struct {
	X bool
	Y bool
	Z bool
	W bool
}

func (v Vector4b) ToC() C.sfGlslBvec4 {
	return C.sfGlslBvec4{ x: v.X, y: v.Y, z: v.Z, w: v.W }
}

type Vector3i struct {
	X int32
	Y int32
	Z int32
}

func (v Vector3i) ToC() C.sfGlslIvec3 {
	return C.sfGlslIvec3{ x: v.X, y: v.Y, z: v.Z }
}

type Vector4i struct {
	X int32
	Y int32
	Z int32
	W int32
}

func (v Vector4i) ToC() C.sfGlslIvec4 {
	return C.sfGlslIvec4{ x: v.X, y: v.Y, z: v.Z, w: v.W }
}

type GlslMat3 struct {
	ptr unsafe.Pointer
}

func (glslMat3 *GlslMat3) CPtr() unsafe.Pointer {
	return (*C.sfGlslMat3)(glslMat3.ptr)
}

type GlslMat4 struct {
	ptr unsafe.Pointer
}

func (glslMat4 *GlslMat4) CPtr() unsafe.Pointer {
	return (*C.sfGlslMat4)(glslMat4.ptr)
}

type Vector4f struct {
	X float32
	Y float32
	Z float32
	W float32
}

func (v Vector4f) ToC() C.sfGlslVec4 {
	return C.sfGlslVec4{ x: v.X, y: v.Y, z: v.Z, w: v.W }
}

type Glyph struct {
	ptr unsafe.Pointer
}

func (glyph *Glyph) CPtr() unsafe.Pointer {
	return (*C.sfGlyph)(glyph.ptr)
}

type Image struct {
	ptr unsafe.Pointer
}

func (image *Image) CPtr() unsafe.Pointer {
	return (*C.sfImage)(image.ptr)
}

type InputStream struct {
	ptr unsafe.Pointer
}

func (inputStream *InputStream) CPtr() unsafe.Pointer {
	return (*C.sfInputStream)(inputStream.ptr)
}

type IntRect struct {
	Left int32
	Top int32
	Width int32
	Height int32
}

func (i IntRect) ToC() C.sfIntRect {
	return C.sfIntRect{ left: i.Left, top: i.Top, width: i.Width, height: i.Height }
}

type JoystickAxis int32

const (
	JoystickX JoystickAxis = C.JoystickX
	JoystickY JoystickAxis = C.JoystickY
	JoystickZ JoystickAxis = C.JoystickZ
	JoystickR JoystickAxis = C.JoystickR
	JoystickU JoystickAxis = C.JoystickU
	JoystickV JoystickAxis = C.JoystickV
	JoystickPovX JoystickAxis = C.JoystickPovX
	JoystickPovY JoystickAxis = C.JoystickPovY
)

type JoystickButtonEvent struct {
	ptr unsafe.Pointer
}

func (joystickButtonEvent *JoystickButtonEvent) CPtr() unsafe.Pointer {
	return (*C.sfJoystickButtonEvent)(joystickButtonEvent.ptr)
}

type JoystickConnectEvent struct {
	ptr unsafe.Pointer
}

func (joystickConnectEvent *JoystickConnectEvent) CPtr() unsafe.Pointer {
	return (*C.sfJoystickConnectEvent)(joystickConnectEvent.ptr)
}

type JoystickIdentification struct {
	ptr unsafe.Pointer
}

func (joystickIdentification *JoystickIdentification) CPtr() unsafe.Pointer {
	return (*C.sfJoystickIdentification)(joystickIdentification.ptr)
}

type JoystickMoveEvent struct {
	ptr unsafe.Pointer
}

func (joystickMoveEvent *JoystickMoveEvent) CPtr() unsafe.Pointer {
	return (*C.sfJoystickMoveEvent)(joystickMoveEvent.ptr)
}

type KeyCode int32

const (
	KeyUnknown KeyCode = C.KeyUnknown
	KeyA KeyCode = C.KeyA
	KeyB KeyCode = C.KeyB
	KeyC KeyCode = C.KeyC
	KeyD KeyCode = C.KeyD
	KeyE KeyCode = C.KeyE
	KeyF KeyCode = C.KeyF
	KeyG KeyCode = C.KeyG
	KeyH KeyCode = C.KeyH
	KeyI KeyCode = C.KeyI
	KeyJ KeyCode = C.KeyJ
	KeyK KeyCode = C.KeyK
	KeyL KeyCode = C.KeyL
	KeyM KeyCode = C.KeyM
	KeyN KeyCode = C.KeyN
	KeyO KeyCode = C.KeyO
	KeyP KeyCode = C.KeyP
	KeyQ KeyCode = C.KeyQ
	KeyR KeyCode = C.KeyR
	KeyS KeyCode = C.KeyS
	KeyT KeyCode = C.KeyT
	KeyU KeyCode = C.KeyU
	KeyV KeyCode = C.KeyV
	KeyW KeyCode = C.KeyW
	KeyX KeyCode = C.KeyX
	KeyY KeyCode = C.KeyY
	KeyZ KeyCode = C.KeyZ
	KeyNum0 KeyCode = C.KeyNum0
	KeyNum1 KeyCode = C.KeyNum1
	KeyNum2 KeyCode = C.KeyNum2
	KeyNum3 KeyCode = C.KeyNum3
	KeyNum4 KeyCode = C.KeyNum4
	KeyNum5 KeyCode = C.KeyNum5
	KeyNum6 KeyCode = C.KeyNum6
	KeyNum7 KeyCode = C.KeyNum7
	KeyNum8 KeyCode = C.KeyNum8
	KeyNum9 KeyCode = C.KeyNum9
	KeyEscape KeyCode = C.KeyEscape
	KeyLcOntrol KeyCode = C.KeyLcOntrol
	KeyLsHift KeyCode = C.KeyLsHift
	KeyLaLt KeyCode = C.KeyLaLt
	KeyLsYstem KeyCode = C.KeyLsYstem
	KeyRcOntrol KeyCode = C.KeyRcOntrol
	KeyRsHift KeyCode = C.KeyRsHift
	KeyRaLt KeyCode = C.KeyRaLt
	KeyRsYstem KeyCode = C.KeyRsYstem
	KeyMenu KeyCode = C.KeyMenu
	KeyLbRacket KeyCode = C.KeyLbRacket
	KeyRbRacket KeyCode = C.KeyRbRacket
	KeySemicolon KeyCode = C.KeySemicolon
	KeyComma KeyCode = C.KeyComma
	KeyPeriod KeyCode = C.KeyPeriod
	KeyApostrophe KeyCode = C.KeyApostrophe
	KeySlash KeyCode = C.KeySlash
	KeyBackslash KeyCode = C.KeyBackslash
	KeyGrave KeyCode = C.KeyGrave
	KeyEqual KeyCode = C.KeyEqual
	KeyHyphen KeyCode = C.KeyHyphen
	KeySpace KeyCode = C.KeySpace
	KeyEnter KeyCode = C.KeyEnter
	KeyBackspace KeyCode = C.KeyBackspace
	KeyTab KeyCode = C.KeyTab
	KeyPageUp KeyCode = C.KeyPageUp
	KeyPageDown KeyCode = C.KeyPageDown
	KeyEnd KeyCode = C.KeyEnd
	KeyHome KeyCode = C.KeyHome
	KeyInsert KeyCode = C.KeyInsert
	KeyDelete KeyCode = C.KeyDelete
	KeyAdd KeyCode = C.KeyAdd
	KeySubtract KeyCode = C.KeySubtract
	KeyMultiply KeyCode = C.KeyMultiply
	KeyDivide KeyCode = C.KeyDivide
	KeyLeft KeyCode = C.KeyLeft
	KeyRight KeyCode = C.KeyRight
	KeyUp KeyCode = C.KeyUp
	KeyDown KeyCode = C.KeyDown
	KeyNumpad0 KeyCode = C.KeyNumpad0
	KeyNumpad1 KeyCode = C.KeyNumpad1
	KeyNumpad2 KeyCode = C.KeyNumpad2
	KeyNumpad3 KeyCode = C.KeyNumpad3
	KeyNumpad4 KeyCode = C.KeyNumpad4
	KeyNumpad5 KeyCode = C.KeyNumpad5
	KeyNumpad6 KeyCode = C.KeyNumpad6
	KeyNumpad7 KeyCode = C.KeyNumpad7
	KeyNumpad8 KeyCode = C.KeyNumpad8
	KeyNumpad9 KeyCode = C.KeyNumpad9
	KeyF1 KeyCode = C.KeyF1
	KeyF2 KeyCode = C.KeyF2
	KeyF3 KeyCode = C.KeyF3
	KeyF4 KeyCode = C.KeyF4
	KeyF5 KeyCode = C.KeyF5
	KeyF6 KeyCode = C.KeyF6
	KeyF7 KeyCode = C.KeyF7
	KeyF8 KeyCode = C.KeyF8
	KeyF9 KeyCode = C.KeyF9
	KeyF10 KeyCode = C.KeyF10
	KeyF11 KeyCode = C.KeyF11
	KeyF12 KeyCode = C.KeyF12
	KeyF13 KeyCode = C.KeyF13
	KeyF14 KeyCode = C.KeyF14
	KeyF15 KeyCode = C.KeyF15
	KeyPause KeyCode = C.KeyPause
	KeyCount KeyCode = C.KeyCount
	KeyTilde KeyCode = C.KeyTilde
	KeyDash KeyCode = C.KeyDash
	KeyBack KeyCode = C.KeyBack
	KeyBackSlash KeyCode = C.KeyBackSlash
	KeySemiColon KeyCode = C.KeySemiColon
	KeyReturn KeyCode = C.KeyReturn
	KeyQuote KeyCode = C.KeyQuote
)

type KeyEvent struct {
	ptr unsafe.Pointer
}

func (keyEvent *KeyEvent) CPtr() unsafe.Pointer {
	return (*C.sfKeyEvent)(keyEvent.ptr)
}

type MouseButton int32

const (
	MouseLeft MouseButton = C.MouseLeft
	MouseRight MouseButton = C.MouseRight
	MouseMiddle MouseButton = C.MouseMiddle
	MouseXbUtton1 MouseButton = C.MouseXbUtton1
	MouseXbUtton2 MouseButton = C.MouseXbUtton2
	MouseButtonCount MouseButton = C.MouseButtonCount
)

type MouseButtonEvent struct {
	ptr unsafe.Pointer
}

func (mouseButtonEvent *MouseButtonEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseButtonEvent)(mouseButtonEvent.ptr)
}

type MouseMoveEvent struct {
	ptr unsafe.Pointer
}

func (mouseMoveEvent *MouseMoveEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseMoveEvent)(mouseMoveEvent.ptr)
}

type MouseWheel int32

const (
	MouseVerticalWheel MouseWheel = C.MouseVerticalWheel
	MouseHorizontalWheel MouseWheel = C.MouseHorizontalWheel
)

type MouseWheelEvent struct {
	ptr unsafe.Pointer
}

func (mouseWheelEvent *MouseWheelEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseWheelEvent)(mouseWheelEvent.ptr)
}

type MouseWheelScrollEvent struct {
	ptr unsafe.Pointer
}

func (mouseWheelScrollEvent *MouseWheelScrollEvent) CPtr() unsafe.Pointer {
	return (*C.sfMouseWheelScrollEvent)(mouseWheelScrollEvent.ptr)
}

type Mutex struct {
	ptr unsafe.Pointer
}

func (mutex *Mutex) CPtr() unsafe.Pointer {
	return (*C.sfMutex)(mutex.ptr)
}

type PrimitiveType int32

const (
	Points PrimitiveType = C.Points
	Lines PrimitiveType = C.Lines
	LineStrip PrimitiveType = C.LineStrip
	Triangles PrimitiveType = C.Triangles
	TriangleStrip PrimitiveType = C.TriangleStrip
	TriangleFan PrimitiveType = C.TriangleFan
	Quads PrimitiveType = C.Quads
	LinesStrip PrimitiveType = C.LinesStrip
	TrianglesStrip PrimitiveType = C.TrianglesStrip
	TrianglesFan PrimitiveType = C.TrianglesFan
)

type RectangleShape struct {
	ptr unsafe.Pointer
}

func (rectangleShape *RectangleShape) CPtr() unsafe.Pointer {
	return (*C.sfRectangleShape)(rectangleShape.ptr)
}

type RenderStates struct {
	BlendMode BlendMode
	Transform Transform
	Texture Texture
	Shader Shader
}

func (r RenderStates) ToC() C.sfRenderStates {
	return C.sfRenderStates{ blendMode: r.BlendMode, transform: r.Transform, texture: r.Texture, shader: r.Shader }
}

type RenderTexture struct {
	ptr unsafe.Pointer
}

func (renderTexture *RenderTexture) CPtr() unsafe.Pointer {
	return (*C.sfRenderTexture)(renderTexture.ptr)
}

type RenderWindow struct {
	ptr unsafe.Pointer
}

func (renderWindow *RenderWindow) CPtr() unsafe.Pointer {
	return (*C.sfRenderWindow)(renderWindow.ptr)
}

type Scancode int32

const (
	ScanUnknown Scancode = C.ScanUnknown
	ScanA Scancode = C.ScanA
	ScanB Scancode = C.ScanB
	ScanC Scancode = C.ScanC
	ScanD Scancode = C.ScanD
	ScanE Scancode = C.ScanE
	ScanF Scancode = C.ScanF
	ScanG Scancode = C.ScanG
	ScanH Scancode = C.ScanH
	ScanI Scancode = C.ScanI
	ScanJ Scancode = C.ScanJ
	ScanK Scancode = C.ScanK
	ScanL Scancode = C.ScanL
	ScanM Scancode = C.ScanM
	ScanN Scancode = C.ScanN
	ScanO Scancode = C.ScanO
	ScanP Scancode = C.ScanP
	ScanQ Scancode = C.ScanQ
	ScanR Scancode = C.ScanR
	ScanS Scancode = C.ScanS
	ScanT Scancode = C.ScanT
	ScanU Scancode = C.ScanU
	ScanV Scancode = C.ScanV
	ScanW Scancode = C.ScanW
	ScanX Scancode = C.ScanX
	ScanY Scancode = C.ScanY
	ScanZ Scancode = C.ScanZ
	ScanNum1 Scancode = C.ScanNum1
	ScanNum2 Scancode = C.ScanNum2
	ScanNum3 Scancode = C.ScanNum3
	ScanNum4 Scancode = C.ScanNum4
	ScanNum5 Scancode = C.ScanNum5
	ScanNum6 Scancode = C.ScanNum6
	ScanNum7 Scancode = C.ScanNum7
	ScanNum8 Scancode = C.ScanNum8
	ScanNum9 Scancode = C.ScanNum9
	ScanNum0 Scancode = C.ScanNum0
	ScanEnter Scancode = C.ScanEnter
	ScanEscape Scancode = C.ScanEscape
	ScanBackspace Scancode = C.ScanBackspace
	ScanTab Scancode = C.ScanTab
	ScanSpace Scancode = C.ScanSpace
	ScanHyphen Scancode = C.ScanHyphen
	ScanEqual Scancode = C.ScanEqual
	ScanLbRacket Scancode = C.ScanLbRacket
	ScanRbRacket Scancode = C.ScanRbRacket
	ScanBackslash Scancode = C.ScanBackslash
	ScanSemicolon Scancode = C.ScanSemicolon
	ScanApostrophe Scancode = C.ScanApostrophe
	ScanGrave Scancode = C.ScanGrave
	ScanComma Scancode = C.ScanComma
	ScanPeriod Scancode = C.ScanPeriod
	ScanSlash Scancode = C.ScanSlash
	ScanF1 Scancode = C.ScanF1
	ScanF2 Scancode = C.ScanF2
	ScanF3 Scancode = C.ScanF3
	ScanF4 Scancode = C.ScanF4
	ScanF5 Scancode = C.ScanF5
	ScanF6 Scancode = C.ScanF6
	ScanF7 Scancode = C.ScanF7
	ScanF8 Scancode = C.ScanF8
	ScanF9 Scancode = C.ScanF9
	ScanF10 Scancode = C.ScanF10
	ScanF11 Scancode = C.ScanF11
	ScanF12 Scancode = C.ScanF12
	ScanF13 Scancode = C.ScanF13
	ScanF14 Scancode = C.ScanF14
	ScanF15 Scancode = C.ScanF15
	ScanF16 Scancode = C.ScanF16
	ScanF17 Scancode = C.ScanF17
	ScanF18 Scancode = C.ScanF18
	ScanF19 Scancode = C.ScanF19
	ScanF20 Scancode = C.ScanF20
	ScanF21 Scancode = C.ScanF21
	ScanF22 Scancode = C.ScanF22
	ScanF23 Scancode = C.ScanF23
	ScanF24 Scancode = C.ScanF24
	ScanCapsLock Scancode = C.ScanCapsLock
	ScanPrintScreen Scancode = C.ScanPrintScreen
	ScanScrollLock Scancode = C.ScanScrollLock
	ScanPause Scancode = C.ScanPause
	ScanInsert Scancode = C.ScanInsert
	ScanHome Scancode = C.ScanHome
	ScanPageUp Scancode = C.ScanPageUp
	ScanDelete Scancode = C.ScanDelete
	ScanEnd Scancode = C.ScanEnd
	ScanPageDown Scancode = C.ScanPageDown
	ScanRight Scancode = C.ScanRight
	ScanLeft Scancode = C.ScanLeft
	ScanDown Scancode = C.ScanDown
	ScanUp Scancode = C.ScanUp
	ScanNumLock Scancode = C.ScanNumLock
	ScanNumpadDivide Scancode = C.ScanNumpadDivide
	ScanNumpadMultiply Scancode = C.ScanNumpadMultiply
	ScanNumpadMinus Scancode = C.ScanNumpadMinus
	ScanNumpadPlus Scancode = C.ScanNumpadPlus
	ScanNumpadEqual Scancode = C.ScanNumpadEqual
	ScanNumpadEnter Scancode = C.ScanNumpadEnter
	ScanNumpadDecimal Scancode = C.ScanNumpadDecimal
	ScanNumpad1 Scancode = C.ScanNumpad1
	ScanNumpad2 Scancode = C.ScanNumpad2
	ScanNumpad3 Scancode = C.ScanNumpad3
	ScanNumpad4 Scancode = C.ScanNumpad4
	ScanNumpad5 Scancode = C.ScanNumpad5
	ScanNumpad6 Scancode = C.ScanNumpad6
	ScanNumpad7 Scancode = C.ScanNumpad7
	ScanNumpad8 Scancode = C.ScanNumpad8
	ScanNumpad9 Scancode = C.ScanNumpad9
	ScanNumpad0 Scancode = C.ScanNumpad0
	ScanNonUsBackslash Scancode = C.ScanNonUsBackslash
	ScanApplication Scancode = C.ScanApplication
	ScanExecute Scancode = C.ScanExecute
	ScanModeChange Scancode = C.ScanModeChange
	ScanHelp Scancode = C.ScanHelp
	ScanMenu Scancode = C.ScanMenu
	ScanSelect Scancode = C.ScanSelect
	ScanRedo Scancode = C.ScanRedo
	ScanUndo Scancode = C.ScanUndo
	ScanCut Scancode = C.ScanCut
	ScanCopy Scancode = C.ScanCopy
	ScanPaste Scancode = C.ScanPaste
	ScanVolumeMute Scancode = C.ScanVolumeMute
	ScanVolumeUp Scancode = C.ScanVolumeUp
	ScanVolumeDown Scancode = C.ScanVolumeDown
	ScanMediaPlayPause Scancode = C.ScanMediaPlayPause
	ScanMediaStop Scancode = C.ScanMediaStop
	ScanMediaNextTrack Scancode = C.ScanMediaNextTrack
	ScanMediaPreviousTrack Scancode = C.ScanMediaPreviousTrack
	ScanLcOntrol Scancode = C.ScanLcOntrol
	ScanLsHift Scancode = C.ScanLsHift
	ScanLaLt Scancode = C.ScanLaLt
	ScanLsYstem Scancode = C.ScanLsYstem
	ScanRcOntrol Scancode = C.ScanRcOntrol
	ScanRsHift Scancode = C.ScanRsHift
	ScanRaLt Scancode = C.ScanRaLt
	ScanRsYstem Scancode = C.ScanRsYstem
	ScanBack Scancode = C.ScanBack
	ScanForward Scancode = C.ScanForward
	ScanRefresh Scancode = C.ScanRefresh
	ScanStop Scancode = C.ScanStop
	ScanSearch Scancode = C.ScanSearch
	ScanFavorites Scancode = C.ScanFavorites
	ScanHomePage Scancode = C.ScanHomePage
	ScanLaunchApplication1 Scancode = C.ScanLaunchApplication1
	ScanLaunchApplication2 Scancode = C.ScanLaunchApplication2
	ScanLaunchMail Scancode = C.ScanLaunchMail
	ScanLaunchMediaSelect Scancode = C.ScanLaunchMediaSelect
	ScancodeCount Scancode = C.ScancodeCount
)

type SensorEvent struct {
	ptr unsafe.Pointer
}

func (sensorEvent *SensorEvent) CPtr() unsafe.Pointer {
	return (*C.sfSensorEvent)(sensorEvent.ptr)
}

type SensorType int32

const (
	SensorAccelerometer SensorType = C.SensorAccelerometer
	SensorGyroscope SensorType = C.SensorGyroscope
	SensorMagnetometer SensorType = C.SensorMagnetometer
	SensorGravity SensorType = C.SensorGravity
	SensorUserAcceleration SensorType = C.SensorUserAcceleration
	SensorOrientation SensorType = C.SensorOrientation
	SensorCount SensorType = C.SensorCount
)

type Shader struct {
	ptr unsafe.Pointer
}

func (shader *Shader) CPtr() unsafe.Pointer {
	return (*C.sfShader)(shader.ptr)
}

type Shape struct {
	ptr unsafe.Pointer
}

func (shape *Shape) CPtr() unsafe.Pointer {
	return (*C.sfShape)(shape.ptr)
}

type SizeEvent struct {
	ptr unsafe.Pointer
}

func (sizeEvent *SizeEvent) CPtr() unsafe.Pointer {
	return (*C.sfSizeEvent)(sizeEvent.ptr)
}

type Sprite struct {
	ptr unsafe.Pointer
}

func (sprite *Sprite) CPtr() unsafe.Pointer {
	return (*C.sfSprite)(sprite.ptr)
}

type Text struct {
	ptr unsafe.Pointer
}

func (text *Text) CPtr() unsafe.Pointer {
	return (*C.sfText)(text.ptr)
}

type TextEvent struct {
	ptr unsafe.Pointer
}

func (textEvent *TextEvent) CPtr() unsafe.Pointer {
	return (*C.sfTextEvent)(textEvent.ptr)
}

type TextStyle int32

const (
	TextRegular TextStyle = C.TextRegular
	TextBold TextStyle = C.TextBold
	TextItalic TextStyle = C.TextItalic
	TextUnderlined TextStyle = C.TextUnderlined
	TextStrikeThrough TextStyle = C.TextStrikeThrough
)

type Texture struct {
	ptr unsafe.Pointer
}

func (texture *Texture) CPtr() unsafe.Pointer {
	return (*C.sfTexture)(texture.ptr)
}

type TextureCoordinateType int32

const (
	TextureNormalized TextureCoordinateType = C.TextureNormalized
	TexturePixels TextureCoordinateType = C.TexturePixels
)

type Thread struct {
	ptr unsafe.Pointer
}

func (thread *Thread) CPtr() unsafe.Pointer {
	return (*C.sfThread)(thread.ptr)
}

type Time struct {
	Microseconds int64
}

func (t Time) ToC() C.sfTime {
	return C.sfTime{ microseconds: t.Microseconds }
}

type TouchEvent struct {
	ptr unsafe.Pointer
}

func (touchEvent *TouchEvent) CPtr() unsafe.Pointer {
	return (*C.sfTouchEvent)(touchEvent.ptr)
}

type Transform struct {
	ptr unsafe.Pointer
}

func (transform *Transform) CPtr() unsafe.Pointer {
	return (*C.sfTransform)(transform.ptr)
}

type Transformable struct {
	ptr unsafe.Pointer
}

func (transformable *Transformable) CPtr() unsafe.Pointer {
	return (*C.sfTransformable)(transformable.ptr)
}

type Vector2f struct {
	X float32
	Y float32
}

func (v Vector2f) ToC() C.sfVector2f {
	return C.sfVector2f{ x: v.X, y: v.Y }
}

type Vector2i struct {
	X int32
	Y int32
}

func (v Vector2i) ToC() C.sfVector2i {
	return C.sfVector2i{ x: v.X, y: v.Y }
}

type Vector2u struct {
	X uint32
	Y uint32
}

func (v Vector2u) ToC() C.sfVector2u {
	return C.sfVector2u{ x: v.X, y: v.Y }
}

type Vector3f struct {
	X float32
	Y float32
	Z float32
}

func (v Vector3f) ToC() C.sfVector3f {
	return C.sfVector3f{ x: v.X, y: v.Y, z: v.Z }
}

type Vertex struct {
	ptr unsafe.Pointer
}

func (vertex *Vertex) CPtr() unsafe.Pointer {
	return (*C.sfVertex)(vertex.ptr)
}

type VertexArray struct {
	ptr unsafe.Pointer
}

func (vertexArray *VertexArray) CPtr() unsafe.Pointer {
	return (*C.sfVertexArray)(vertexArray.ptr)
}

type VertexBuffer struct {
	ptr unsafe.Pointer
}

func (vertexBuffer *VertexBuffer) CPtr() unsafe.Pointer {
	return (*C.sfVertexBuffer)(vertexBuffer.ptr)
}

type VertexBufferUsage int32

const (
	VertexBufferStream VertexBufferUsage = C.VertexBufferStream
	VertexBufferDynamic VertexBufferUsage = C.VertexBufferDynamic
	VertexBufferStatic VertexBufferUsage = C.VertexBufferStatic
)

type VideoMode struct {
	Width uint32
	Height uint32
	BitsPerPixel uint32
}

func (v VideoMode) ToC() C.sfVideoMode {
	return C.sfVideoMode{ width: v.Width, height: v.Height, bitsPerPixel: v.BitsPerPixel }
}

type View struct {
	ptr unsafe.Pointer
}

func (view *View) CPtr() unsafe.Pointer {
	return (*C.sfView)(view.ptr)
}

type Window struct {
	ptr unsafe.Pointer
}

func (window *Window) CPtr() unsafe.Pointer {
	return (*C.sfWindow)(window.ptr)
}

type WindowBase struct {
	ptr unsafe.Pointer
}

func (windowBase *WindowBase) CPtr() unsafe.Pointer {
	return (*C.sfWindowBase)(windowBase.ptr)
}

type WindowStyle int32

const (
	None WindowStyle = C.None
	Titlebar WindowStyle = C.Titlebar
	Resize WindowStyle = C.Resize
	Close WindowStyle = C.Close
	Fullscreen WindowStyle = C.Fullscreen
	DefaultStyle WindowStyle = C.DefaultStyle
)

