// Code generated by go-sfml. DO NOT EDIT.

package sfml

import (
	"C"
	"unsafe"
)

func BufferCreate() *Buffer {
	cval := unsafe.Pointer(C.sfBuffer_create())
	return &Buffer{ptr: cval}
}

func (b *Buffer) Destroy() {
	C.sfBuffer_destroy(b.CPtr())
	return
}

func (b *Buffer) GetData() int32 {
	return C.sfBuffer_getData(b.CPtr())
}

func (b *Buffer) GetSize() int32 {
	return C.sfBuffer_getSize(b.CPtr())
}

func (c *CircleShape) Copy() *CircleShape {
	cval := unsafe.Pointer(C.sfCircleShape_copy(c.CPtr()))
	return &CircleShape{ptr: cval}
}

func CircleShapeCreate() *CircleShape {
	cval := unsafe.Pointer(C.sfCircleShape_create())
	return &CircleShape{ptr: cval}
}

func (c *CircleShape) Destroy() {
	C.sfCircleShape_destroy(c.CPtr())
	return
}

func (c *CircleShape) GetFillColor() Color {
	cval := C.sfCircleShape_getFillColor(c.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c *CircleShape) GetGlobalBounds() FloatRect {
	cval := C.sfCircleShape_getGlobalBounds(c.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (c *CircleShape) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfCircleShape_getInverseTransform(c.CPtr()))
	return &Transform{ptr: cval}
}

func (c *CircleShape) GetLocalBounds() FloatRect {
	cval := C.sfCircleShape_getLocalBounds(c.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (c *CircleShape) GetOrigin() Vector2f {
	cval := C.sfCircleShape_getOrigin(c.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *CircleShape) GetOutlineColor() Color {
	cval := C.sfCircleShape_getOutlineColor(c.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c *CircleShape) GetOutlineThickness() float32 {
	return C.sfCircleShape_getOutlineThickness(c.CPtr())
}

func (c *CircleShape) GetPoint(index int32) Vector2f {
	cval := C.sfCircleShape_getPoint(c.CPtr(), index)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *CircleShape) GetPointCount() int32 {
	return C.sfCircleShape_getPointCount(c.CPtr())
}

func (c *CircleShape) GetPosition() Vector2f {
	cval := C.sfCircleShape_getPosition(c.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *CircleShape) GetRadius() float32 {
	return C.sfCircleShape_getRadius(c.CPtr())
}

func (c *CircleShape) GetRotation() float32 {
	return C.sfCircleShape_getRotation(c.CPtr())
}

func (c *CircleShape) GetScale() Vector2f {
	cval := C.sfCircleShape_getScale(c.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *CircleShape) GetTexture() *Texture {
	cval := unsafe.Pointer(C.sfCircleShape_getTexture(c.CPtr()))
	return &Texture{ptr: cval}
}

func (c *CircleShape) GetTextureRect() IntRect {
	cval := C.sfCircleShape_getTextureRect(c.CPtr())
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (c *CircleShape) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfCircleShape_getTransform(c.CPtr()))
	return &Transform{ptr: cval}
}

func (c *CircleShape) Move(offset Vector2f) {
	C.sfCircleShape_move(c.CPtr(), offset.ToC())
	return
}

func (c *CircleShape) Rotate(angle int32) {
	C.sfCircleShape_rotate(c.CPtr(), angle)
	return
}

func (c *CircleShape) Scale(factors Vector2f) {
	C.sfCircleShape_scale(c.CPtr(), factors.ToC())
	return
}

func (c *CircleShape) SetFillColor(color Color) {
	C.sfCircleShape_setFillColor(c.CPtr(), color.ToC())
	return
}

func (c *CircleShape) SetOrigin(origin Vector2f) {
	C.sfCircleShape_setOrigin(c.CPtr(), origin.ToC())
	return
}

func (c *CircleShape) SetOutlineColor(color Color) {
	C.sfCircleShape_setOutlineColor(c.CPtr(), color.ToC())
	return
}

func (c *CircleShape) SetOutlineThickness(thickness int32) {
	C.sfCircleShape_setOutlineThickness(c.CPtr(), thickness)
	return
}

func (c *CircleShape) SetPointCount(count int32) {
	C.sfCircleShape_setPointCount(c.CPtr(), count)
	return
}

func (c *CircleShape) SetPosition(position Vector2f) {
	C.sfCircleShape_setPosition(c.CPtr(), position.ToC())
	return
}

func (c *CircleShape) SetRadius(radius int32) {
	C.sfCircleShape_setRadius(c.CPtr(), radius)
	return
}

func (c *CircleShape) SetRotation(angle int32) {
	C.sfCircleShape_setRotation(c.CPtr(), angle)
	return
}

func (c *CircleShape) SetScale(scale Vector2f) {
	C.sfCircleShape_setScale(c.CPtr(), scale.ToC())
	return
}

func (c *CircleShape) SetTexture(texture *Texture, resetRect int32) {
	C.sfCircleShape_setTexture(c.CPtr(), texture, resetRect)
	return
}

func (c *CircleShape) SetTextureRect(rect IntRect) {
	C.sfCircleShape_setTextureRect(c.CPtr(), rect.ToC())
	return
}

func ClipboardGetString() int32 {
	return C.sfClipboard_getString()
}

func ClipboardGetUnicodeString() int32 {
	return C.sfClipboard_getUnicodeString()
}

func ClipboardSetString(text string) {
	C.sfClipboard_setString(C.CString(text))
	return
}

func ClipboardSetUnicodeString(text uint32) {
	C.sfClipboard_setUnicodeString(text)
	return
}

func (c *Clock) Copy() *Clock {
	cval := unsafe.Pointer(C.sfClock_copy(c.CPtr()))
	return &Clock{ptr: cval}
}

func ClockCreate() *Clock {
	cval := unsafe.Pointer(C.sfClock_create())
	return &Clock{ptr: cval}
}

func (c *Clock) Destroy() {
	C.sfClock_destroy(c.CPtr())
	return
}

func (c *Clock) GetElapsedTime() Time {
	cval := C.sfClock_getElapsedTime(c.CPtr())
	return Time{Microseconds: (cval.microseconds)}
}

func (c *Clock) Restart() Time {
	cval := C.sfClock_restart(c.CPtr())
	return Time{Microseconds: (cval.microseconds)}
}

func (c Color) Add(color2 Color) Color {
	cval := C.sfColor_add(c, color2.ToC())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func ColorFromInteger(color uint32) Color {
	cval := C.sfColor_fromInteger(color)
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func ColorFromRgb(red uint8, green uint8, blue uint8) Color {
	cval := C.sfColor_fromRGB(red, green, blue)
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func ColorFromRgba(red uint8, green uint8, blue uint8, alpha uint8) Color {
	cval := C.sfColor_fromRGBA(red, green, blue, alpha)
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c Color) Modulate(color2 Color) Color {
	cval := C.sfColor_modulate(c, color2.ToC())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c Color) Subtract(color2 Color) Color {
	cval := C.sfColor_subtract(c, color2.ToC())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c Color) ToInteger() int32 {
	return C.sfColor_toInteger(c)
}

func ContextCreate() *Context {
	cval := unsafe.Pointer(C.sfContext_create())
	return &Context{ptr: cval}
}

func (c *Context) Destroy() {
	C.sfContext_destroy(c.CPtr())
	return
}

func ContextGetActiveContextId() int32 {
	return C.sfContext_getActiveContextId()
}

func ContextGetFunction(name string) int32 {
	return C.sfContext_getFunction(C.CString(name))
}

func (c *Context) GetSettings() ContextSettings {
	cval := C.sfContext_getSettings(c.CPtr())
	return ContextSettings{DepthBits: (cval.depthbits), StencilBits: (cval.stencilbits), AntialiasingLevel: (cval.antialiasinglevel), MajorVersion: (cval.majorversion), MinorVersion: (cval.minorversion), AttributeFlags: (cval.attributeflags), SRgbCapable: (cval.srgbcapable)}
}

func ContextIsExtensionAvailable(name string) bool {
	return C.sfContext_isExtensionAvailable(C.CString(name))
}

func (c *Context) SetActive(active int32) bool {
	return C.sfContext_setActive(c.CPtr(), active)
}

func (c *ConvexShape) Copy() *ConvexShape {
	cval := unsafe.Pointer(C.sfConvexShape_copy(c.CPtr()))
	return &ConvexShape{ptr: cval}
}

func ConvexShapeCreate() *ConvexShape {
	cval := unsafe.Pointer(C.sfConvexShape_create())
	return &ConvexShape{ptr: cval}
}

func (c *ConvexShape) Destroy() {
	C.sfConvexShape_destroy(c.CPtr())
	return
}

func (c *ConvexShape) GetFillColor() Color {
	cval := C.sfConvexShape_getFillColor(c.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c *ConvexShape) GetGlobalBounds() FloatRect {
	cval := C.sfConvexShape_getGlobalBounds(c.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (c *ConvexShape) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfConvexShape_getInverseTransform(c.CPtr()))
	return &Transform{ptr: cval}
}

func (c *ConvexShape) GetLocalBounds() FloatRect {
	cval := C.sfConvexShape_getLocalBounds(c.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (c *ConvexShape) GetOrigin() Vector2f {
	cval := C.sfConvexShape_getOrigin(c.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *ConvexShape) GetOutlineColor() Color {
	cval := C.sfConvexShape_getOutlineColor(c.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (c *ConvexShape) GetOutlineThickness() float32 {
	return C.sfConvexShape_getOutlineThickness(c.CPtr())
}

func (c *ConvexShape) GetPoint(index int32) Vector2f {
	cval := C.sfConvexShape_getPoint(c.CPtr(), index)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *ConvexShape) GetPointCount() int32 {
	return C.sfConvexShape_getPointCount(c.CPtr())
}

func (c *ConvexShape) GetPosition() Vector2f {
	cval := C.sfConvexShape_getPosition(c.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *ConvexShape) GetRotation() float32 {
	return C.sfConvexShape_getRotation(c.CPtr())
}

func (c *ConvexShape) GetScale() Vector2f {
	cval := C.sfConvexShape_getScale(c.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (c *ConvexShape) GetTexture() *Texture {
	cval := unsafe.Pointer(C.sfConvexShape_getTexture(c.CPtr()))
	return &Texture{ptr: cval}
}

func (c *ConvexShape) GetTextureRect() IntRect {
	cval := C.sfConvexShape_getTextureRect(c.CPtr())
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (c *ConvexShape) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfConvexShape_getTransform(c.CPtr()))
	return &Transform{ptr: cval}
}

func (c *ConvexShape) Move(offset Vector2f) {
	C.sfConvexShape_move(c.CPtr(), offset.ToC())
	return
}

func (c *ConvexShape) Rotate(angle int32) {
	C.sfConvexShape_rotate(c.CPtr(), angle)
	return
}

func (c *ConvexShape) Scale(factors Vector2f) {
	C.sfConvexShape_scale(c.CPtr(), factors.ToC())
	return
}

func (c *ConvexShape) SetFillColor(color Color) {
	C.sfConvexShape_setFillColor(c.CPtr(), color.ToC())
	return
}

func (c *ConvexShape) SetOrigin(origin Vector2f) {
	C.sfConvexShape_setOrigin(c.CPtr(), origin.ToC())
	return
}

func (c *ConvexShape) SetOutlineColor(color Color) {
	C.sfConvexShape_setOutlineColor(c.CPtr(), color.ToC())
	return
}

func (c *ConvexShape) SetOutlineThickness(thickness int32) {
	C.sfConvexShape_setOutlineThickness(c.CPtr(), thickness)
	return
}

func (c *ConvexShape) SetPoint(index int32, point Vector2f) {
	C.sfConvexShape_setPoint(c.CPtr(), index, point.ToC())
	return
}

func (c *ConvexShape) SetPointCount(count int32) {
	C.sfConvexShape_setPointCount(c.CPtr(), count)
	return
}

func (c *ConvexShape) SetPosition(position Vector2f) {
	C.sfConvexShape_setPosition(c.CPtr(), position.ToC())
	return
}

func (c *ConvexShape) SetRotation(angle int32) {
	C.sfConvexShape_setRotation(c.CPtr(), angle)
	return
}

func (c *ConvexShape) SetScale(scale Vector2f) {
	C.sfConvexShape_setScale(c.CPtr(), scale.ToC())
	return
}

func (c *ConvexShape) SetTexture(texture *Texture, resetRect int32) {
	C.sfConvexShape_setTexture(c.CPtr(), texture, resetRect)
	return
}

func (c *ConvexShape) SetTextureRect(rect IntRect) {
	C.sfConvexShape_setTextureRect(c.CPtr(), rect.ToC())
	return
}

func CursorCreateFromPixels(pixels uint8, size Vector2u, hotspot Vector2u) *Cursor {
	cval := unsafe.Pointer(C.sfCursor_createFromPixels(pixels, size.ToC(), hotspot.ToC()))
	return &Cursor{ptr: cval}
}

func CursorCreateFromSystem(cursorType CursorType) *Cursor {
	cval := unsafe.Pointer(C.sfCursor_createFromSystem(cursorType))
	return &Cursor{ptr: cval}
}

func (c *Cursor) Destroy() {
	C.sfCursor_destroy(c.CPtr())
	return
}

func (f *FloatRect) Contains(x int32, y int32) bool {
	return C.sfFloatRect_contains(f.CPtr(), x, y)
}

func (f *FloatRect) GetPosition() Vector2f {
	cval := C.sfFloatRect_getPosition(f.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (f *FloatRect) GetSize() Vector2f {
	cval := C.sfFloatRect_getSize(f.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (f *FloatRect) Intersects(rect2 *FloatRect, intersection *FloatRect) bool {
	return C.sfFloatRect_intersects(f.CPtr(), rect2, intersection)
}

func (f *Font) Copy() *Font {
	cval := unsafe.Pointer(C.sfFont_copy(f.CPtr()))
	return &Font{ptr: cval}
}

func FontCreateFromFile(filename string) *Font {
	cval := unsafe.Pointer(C.sfFont_createFromFile(C.CString(filename)))
	return &Font{ptr: cval}
}

func FontCreateFromMemory(data int32, sizeInBytes int32) *Font {
	cval := unsafe.Pointer(C.sfFont_createFromMemory(data, sizeInBytes))
	return &Font{ptr: cval}
}

func FontCreateFromStream(stream *InputStream) *Font {
	cval := unsafe.Pointer(C.sfFont_createFromStream(stream))
	return &Font{ptr: cval}
}

func (f *Font) Destroy() {
	C.sfFont_destroy(f.CPtr())
	return
}

func (f *Font) GetBoldKerning(first int32, second int32, characterSize int32) float32 {
	return C.sfFont_getBoldKerning(f.CPtr(), first, second, characterSize)
}

func (f *Font) GetGlyph(codePoint int32, characterSize int32, bold int32, outlineThickness int32) Glyph {
	cval := unsafe.Pointer(C.sfFont_getGlyph(f.CPtr(), codePoint, characterSize, bold, outlineThickness))
	return &Glyph{ptr: cval}
}

func (f *Font) GetInfo() FontInfo {
	cval := unsafe.Pointer(C.sfFont_getInfo(f.CPtr()))
	return &FontInfo{ptr: cval}
}

func (f *Font) GetKerning(first int32, second int32, characterSize int32) float32 {
	return C.sfFont_getKerning(f.CPtr(), first, second, characterSize)
}

func (f *Font) GetLineSpacing(characterSize int32) float32 {
	return C.sfFont_getLineSpacing(f.CPtr(), characterSize)
}

func (f *Font) GetTexture(characterSize int32) *Texture {
	cval := unsafe.Pointer(C.sfFont_getTexture(f.CPtr(), characterSize))
	return &Texture{ptr: cval}
}

func (f *Font) GetUnderlinePosition(characterSize int32) float32 {
	return C.sfFont_getUnderlinePosition(f.CPtr(), characterSize)
}

func (f *Font) GetUnderlineThickness(characterSize int32) float32 {
	return C.sfFont_getUnderlineThickness(f.CPtr(), characterSize)
}

func (f *Font) HasGlyph(codePoint int32) bool {
	return C.sfFont_hasGlyph(f.CPtr(), codePoint)
}

func (f *Font) IsSmooth() bool {
	return C.sfFont_isSmooth(f.CPtr())
}

func (f *Font) SetSmooth(smooth int32) {
	C.sfFont_setSmooth(f.CPtr(), smooth)
	return
}

func (i *Image) Copy() *Image {
	cval := unsafe.Pointer(C.sfImage_copy(i.CPtr()))
	return &Image{ptr: cval}
}

func (i *Image) CopyImage(source *Image, destX int32, destY int32, sourceRect IntRect, applyAlpha int32) {
	C.sfImage_copyImage(i.CPtr(), source, destX, destY, sourceRect.ToC(), applyAlpha)
	return
}

func ImageCreate(width uint32, height uint32) *Image {
	cval := unsafe.Pointer(C.sfImage_create(width, height))
	return &Image{ptr: cval}
}

func ImageCreateFromColor(width uint32, height uint32, color Color) *Image {
	cval := unsafe.Pointer(C.sfImage_createFromColor(width, height, color.ToC()))
	return &Image{ptr: cval}
}

func ImageCreateFromFile(filename string) *Image {
	cval := unsafe.Pointer(C.sfImage_createFromFile(C.CString(filename)))
	return &Image{ptr: cval}
}

func ImageCreateFromMemory(data int32, size int32) *Image {
	cval := unsafe.Pointer(C.sfImage_createFromMemory(data, size))
	return &Image{ptr: cval}
}

func ImageCreateFromPixels(width uint32, height uint32, pixels uint8) *Image {
	cval := unsafe.Pointer(C.sfImage_createFromPixels(width, height, pixels))
	return &Image{ptr: cval}
}

func ImageCreateFromStream(stream *InputStream) *Image {
	cval := unsafe.Pointer(C.sfImage_createFromStream(stream))
	return &Image{ptr: cval}
}

func (i *Image) CreateMaskFromColor(color Color, alpha int32) {
	C.sfImage_createMaskFromColor(i.CPtr(), color.ToC(), alpha)
	return
}

func (i *Image) Destroy() {
	C.sfImage_destroy(i.CPtr())
	return
}

func (i *Image) FlipHorizontally() {
	C.sfImage_flipHorizontally(i.CPtr())
	return
}

func (i *Image) FlipVertically() {
	C.sfImage_flipVertically(i.CPtr())
	return
}

func (i *Image) GetPixel(x int32, y int32) Color {
	cval := C.sfImage_getPixel(i.CPtr(), x, y)
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (i *Image) GetPixelsPtr() int32 {
	return C.sfImage_getPixelsPtr(i.CPtr())
}

func (i *Image) GetSize() Vector2u {
	cval := C.sfImage_getSize(i.CPtr())
	return Vector2u{X: uint32(cval.x), Y: uint32(cval.y)}
}

func (i *Image) SaveToFile(filename int32) bool {
	return C.sfImage_saveToFile(i.CPtr(), C.CString(filename))
}

func (i *Image) SaveToMemory(output *Buffer, format int32) bool {
	return C.sfImage_saveToMemory(i.CPtr(), output, C.CString(format))
}

func (i *Image) SetPixel(x int32, y int32, color Color) {
	C.sfImage_setPixel(i.CPtr(), x, y, color.ToC())
	return
}

func (i *IntRect) Contains(x int32, y int32) bool {
	return C.sfIntRect_contains(i.CPtr(), x, y)
}

func (i *IntRect) GetPosition() Vector2i {
	cval := C.sfIntRect_getPosition(i.CPtr())
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (i *IntRect) GetSize() Vector2i {
	cval := C.sfIntRect_getSize(i.CPtr())
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (i *IntRect) Intersects(rect2 *IntRect, intersection *IntRect) bool {
	return C.sfIntRect_intersects(i.CPtr(), rect2, intersection)
}

func JoystickGetAxisPosition(joystick uint32, axis JoystickAxis) float32 {
	return C.sfJoystick_getAxisPosition(joystick, axis)
}

func JoystickGetButtonCount(joystick uint32) uint32 {
	return C.sfJoystick_getButtonCount(joystick)
}

func JoystickGetIdentification(joystick uint32) JoystickIdentification {
	cval := unsafe.Pointer(C.sfJoystick_getIdentification(joystick))
	return &JoystickIdentification{ptr: cval}
}

func JoystickHasAxis(joystick uint32, axis JoystickAxis) bool {
	return C.sfJoystick_hasAxis(joystick, axis)
}

func JoystickIsButtonPressed(joystick uint32, button uint32) bool {
	return C.sfJoystick_isButtonPressed(joystick, button)
}

func JoystickIsConnected(joystick uint32) bool {
	return C.sfJoystick_isConnected(joystick)
}

func JoystickUpdate() {
	C.sfJoystick_update()
	return
}

func KeyboardDelocalize(key KeyCode) Scancode {
	cval := unsafe.Pointer(C.sfKeyboard_delocalize(key))
	return &Scancode{ptr: cval}
}

func KeyboardGetDescription(code Scancode) int32 {
	return C.sfKeyboard_getDescription(code)
}

func KeyboardIsKeyPressed(key KeyCode) bool {
	return C.sfKeyboard_isKeyPressed(key)
}

func KeyboardIsScancodePressed(code Scancode) bool {
	return C.sfKeyboard_isScancodePressed(code)
}

func KeyboardLocalize(code Scancode) KeyCode {
	cval := unsafe.Pointer(C.sfKeyboard_localize(code))
	return &KeyCode{ptr: cval}
}

func KeyboardSetVirtualKeyboardVisible(visible bool) {
	C.sfKeyboard_setVirtualKeyboardVisible(visible)
	return
}

func MouseGetPosition(relativeTo *Window) Vector2i {
	cval := C.sfMouse_getPosition(relativeTo)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func MouseGetPositionRenderWindow(relativeTo *RenderWindow) Vector2i {
	cval := C.sfMouse_getPositionRenderWindow(relativeTo)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func MouseGetPositionWindowBase(relativeTo *WindowBase) Vector2i {
	cval := C.sfMouse_getPositionWindowBase(relativeTo)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func MouseIsButtonPressed(button MouseButton) bool {
	return C.sfMouse_isButtonPressed(button)
}

func MouseSetPosition(position Vector2i, relativeTo *Window) {
	C.sfMouse_setPosition(position.ToC(), relativeTo)
	return
}

func MouseSetPositionRenderWindow(position Vector2i, relativeTo *RenderWindow) {
	C.sfMouse_setPositionRenderWindow(position.ToC(), relativeTo)
	return
}

func MouseSetPositionWindowBase(position Vector2i, relativeTo *WindowBase) {
	C.sfMouse_setPositionWindowBase(position.ToC(), relativeTo)
	return
}

func MutexCreate() *Mutex {
	cval := unsafe.Pointer(C.sfMutex_create())
	return &Mutex{ptr: cval}
}

func (m *Mutex) Destroy() {
	C.sfMutex_destroy(m.CPtr())
	return
}

func (m *Mutex) Lock() {
	C.sfMutex_lock(m.CPtr())
	return
}

func (m *Mutex) Unlock() {
	C.sfMutex_unlock(m.CPtr())
	return
}

func (r *RectangleShape) Copy() *RectangleShape {
	cval := unsafe.Pointer(C.sfRectangleShape_copy(r.CPtr()))
	return &RectangleShape{ptr: cval}
}

func RectangleShapeCreate() *RectangleShape {
	cval := unsafe.Pointer(C.sfRectangleShape_create())
	return &RectangleShape{ptr: cval}
}

func (r *RectangleShape) Destroy() {
	C.sfRectangleShape_destroy(r.CPtr())
	return
}

func (r *RectangleShape) GetFillColor() Color {
	cval := C.sfRectangleShape_getFillColor(r.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (r *RectangleShape) GetGlobalBounds() FloatRect {
	cval := C.sfRectangleShape_getGlobalBounds(r.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (r *RectangleShape) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfRectangleShape_getInverseTransform(r.CPtr()))
	return &Transform{ptr: cval}
}

func (r *RectangleShape) GetLocalBounds() FloatRect {
	cval := C.sfRectangleShape_getLocalBounds(r.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (r *RectangleShape) GetOrigin() Vector2f {
	cval := C.sfRectangleShape_getOrigin(r.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RectangleShape) GetOutlineColor() Color {
	cval := C.sfRectangleShape_getOutlineColor(r.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (r *RectangleShape) GetOutlineThickness() float32 {
	return C.sfRectangleShape_getOutlineThickness(r.CPtr())
}

func (r *RectangleShape) GetPoint(index int32) Vector2f {
	cval := C.sfRectangleShape_getPoint(r.CPtr(), index)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RectangleShape) GetPointCount() int32 {
	return C.sfRectangleShape_getPointCount(r.CPtr())
}

func (r *RectangleShape) GetPosition() Vector2f {
	cval := C.sfRectangleShape_getPosition(r.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RectangleShape) GetRotation() float32 {
	return C.sfRectangleShape_getRotation(r.CPtr())
}

func (r *RectangleShape) GetScale() Vector2f {
	cval := C.sfRectangleShape_getScale(r.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RectangleShape) GetSize() Vector2f {
	cval := C.sfRectangleShape_getSize(r.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RectangleShape) GetTexture() *Texture {
	cval := unsafe.Pointer(C.sfRectangleShape_getTexture(r.CPtr()))
	return &Texture{ptr: cval}
}

func (r *RectangleShape) GetTextureRect() IntRect {
	cval := C.sfRectangleShape_getTextureRect(r.CPtr())
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (r *RectangleShape) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfRectangleShape_getTransform(r.CPtr()))
	return &Transform{ptr: cval}
}

func (r *RectangleShape) Move(offset Vector2f) {
	C.sfRectangleShape_move(r.CPtr(), offset.ToC())
	return
}

func (r *RectangleShape) Rotate(angle int32) {
	C.sfRectangleShape_rotate(r.CPtr(), angle)
	return
}

func (r *RectangleShape) Scale(factors Vector2f) {
	C.sfRectangleShape_scale(r.CPtr(), factors.ToC())
	return
}

func (r *RectangleShape) SetFillColor(color Color) {
	C.sfRectangleShape_setFillColor(r.CPtr(), color.ToC())
	return
}

func (r *RectangleShape) SetOrigin(origin Vector2f) {
	C.sfRectangleShape_setOrigin(r.CPtr(), origin.ToC())
	return
}

func (r *RectangleShape) SetOutlineColor(color Color) {
	C.sfRectangleShape_setOutlineColor(r.CPtr(), color.ToC())
	return
}

func (r *RectangleShape) SetOutlineThickness(thickness int32) {
	C.sfRectangleShape_setOutlineThickness(r.CPtr(), thickness)
	return
}

func (r *RectangleShape) SetPosition(position Vector2f) {
	C.sfRectangleShape_setPosition(r.CPtr(), position.ToC())
	return
}

func (r *RectangleShape) SetRotation(angle int32) {
	C.sfRectangleShape_setRotation(r.CPtr(), angle)
	return
}

func (r *RectangleShape) SetScale(scale Vector2f) {
	C.sfRectangleShape_setScale(r.CPtr(), scale.ToC())
	return
}

func (r *RectangleShape) SetSize(size Vector2f) {
	C.sfRectangleShape_setSize(r.CPtr(), size.ToC())
	return
}

func (r *RectangleShape) SetTexture(texture *Texture, resetRect int32) {
	C.sfRectangleShape_setTexture(r.CPtr(), texture, resetRect)
	return
}

func (r *RectangleShape) SetTextureRect(rect IntRect) {
	C.sfRectangleShape_setTextureRect(r.CPtr(), rect.ToC())
	return
}

func RenderStatesDefault() RenderStates {
	cval := C.sfRenderStates_default()
	return RenderStates{BlendMode: (cval.blendmode), Transform: (cval.transform), Texture: (cval.texture), Shader: (cval.shader)}
}

func (r *RenderTexture) Clear(color Color) {
	C.sfRenderTexture_clear(r.CPtr(), color.ToC())
	return
}

func RenderTextureCreate(width uint32, height uint32, depthBuffer bool) *RenderTexture {
	cval := unsafe.Pointer(C.sfRenderTexture_create(width, height, depthBuffer))
	return &RenderTexture{ptr: cval}
}

func RenderTextureCreateWithSettings(width uint32, height uint32, settings *ContextSettings) *RenderTexture {
	cval := unsafe.Pointer(C.sfRenderTexture_createWithSettings(width, height, settings))
	return &RenderTexture{ptr: cval}
}

func (r *RenderTexture) Destroy() {
	C.sfRenderTexture_destroy(r.CPtr())
	return
}

func (r *RenderTexture) Display() {
	C.sfRenderTexture_display(r.CPtr())
	return
}

func (r *RenderTexture) DrawCircleShape(object *CircleShape, states *RenderStates) {
	C.sfRenderTexture_drawCircleShape(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawConvexShape(object *ConvexShape, states *RenderStates) {
	C.sfRenderTexture_drawConvexShape(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawPrimitives(vertices *Vertex, vertexCount int32, primitiveType PrimitiveType, states *RenderStates) {
	C.sfRenderTexture_drawPrimitives(r.CPtr(), vertices, vertexCount, primitiveType, states)
	return
}

func (r *RenderTexture) DrawRectangleShape(object *RectangleShape, states *RenderStates) {
	C.sfRenderTexture_drawRectangleShape(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawShape(object *Shape, states *RenderStates) {
	C.sfRenderTexture_drawShape(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawSprite(object *Sprite, states *RenderStates) {
	C.sfRenderTexture_drawSprite(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawText(object *Text, states *RenderStates) {
	C.sfRenderTexture_drawText(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawVertexArray(object *VertexArray, states *RenderStates) {
	C.sfRenderTexture_drawVertexArray(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawVertexBuffer(object *VertexBuffer, states *RenderStates) {
	C.sfRenderTexture_drawVertexBuffer(r.CPtr(), object, states)
	return
}

func (r *RenderTexture) DrawVertexBufferRange(object *VertexBuffer, firstVertex int32, vertexCount int32, states *RenderStates) {
	C.sfRenderTexture_drawVertexBufferRange(r.CPtr(), object, firstVertex, vertexCount, states)
	return
}

func (r *RenderTexture) GenerateMipmap() bool {
	return C.sfRenderTexture_generateMipmap(r.CPtr())
}

func (r *RenderTexture) GetDefaultView() *View {
	cval := unsafe.Pointer(C.sfRenderTexture_getDefaultView(r.CPtr()))
	return &View{ptr: cval}
}

func RenderTextureGetMaximumAntialiasingLevel() uint32 {
	return C.sfRenderTexture_getMaximumAntialiasingLevel()
}

func (r *RenderTexture) GetSize() Vector2u {
	cval := C.sfRenderTexture_getSize(r.CPtr())
	return Vector2u{X: uint32(cval.x), Y: uint32(cval.y)}
}

func (r *RenderTexture) GetTexture() *Texture {
	cval := unsafe.Pointer(C.sfRenderTexture_getTexture(r.CPtr()))
	return &Texture{ptr: cval}
}

func (r *RenderTexture) GetView() *View {
	cval := unsafe.Pointer(C.sfRenderTexture_getView(r.CPtr()))
	return &View{ptr: cval}
}

func (r *RenderTexture) GetViewport(view *View) IntRect {
	cval := C.sfRenderTexture_getViewport(r.CPtr(), view)
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (r *RenderTexture) IsRepeated() bool {
	return C.sfRenderTexture_isRepeated(r.CPtr())
}

func (r *RenderTexture) IsSmooth() bool {
	return C.sfRenderTexture_isSmooth(r.CPtr())
}

func (r *RenderTexture) IsSrgb() bool {
	return C.sfRenderTexture_isSrgb(r.CPtr())
}

func (r *RenderTexture) MapCoordsToPixel(point Vector2f, view *View) Vector2i {
	cval := C.sfRenderTexture_mapCoordsToPixel(r.CPtr(), point.ToC(), view)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (r *RenderTexture) MapPixelToCoords(point Vector2i, view *View) Vector2f {
	cval := C.sfRenderTexture_mapPixelToCoords(r.CPtr(), point.ToC(), view)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RenderTexture) PopGlsTates() {
	C.sfRenderTexture_popGLStates(r.CPtr())
	return
}

func (r *RenderTexture) PushGlsTates() {
	C.sfRenderTexture_pushGLStates(r.CPtr())
	return
}

func (r *RenderTexture) ResetGlsTates() {
	C.sfRenderTexture_resetGLStates(r.CPtr())
	return
}

func (r *RenderTexture) SetActive(active int32) bool {
	return C.sfRenderTexture_setActive(r.CPtr(), active)
}

func (r *RenderTexture) SetRepeated(repeated int32) {
	C.sfRenderTexture_setRepeated(r.CPtr(), repeated)
	return
}

func (r *RenderTexture) SetSmooth(smooth int32) {
	C.sfRenderTexture_setSmooth(r.CPtr(), smooth)
	return
}

func (r *RenderTexture) SetView(view *View) {
	C.sfRenderTexture_setView(r.CPtr(), view)
	return
}

func (r *RenderWindow) Capture() *Image {
	cval := unsafe.Pointer(C.sfRenderWindow_capture(r.CPtr()))
	return &Image{ptr: cval}
}

func (r *RenderWindow) Clear(color Color) {
	C.sfRenderWindow_clear(r.CPtr(), color.ToC())
	return
}

func (r *RenderWindow) Close() {
	C.sfRenderWindow_close(r.CPtr())
	return
}

func RenderWindowCreate(mode VideoMode, title string, style uint32, settings *ContextSettings) *RenderWindow {
	cval := unsafe.Pointer(C.sfRenderWindow_create(mode.ToC(), C.CString(title), style, settings))
	return &RenderWindow{ptr: cval}
}

func RenderWindowCreateFromHandle(handle uintptr, settings *ContextSettings) *RenderWindow {
	cval := unsafe.Pointer(C.sfRenderWindow_createFromHandle(handle, settings))
	return &RenderWindow{ptr: cval}
}

func RenderWindowCreateUnicode(mode VideoMode, title uint32, style uint32, settings *ContextSettings) *RenderWindow {
	cval := unsafe.Pointer(C.sfRenderWindow_createUnicode(mode.ToC(), title, style, settings))
	return &RenderWindow{ptr: cval}
}

func (r *RenderWindow) CreateVulkanSurface(instance int32, surface int32, allocator int32) bool {
	return C.sfRenderWindow_createVulkanSurface(r.CPtr(), instance, surface, allocator)
}

func (r *RenderWindow) Destroy() {
	C.sfRenderWindow_destroy(r.CPtr())
	return
}

func (r *RenderWindow) Display() {
	C.sfRenderWindow_display(r.CPtr())
	return
}

func (r *RenderWindow) DrawCircleShape(object *CircleShape, states *RenderStates) {
	C.sfRenderWindow_drawCircleShape(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawConvexShape(object *ConvexShape, states *RenderStates) {
	C.sfRenderWindow_drawConvexShape(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawPrimitives(vertices *Vertex, vertexCount int32, primitiveType PrimitiveType, states *RenderStates) {
	C.sfRenderWindow_drawPrimitives(r.CPtr(), vertices, vertexCount, primitiveType, states)
	return
}

func (r *RenderWindow) DrawRectangleShape(object *RectangleShape, states *RenderStates) {
	C.sfRenderWindow_drawRectangleShape(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawShape(object *Shape, states *RenderStates) {
	C.sfRenderWindow_drawShape(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawSprite(object *Sprite, states *RenderStates) {
	C.sfRenderWindow_drawSprite(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawText(object *Text, states *RenderStates) {
	C.sfRenderWindow_drawText(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawVertexArray(object *VertexArray, states *RenderStates) {
	C.sfRenderWindow_drawVertexArray(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawVertexBuffer(object *VertexBuffer, states *RenderStates) {
	C.sfRenderWindow_drawVertexBuffer(r.CPtr(), object, states)
	return
}

func (r *RenderWindow) DrawVertexBufferRange(object *VertexBuffer, firstVertex int32, vertexCount int32, states *RenderStates) {
	C.sfRenderWindow_drawVertexBufferRange(r.CPtr(), object, firstVertex, vertexCount, states)
	return
}

func (r *RenderWindow) GetDefaultView() *View {
	cval := unsafe.Pointer(C.sfRenderWindow_getDefaultView(r.CPtr()))
	return &View{ptr: cval}
}

func (r *RenderWindow) GetPosition() Vector2i {
	cval := C.sfRenderWindow_getPosition(r.CPtr())
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (r *RenderWindow) GetSettings() ContextSettings {
	cval := C.sfRenderWindow_getSettings(r.CPtr())
	return ContextSettings{DepthBits: (cval.depthbits), StencilBits: (cval.stencilbits), AntialiasingLevel: (cval.antialiasinglevel), MajorVersion: (cval.majorversion), MinorVersion: (cval.minorversion), AttributeFlags: (cval.attributeflags), SRgbCapable: (cval.srgbcapable)}
}

func (r *RenderWindow) GetSize() Vector2u {
	cval := C.sfRenderWindow_getSize(r.CPtr())
	return Vector2u{X: uint32(cval.x), Y: uint32(cval.y)}
}

func (r *RenderWindow) GetSystemHandle() int32 {
	return C.sfRenderWindow_getSystemHandle(r.CPtr())
}

func (r *RenderWindow) GetView() *View {
	cval := unsafe.Pointer(C.sfRenderWindow_getView(r.CPtr()))
	return &View{ptr: cval}
}

func (r *RenderWindow) GetViewport(view *View) IntRect {
	cval := C.sfRenderWindow_getViewport(r.CPtr(), view)
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (r *RenderWindow) HasFocus() bool {
	return C.sfRenderWindow_hasFocus(r.CPtr())
}

func (r *RenderWindow) IsOpen() bool {
	return C.sfRenderWindow_isOpen(r.CPtr())
}

func (r *RenderWindow) IsSrgb() bool {
	return C.sfRenderWindow_isSrgb(r.CPtr())
}

func (r *RenderWindow) MapCoordsToPixel(point Vector2f, view *View) Vector2i {
	cval := C.sfRenderWindow_mapCoordsToPixel(r.CPtr(), point.ToC(), view)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (r *RenderWindow) MapPixelToCoords(point Vector2i, view *View) Vector2f {
	cval := C.sfRenderWindow_mapPixelToCoords(r.CPtr(), point.ToC(), view)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (r *RenderWindow) PollEvent(event *Event) bool {
	return C.sfRenderWindow_pollEvent(r.CPtr(), event)
}

func (r *RenderWindow) PopGlsTates() {
	C.sfRenderWindow_popGLStates(r.CPtr())
	return
}

func (r *RenderWindow) PushGlsTates() {
	C.sfRenderWindow_pushGLStates(r.CPtr())
	return
}

func (r *RenderWindow) RequestFocus() {
	C.sfRenderWindow_requestFocus(r.CPtr())
	return
}

func (r *RenderWindow) ResetGlsTates() {
	C.sfRenderWindow_resetGLStates(r.CPtr())
	return
}

func (r *RenderWindow) SetActive(active int32) bool {
	return C.sfRenderWindow_setActive(r.CPtr(), active)
}

func (r *RenderWindow) SetFramerateLimit(limit int32) {
	C.sfRenderWindow_setFramerateLimit(r.CPtr(), limit)
	return
}

func (r *RenderWindow) SetIcon(width int32, height int32, pixels int32) {
	C.sfRenderWindow_setIcon(r.CPtr(), width, height, pixels)
	return
}

func (r *RenderWindow) SetJoystickThreshold(threshold int32) {
	C.sfRenderWindow_setJoystickThreshold(r.CPtr(), threshold)
	return
}

func (r *RenderWindow) SetKeyRepeatEnabled(enabled int32) {
	C.sfRenderWindow_setKeyRepeatEnabled(r.CPtr(), enabled)
	return
}

func (r *RenderWindow) SetMouseCursor(cursor *Cursor) {
	C.sfRenderWindow_setMouseCursor(r.CPtr(), cursor)
	return
}

func (r *RenderWindow) SetMouseCursorGrabbed(grabbed int32) {
	C.sfRenderWindow_setMouseCursorGrabbed(r.CPtr(), grabbed)
	return
}

func (r *RenderWindow) SetMouseCursorVisible(show int32) {
	C.sfRenderWindow_setMouseCursorVisible(r.CPtr(), show)
	return
}

func (r *RenderWindow) SetPosition(position Vector2i) {
	C.sfRenderWindow_setPosition(r.CPtr(), position.ToC())
	return
}

func (r *RenderWindow) SetSize(size Vector2u) {
	C.sfRenderWindow_setSize(r.CPtr(), size.ToC())
	return
}

func (r *RenderWindow) SetTitle(title int32) {
	C.sfRenderWindow_setTitle(r.CPtr(), C.CString(title))
	return
}

func (r *RenderWindow) SetUnicodeTitle(title int32) {
	C.sfRenderWindow_setUnicodeTitle(r.CPtr(), title)
	return
}

func (r *RenderWindow) SetVerticalSyncEnabled(enabled int32) {
	C.sfRenderWindow_setVerticalSyncEnabled(r.CPtr(), enabled)
	return
}

func (r *RenderWindow) SetView(view *View) {
	C.sfRenderWindow_setView(r.CPtr(), view)
	return
}

func (r *RenderWindow) SetVisible(visible int32) {
	C.sfRenderWindow_setVisible(r.CPtr(), visible)
	return
}

func (r *RenderWindow) WaitEvent(event *Event) bool {
	return C.sfRenderWindow_waitEvent(r.CPtr(), event)
}

func SensorGetValue(sensor SensorType) Vector3f {
	cval := C.sfSensor_getValue(sensor)
	return Vector3f{X: float32(cval.x), Y: float32(cval.y), Z: float32(cval.z)}
}

func SensorIsAvailable(sensor SensorType) bool {
	return C.sfSensor_isAvailable(sensor)
}

func SensorSetEnabled(sensor SensorType, enabled bool) {
	C.sfSensor_setEnabled(sensor, enabled)
	return
}

func (s *Shader) Bind() {
	C.sfShader_bind(s.CPtr())
	return
}

func ShaderCreateFromFile(vertexShaderFilename string, geometryShaderFilename string, fragmentShaderFilename string) *Shader {
	cval := unsafe.Pointer(C.sfShader_createFromFile(C.CString(vertexShaderFilename), C.CString(geometryShaderFilename), C.CString(fragmentShaderFilename)))
	return &Shader{ptr: cval}
}

func ShaderCreateFromMemory(vertexShader string, geometryShader string, fragmentShader string) *Shader {
	cval := unsafe.Pointer(C.sfShader_createFromMemory(C.CString(vertexShader), C.CString(geometryShader), C.CString(fragmentShader)))
	return &Shader{ptr: cval}
}

func ShaderCreateFromStream(vertexShaderStream *InputStream, geometryShaderStream *InputStream, fragmentShaderStream *InputStream) *Shader {
	cval := unsafe.Pointer(C.sfShader_createFromStream(vertexShaderStream, geometryShaderStream, fragmentShaderStream))
	return &Shader{ptr: cval}
}

func (s *Shader) Destroy() {
	C.sfShader_destroy(s.CPtr())
	return
}

func (s *Shader) GetNativeHandle() uint32 {
	return C.sfShader_getNativeHandle(s.CPtr())
}

func ShaderIsAvailable() bool {
	return C.sfShader_isAvailable()
}

func ShaderIsGeometryAvailable() bool {
	return C.sfShader_isGeometryAvailable()
}

func (s *Shader) SetBoolUniform(name int32, x int32) {
	C.sfShader_setBoolUniform(s.CPtr(), C.CString(name), x)
	return
}

func (s *Shader) SetBvec2uniform(name int32, vector Vector2b) {
	C.sfShader_setBvec2Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetBvec3uniform(name int32, vector Vector3b) {
	C.sfShader_setBvec3Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetBvec4uniform(name int32, vector Vector4b) {
	C.sfShader_setBvec4Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetColorParameter(name int32, color Color) {
	C.sfShader_setColorParameter(s.CPtr(), C.CString(name), color.ToC())
	return
}

func (s *Shader) SetColorUniform(name int32, color Color) {
	C.sfShader_setColorUniform(s.CPtr(), C.CString(name), color.ToC())
	return
}

func (s *Shader) SetCurrentTextureParameter(name int32) {
	C.sfShader_setCurrentTextureParameter(s.CPtr(), C.CString(name))
	return
}

func (s *Shader) SetCurrentTextureUniform(name int32) {
	C.sfShader_setCurrentTextureUniform(s.CPtr(), C.CString(name))
	return
}

func (s *Shader) SetFloat2parameter(name int32, x int32, y int32) {
	C.sfShader_setFloat2Parameter(s.CPtr(), C.CString(name), x, y)
	return
}

func (s *Shader) SetFloat3parameter(name int32, x int32, y int32, z int32) {
	C.sfShader_setFloat3Parameter(s.CPtr(), C.CString(name), x, y, z)
	return
}

func (s *Shader) SetFloat4parameter(name int32, x int32, y int32, z int32, w int32) {
	C.sfShader_setFloat4Parameter(s.CPtr(), C.CString(name), x, y, z, w)
	return
}

func (s *Shader) SetFloatParameter(name int32, x int32) {
	C.sfShader_setFloatParameter(s.CPtr(), C.CString(name), x)
	return
}

func (s *Shader) SetFloatUniform(name int32, x int32) {
	C.sfShader_setFloatUniform(s.CPtr(), C.CString(name), x)
	return
}

func (s *Shader) SetFloatUniformArray(name int32, scalarArray int32, length int32) {
	C.sfShader_setFloatUniformArray(s.CPtr(), C.CString(name), scalarArray, length)
	return
}

func (s *Shader) SetIntColorUniform(name int32, color Color) {
	C.sfShader_setIntColorUniform(s.CPtr(), C.CString(name), color.ToC())
	return
}

func (s *Shader) SetIntUniform(name int32, x int32) {
	C.sfShader_setIntUniform(s.CPtr(), C.CString(name), x)
	return
}

func (s *Shader) SetIvec2uniform(name int32, vector Vector2i) {
	C.sfShader_setIvec2Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetIvec3uniform(name int32, vector Vector3i) {
	C.sfShader_setIvec3Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetIvec4uniform(name int32, vector Vector4i) {
	C.sfShader_setIvec4Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetMat3uniform(name int32, matrix *GlslMat3) {
	C.sfShader_setMat3Uniform(s.CPtr(), C.CString(name), matrix)
	return
}

func (s *Shader) SetMat3uniformArray(name int32, matrixArray *GlslMat3, length int32) {
	C.sfShader_setMat3UniformArray(s.CPtr(), C.CString(name), matrixArray, length)
	return
}

func (s *Shader) SetMat4uniform(name int32, matrix *GlslMat4) {
	C.sfShader_setMat4Uniform(s.CPtr(), C.CString(name), matrix)
	return
}

func (s *Shader) SetMat4uniformArray(name int32, matrixArray *GlslMat4, length int32) {
	C.sfShader_setMat4UniformArray(s.CPtr(), C.CString(name), matrixArray, length)
	return
}

func (s *Shader) SetTextureParameter(name int32, texture *Texture) {
	C.sfShader_setTextureParameter(s.CPtr(), C.CString(name), texture)
	return
}

func (s *Shader) SetTextureUniform(name int32, texture *Texture) {
	C.sfShader_setTextureUniform(s.CPtr(), C.CString(name), texture)
	return
}

func (s *Shader) SetTransformParameter(name int32, transform Transform) {
	C.sfShader_setTransformParameter(s.CPtr(), C.CString(name), transform)
	return
}

func (s *Shader) SetVec2uniform(name int32, vector Vector2f) {
	C.sfShader_setVec2Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetVec2uniformArray(name int32, vectorArray *Vector2f, length int32) {
	C.sfShader_setVec2UniformArray(s.CPtr(), C.CString(name), vectorArray, length)
	return
}

func (s *Shader) SetVec3uniform(name int32, vector Vector3f) {
	C.sfShader_setVec3Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetVec3uniformArray(name int32, vectorArray *Vector3f, length int32) {
	C.sfShader_setVec3UniformArray(s.CPtr(), C.CString(name), vectorArray, length)
	return
}

func (s *Shader) SetVec4uniform(name int32, vector Vector4f) {
	C.sfShader_setVec4Uniform(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetVec4uniformArray(name int32, vectorArray *Vector4f, length int32) {
	C.sfShader_setVec4UniformArray(s.CPtr(), C.CString(name), vectorArray, length)
	return
}

func (s *Shader) SetVector2parameter(name int32, vector Vector2f) {
	C.sfShader_setVector2Parameter(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shader) SetVector3parameter(name int32, vector Vector3f) {
	C.sfShader_setVector3Parameter(s.CPtr(), C.CString(name), vector.ToC())
	return
}

func (s *Shape) Destroy() {
	C.sfShape_destroy(s.CPtr())
	return
}

func (s *Shape) GetFillColor() Color {
	cval := C.sfShape_getFillColor(s.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (s *Shape) GetGlobalBounds() FloatRect {
	cval := C.sfShape_getGlobalBounds(s.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (s *Shape) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfShape_getInverseTransform(s.CPtr()))
	return &Transform{ptr: cval}
}

func (s *Shape) GetLocalBounds() FloatRect {
	cval := C.sfShape_getLocalBounds(s.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (s *Shape) GetOrigin() Vector2f {
	cval := C.sfShape_getOrigin(s.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Shape) GetOutlineColor() Color {
	cval := C.sfShape_getOutlineColor(s.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (s *Shape) GetOutlineThickness() float32 {
	return C.sfShape_getOutlineThickness(s.CPtr())
}

func (s *Shape) GetPoint(index int32) Vector2f {
	cval := C.sfShape_getPoint(s.CPtr(), index)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Shape) GetPointCount() int32 {
	return C.sfShape_getPointCount(s.CPtr())
}

func (s *Shape) GetPosition() Vector2f {
	cval := C.sfShape_getPosition(s.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Shape) GetRotation() float32 {
	return C.sfShape_getRotation(s.CPtr())
}

func (s *Shape) GetScale() Vector2f {
	cval := C.sfShape_getScale(s.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Shape) GetTexture() *Texture {
	cval := unsafe.Pointer(C.sfShape_getTexture(s.CPtr()))
	return &Texture{ptr: cval}
}

func (s *Shape) GetTextureRect() IntRect {
	cval := C.sfShape_getTextureRect(s.CPtr())
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (s *Shape) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfShape_getTransform(s.CPtr()))
	return &Transform{ptr: cval}
}

func (s *Shape) Move(offset Vector2f) {
	C.sfShape_move(s.CPtr(), offset.ToC())
	return
}

func (s *Shape) Rotate(angle int32) {
	C.sfShape_rotate(s.CPtr(), angle)
	return
}

func (s *Shape) Scale(factors Vector2f) {
	C.sfShape_scale(s.CPtr(), factors.ToC())
	return
}

func (s *Shape) SetFillColor(color Color) {
	C.sfShape_setFillColor(s.CPtr(), color.ToC())
	return
}

func (s *Shape) SetOrigin(origin Vector2f) {
	C.sfShape_setOrigin(s.CPtr(), origin.ToC())
	return
}

func (s *Shape) SetOutlineColor(color Color) {
	C.sfShape_setOutlineColor(s.CPtr(), color.ToC())
	return
}

func (s *Shape) SetOutlineThickness(thickness int32) {
	C.sfShape_setOutlineThickness(s.CPtr(), thickness)
	return
}

func (s *Shape) SetPosition(position Vector2f) {
	C.sfShape_setPosition(s.CPtr(), position.ToC())
	return
}

func (s *Shape) SetRotation(angle int32) {
	C.sfShape_setRotation(s.CPtr(), angle)
	return
}

func (s *Shape) SetScale(scale Vector2f) {
	C.sfShape_setScale(s.CPtr(), scale.ToC())
	return
}

func (s *Shape) SetTexture(texture *Texture, resetRect int32) {
	C.sfShape_setTexture(s.CPtr(), texture, resetRect)
	return
}

func (s *Shape) SetTextureRect(rect IntRect) {
	C.sfShape_setTextureRect(s.CPtr(), rect.ToC())
	return
}

func (s *Shape) Update() {
	C.sfShape_update(s.CPtr())
	return
}

func (s *Sprite) Copy() *Sprite {
	cval := unsafe.Pointer(C.sfSprite_copy(s.CPtr()))
	return &Sprite{ptr: cval}
}

func SpriteCreate() *Sprite {
	cval := unsafe.Pointer(C.sfSprite_create())
	return &Sprite{ptr: cval}
}

func (s *Sprite) Destroy() {
	C.sfSprite_destroy(s.CPtr())
	return
}

func (s *Sprite) GetColor() Color {
	cval := C.sfSprite_getColor(s.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (s *Sprite) GetGlobalBounds() FloatRect {
	cval := C.sfSprite_getGlobalBounds(s.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (s *Sprite) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfSprite_getInverseTransform(s.CPtr()))
	return &Transform{ptr: cval}
}

func (s *Sprite) GetLocalBounds() FloatRect {
	cval := C.sfSprite_getLocalBounds(s.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (s *Sprite) GetOrigin() Vector2f {
	cval := C.sfSprite_getOrigin(s.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Sprite) GetPosition() Vector2f {
	cval := C.sfSprite_getPosition(s.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Sprite) GetRotation() float32 {
	return C.sfSprite_getRotation(s.CPtr())
}

func (s *Sprite) GetScale() Vector2f {
	cval := C.sfSprite_getScale(s.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (s *Sprite) GetTexture() *Texture {
	cval := unsafe.Pointer(C.sfSprite_getTexture(s.CPtr()))
	return &Texture{ptr: cval}
}

func (s *Sprite) GetTextureRect() IntRect {
	cval := C.sfSprite_getTextureRect(s.CPtr())
	return IntRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (s *Sprite) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfSprite_getTransform(s.CPtr()))
	return &Transform{ptr: cval}
}

func (s *Sprite) Move(offset Vector2f) {
	C.sfSprite_move(s.CPtr(), offset.ToC())
	return
}

func (s *Sprite) Rotate(angle int32) {
	C.sfSprite_rotate(s.CPtr(), angle)
	return
}

func (s *Sprite) Scale(factors Vector2f) {
	C.sfSprite_scale(s.CPtr(), factors.ToC())
	return
}

func (s *Sprite) SetColor(color Color) {
	C.sfSprite_setColor(s.CPtr(), color.ToC())
	return
}

func (s *Sprite) SetOrigin(origin Vector2f) {
	C.sfSprite_setOrigin(s.CPtr(), origin.ToC())
	return
}

func (s *Sprite) SetPosition(position Vector2f) {
	C.sfSprite_setPosition(s.CPtr(), position.ToC())
	return
}

func (s *Sprite) SetRotation(angle int32) {
	C.sfSprite_setRotation(s.CPtr(), angle)
	return
}

func (s *Sprite) SetScale(scale Vector2f) {
	C.sfSprite_setScale(s.CPtr(), scale.ToC())
	return
}

func (s *Sprite) SetTexture(texture *Texture, resetRect int32) {
	C.sfSprite_setTexture(s.CPtr(), texture, resetRect)
	return
}

func (s *Sprite) SetTextureRect(rectangle IntRect) {
	C.sfSprite_setTextureRect(s.CPtr(), rectangle.ToC())
	return
}

func (t *Text) Copy() *Text {
	cval := unsafe.Pointer(C.sfText_copy(t.CPtr()))
	return &Text{ptr: cval}
}

func TextCreate() *Text {
	cval := unsafe.Pointer(C.sfText_create())
	return &Text{ptr: cval}
}

func (t *Text) Destroy() {
	C.sfText_destroy(t.CPtr())
	return
}

func (t *Text) FindCharacterPos(index int32) Vector2f {
	cval := C.sfText_findCharacterPos(t.CPtr(), index)
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Text) GetCharacterSize() uint32 {
	return C.sfText_getCharacterSize(t.CPtr())
}

func (t *Text) GetColor() Color {
	cval := C.sfText_getColor(t.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (t *Text) GetFillColor() Color {
	cval := C.sfText_getFillColor(t.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (t *Text) GetFont() *Font {
	cval := unsafe.Pointer(C.sfText_getFont(t.CPtr()))
	return &Font{ptr: cval}
}

func (t *Text) GetGlobalBounds() FloatRect {
	cval := C.sfText_getGlobalBounds(t.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (t *Text) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfText_getInverseTransform(t.CPtr()))
	return &Transform{ptr: cval}
}

func (t *Text) GetLetterSpacing() float32 {
	return C.sfText_getLetterSpacing(t.CPtr())
}

func (t *Text) GetLineSpacing() float32 {
	return C.sfText_getLineSpacing(t.CPtr())
}

func (t *Text) GetLocalBounds() FloatRect {
	cval := C.sfText_getLocalBounds(t.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (t *Text) GetOrigin() Vector2f {
	cval := C.sfText_getOrigin(t.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Text) GetOutlineColor() Color {
	cval := C.sfText_getOutlineColor(t.CPtr())
	return Color{R: (cval.r), G: (cval.g), B: (cval.b), A: (cval.a)}
}

func (t *Text) GetOutlineThickness() float32 {
	return C.sfText_getOutlineThickness(t.CPtr())
}

func (t *Text) GetPosition() Vector2f {
	cval := C.sfText_getPosition(t.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Text) GetRotation() float32 {
	return C.sfText_getRotation(t.CPtr())
}

func (t *Text) GetScale() Vector2f {
	cval := C.sfText_getScale(t.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Text) GetString() int32 {
	return C.sfText_getString(t.CPtr())
}

func (t *Text) GetStyle() int32 {
	return C.sfText_getStyle(t.CPtr())
}

func (t *Text) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfText_getTransform(t.CPtr()))
	return &Transform{ptr: cval}
}

func (t *Text) GetUnicodeString() int32 {
	return C.sfText_getUnicodeString(t.CPtr())
}

func (t *Text) Move(offset Vector2f) {
	C.sfText_move(t.CPtr(), offset.ToC())
	return
}

func (t *Text) Rotate(angle int32) {
	C.sfText_rotate(t.CPtr(), angle)
	return
}

func (t *Text) Scale(factors Vector2f) {
	C.sfText_scale(t.CPtr(), factors.ToC())
	return
}

func (t *Text) SetCharacterSize(size int32) {
	C.sfText_setCharacterSize(t.CPtr(), size)
	return
}

func (t *Text) SetColor(color Color) {
	C.sfText_setColor(t.CPtr(), color.ToC())
	return
}

func (t *Text) SetFillColor(color Color) {
	C.sfText_setFillColor(t.CPtr(), color.ToC())
	return
}

func (t *Text) SetFont(font *Font) {
	C.sfText_setFont(t.CPtr(), font)
	return
}

func (t *Text) SetLetterSpacing(spacingFactor int32) {
	C.sfText_setLetterSpacing(t.CPtr(), spacingFactor)
	return
}

func (t *Text) SetLineSpacing(spacingFactor int32) {
	C.sfText_setLineSpacing(t.CPtr(), spacingFactor)
	return
}

func (t *Text) SetOrigin(origin Vector2f) {
	C.sfText_setOrigin(t.CPtr(), origin.ToC())
	return
}

func (t *Text) SetOutlineColor(color Color) {
	C.sfText_setOutlineColor(t.CPtr(), color.ToC())
	return
}

func (t *Text) SetOutlineThickness(thickness int32) {
	C.sfText_setOutlineThickness(t.CPtr(), thickness)
	return
}

func (t *Text) SetPosition(position Vector2f) {
	C.sfText_setPosition(t.CPtr(), position.ToC())
	return
}

func (t *Text) SetRotation(angle int32) {
	C.sfText_setRotation(t.CPtr(), angle)
	return
}

func (t *Text) SetScale(scale Vector2f) {
	C.sfText_setScale(t.CPtr(), scale.ToC())
	return
}

func (t *Text) SetString(string int32) {
	C.sfText_setString(t.CPtr(), C.CString(string))
	return
}

func (t *Text) SetStyle(style int32) {
	C.sfText_setStyle(t.CPtr(), style)
	return
}

func (t *Text) SetUnicodeString(string int32) {
	C.sfText_setUnicodeString(t.CPtr(), string)
	return
}

func (t *Texture) Bind(textureCoordinateType TextureCoordinateType) {
	C.sfTexture_bind(t.CPtr(), textureCoordinateType)
	return
}

func (t *Texture) Copy() *Texture {
	cval := unsafe.Pointer(C.sfTexture_copy(t.CPtr()))
	return &Texture{ptr: cval}
}

func (t *Texture) CopyToImage() *Image {
	cval := unsafe.Pointer(C.sfTexture_copyToImage(t.CPtr()))
	return &Image{ptr: cval}
}

func TextureCreate(width uint32, height uint32) *Texture {
	cval := unsafe.Pointer(C.sfTexture_create(width, height))
	return &Texture{ptr: cval}
}

func TextureCreateFromFile(filename string, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createFromFile(C.CString(filename), area))
	return &Texture{ptr: cval}
}

func TextureCreateFromImage(image *Image, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createFromImage(image, area))
	return &Texture{ptr: cval}
}

func TextureCreateFromMemory(data int32, sizeInBytes int32, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createFromMemory(data, sizeInBytes, area))
	return &Texture{ptr: cval}
}

func TextureCreateFromStream(stream *InputStream, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createFromStream(stream, area))
	return &Texture{ptr: cval}
}

func TextureCreateSrgbFromFile(filename string, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createSrgbFromFile(C.CString(filename), area))
	return &Texture{ptr: cval}
}

func TextureCreateSrgbFromImage(image *Image, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createSrgbFromImage(image, area))
	return &Texture{ptr: cval}
}

func TextureCreateSrgbFromMemory(data int32, sizeInBytes int32, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createSrgbFromMemory(data, sizeInBytes, area))
	return &Texture{ptr: cval}
}

func TextureCreateSrgbFromStream(stream *InputStream, area *IntRect) *Texture {
	cval := unsafe.Pointer(C.sfTexture_createSrgbFromStream(stream, area))
	return &Texture{ptr: cval}
}

func (t *Texture) Destroy() {
	C.sfTexture_destroy(t.CPtr())
	return
}

func (t *Texture) GenerateMipmap() bool {
	return C.sfTexture_generateMipmap(t.CPtr())
}

func TextureGetMaximumSize() uint32 {
	return C.sfTexture_getMaximumSize()
}

func (t *Texture) GetNativeHandle() uint32 {
	return C.sfTexture_getNativeHandle(t.CPtr())
}

func (t *Texture) GetSize() Vector2u {
	cval := C.sfTexture_getSize(t.CPtr())
	return Vector2u{X: uint32(cval.x), Y: uint32(cval.y)}
}

func (t *Texture) IsRepeated() bool {
	return C.sfTexture_isRepeated(t.CPtr())
}

func (t *Texture) IsSmooth() bool {
	return C.sfTexture_isSmooth(t.CPtr())
}

func (t *Texture) IsSrgb() bool {
	return C.sfTexture_isSrgb(t.CPtr())
}

func (t *Texture) SetRepeated(repeated int32) {
	C.sfTexture_setRepeated(t.CPtr(), repeated)
	return
}

func (t *Texture) SetSmooth(smooth int32) {
	C.sfTexture_setSmooth(t.CPtr(), smooth)
	return
}

func (t *Texture) Swap(right *Texture) {
	C.sfTexture_swap(t.CPtr(), right)
	return
}

func (t *Texture) UpdateFromImage(image *Image, x int32, y int32) {
	C.sfTexture_updateFromImage(t.CPtr(), image, x, y)
	return
}

func (t *Texture) UpdateFromPixels(pixels int32, width int32, height int32, x int32, y int32) {
	C.sfTexture_updateFromPixels(t.CPtr(), pixels, width, height, x, y)
	return
}

func (t *Texture) UpdateFromRenderWindow(renderWindow *RenderWindow, x int32, y int32) {
	C.sfTexture_updateFromRenderWindow(t.CPtr(), renderWindow, x, y)
	return
}

func (t *Texture) UpdateFromTexture(source *Texture, x int32, y int32) {
	C.sfTexture_updateFromTexture(t.CPtr(), source, x, y)
	return
}

func (t *Texture) UpdateFromWindow(window *Window, x int32, y int32) {
	C.sfTexture_updateFromWindow(t.CPtr(), window, x, y)
	return
}

func ThreadCreate(function int32, userData int32) *Thread {
	cval := unsafe.Pointer(C.sfThread_create(function, userData))
	return &Thread{ptr: cval}
}

func (t *Thread) Destroy() {
	C.sfThread_destroy(t.CPtr())
	return
}

func (t *Thread) Launch() {
	C.sfThread_launch(t.CPtr())
	return
}

func (t *Thread) Terminate() {
	C.sfThread_terminate(t.CPtr())
	return
}

func (t *Thread) Wait() {
	C.sfThread_wait(t.CPtr())
	return
}

func (t Time) AsMicroseconds() int32 {
	return C.sfTime_asMicroseconds(t)
}

func (t Time) AsMilliseconds() int32 {
	return C.sfTime_asMilliseconds(t)
}

func (t Time) AsSeconds() float32 {
	return C.sfTime_asSeconds(t)
}

func TouchGetPosition(finger uint32, relativeTo *Window) Vector2i {
	cval := C.sfTouch_getPosition(finger, relativeTo)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func TouchGetPositionRenderWindow(finger uint32, relativeTo *RenderWindow) Vector2i {
	cval := C.sfTouch_getPositionRenderWindow(finger, relativeTo)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func TouchGetPositionWindowBase(finger uint32, relativeTo *WindowBase) Vector2i {
	cval := C.sfTouch_getPositionWindowBase(finger, relativeTo)
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func TouchIsDown(finger uint32) bool {
	return C.sfTouch_isDown(finger)
}

func (t *Transform) Combine(other *Transform) {
	C.sfTransform_combine(t.CPtr(), other)
	return
}

func (t *Transform) Equal(right *Transform) bool {
	return C.sfTransform_equal(t.CPtr(), right)
}

func TransformFromMatrix(a00 float32, a01 float32, a02 float32, a10 float32, a11 float32, a12 float32, a20 float32, a21 float32, a22 float32) *Transform {
	cval := unsafe.Pointer(C.sfTransform_fromMatrix(a00, a01, a02, a10, a11, a12, a20, a21, a22))
	return &Transform{ptr: cval}
}

func (t *Transform) GetInverse() *Transform {
	cval := unsafe.Pointer(C.sfTransform_getInverse(t.CPtr()))
	return &Transform{ptr: cval}
}

func (t *Transform) GetMatrix(matrix int32) {
	C.sfTransform_getMatrix(t.CPtr(), matrix)
	return
}

func (t *Transform) Rotate(angle int32) {
	C.sfTransform_rotate(t.CPtr(), angle)
	return
}

func (t *Transform) RotateWithCenter(angle int32, centerX int32, centerY int32) {
	C.sfTransform_rotateWithCenter(t.CPtr(), angle, centerX, centerY)
	return
}

func (t *Transform) Scale(scaleX int32, scaleY int32) {
	C.sfTransform_scale(t.CPtr(), scaleX, scaleY)
	return
}

func (t *Transform) ScaleWithCenter(scaleX int32, scaleY int32, centerX int32, centerY int32) {
	C.sfTransform_scaleWithCenter(t.CPtr(), scaleX, scaleY, centerX, centerY)
	return
}

func (t *Transform) TransformPoint(point Vector2f) Vector2f {
	cval := C.sfTransform_transformPoint(t.CPtr(), point.ToC())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Transform) TransformRect(rectangle FloatRect) FloatRect {
	cval := C.sfTransform_transformRect(t.CPtr(), rectangle.ToC())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (t *Transform) Translate(x int32, y int32) {
	C.sfTransform_translate(t.CPtr(), x, y)
	return
}

func (t *Transformable) Copy() *Transformable {
	cval := unsafe.Pointer(C.sfTransformable_copy(t.CPtr()))
	return &Transformable{ptr: cval}
}

func TransformableCreate() *Transformable {
	cval := unsafe.Pointer(C.sfTransformable_create())
	return &Transformable{ptr: cval}
}

func (t *Transformable) Destroy() {
	C.sfTransformable_destroy(t.CPtr())
	return
}

func (t *Transformable) GetInverseTransform() *Transform {
	cval := unsafe.Pointer(C.sfTransformable_getInverseTransform(t.CPtr()))
	return &Transform{ptr: cval}
}

func (t *Transformable) GetOrigin() Vector2f {
	cval := C.sfTransformable_getOrigin(t.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Transformable) GetPosition() Vector2f {
	cval := C.sfTransformable_getPosition(t.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Transformable) GetRotation() float32 {
	return C.sfTransformable_getRotation(t.CPtr())
}

func (t *Transformable) GetScale() Vector2f {
	cval := C.sfTransformable_getScale(t.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (t *Transformable) GetTransform() *Transform {
	cval := unsafe.Pointer(C.sfTransformable_getTransform(t.CPtr()))
	return &Transform{ptr: cval}
}

func (t *Transformable) Move(offset Vector2f) {
	C.sfTransformable_move(t.CPtr(), offset.ToC())
	return
}

func (t *Transformable) Rotate(angle int32) {
	C.sfTransformable_rotate(t.CPtr(), angle)
	return
}

func (t *Transformable) Scale(factors Vector2f) {
	C.sfTransformable_scale(t.CPtr(), factors.ToC())
	return
}

func (t *Transformable) SetOrigin(origin Vector2f) {
	C.sfTransformable_setOrigin(t.CPtr(), origin.ToC())
	return
}

func (t *Transformable) SetPosition(position Vector2f) {
	C.sfTransformable_setPosition(t.CPtr(), position.ToC())
	return
}

func (t *Transformable) SetRotation(angle int32) {
	C.sfTransformable_setRotation(t.CPtr(), angle)
	return
}

func (t *Transformable) SetScale(scale Vector2f) {
	C.sfTransformable_setScale(t.CPtr(), scale.ToC())
	return
}

func (v *VertexArray) Append(vertex Vertex) {
	C.sfVertexArray_append(v.CPtr(), vertex)
	return
}

func (v *VertexArray) Clear() {
	C.sfVertexArray_clear(v.CPtr())
	return
}

func (v *VertexArray) Copy() *VertexArray {
	cval := unsafe.Pointer(C.sfVertexArray_copy(v.CPtr()))
	return &VertexArray{ptr: cval}
}

func VertexArrayCreate() *VertexArray {
	cval := unsafe.Pointer(C.sfVertexArray_create())
	return &VertexArray{ptr: cval}
}

func (v *VertexArray) Destroy() {
	C.sfVertexArray_destroy(v.CPtr())
	return
}

func (v *VertexArray) GetBounds() FloatRect {
	cval := C.sfVertexArray_getBounds(v.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (v *VertexArray) GetPrimitiveType() PrimitiveType {
	cval := unsafe.Pointer(C.sfVertexArray_getPrimitiveType(v.CPtr()))
	return &PrimitiveType{ptr: cval}
}

func (v *VertexArray) GetVertex(index int32) *Vertex {
	cval := unsafe.Pointer(C.sfVertexArray_getVertex(v.CPtr(), index))
	return &Vertex{ptr: cval}
}

func (v *VertexArray) GetVertexCount() int32 {
	return C.sfVertexArray_getVertexCount(v.CPtr())
}

func (v *VertexArray) Resize(vertexCount int32) {
	C.sfVertexArray_resize(v.CPtr(), vertexCount)
	return
}

func (v *VertexArray) SetPrimitiveType(primitiveType PrimitiveType) {
	C.sfVertexArray_setPrimitiveType(v.CPtr(), primitiveType)
	return
}

func (v *VertexBuffer) Bind() {
	C.sfVertexBuffer_bind(v.CPtr())
	return
}

func (v *VertexBuffer) Copy() *VertexBuffer {
	cval := unsafe.Pointer(C.sfVertexBuffer_copy(v.CPtr()))
	return &VertexBuffer{ptr: cval}
}

func VertexBufferCreate(vertexCount uint32, primitiveType PrimitiveType, usage VertexBufferUsage) *VertexBuffer {
	cval := unsafe.Pointer(C.sfVertexBuffer_create(vertexCount, primitiveType, usage))
	return &VertexBuffer{ptr: cval}
}

func (v *VertexBuffer) Destroy() {
	C.sfVertexBuffer_destroy(v.CPtr())
	return
}

func (v *VertexBuffer) GetNativeHandle() uint32 {
	return C.sfVertexBuffer_getNativeHandle(v.CPtr())
}

func (v *VertexBuffer) GetPrimitiveType() PrimitiveType {
	cval := unsafe.Pointer(C.sfVertexBuffer_getPrimitiveType(v.CPtr()))
	return &PrimitiveType{ptr: cval}
}

func (v *VertexBuffer) GetUsage() VertexBufferUsage {
	cval := unsafe.Pointer(C.sfVertexBuffer_getUsage(v.CPtr()))
	return &VertexBufferUsage{ptr: cval}
}

func (v *VertexBuffer) GetVertexCount() uint32 {
	return C.sfVertexBuffer_getVertexCount(v.CPtr())
}

func VertexBufferIsAvailable() bool {
	return C.sfVertexBuffer_isAvailable()
}

func (v *VertexBuffer) SetPrimitiveType(primitiveType PrimitiveType) {
	C.sfVertexBuffer_setPrimitiveType(v.CPtr(), primitiveType)
	return
}

func (v *VertexBuffer) SetUsage(usage VertexBufferUsage) {
	C.sfVertexBuffer_setUsage(v.CPtr(), usage)
	return
}

func (v *VertexBuffer) Swap(right *VertexBuffer) {
	C.sfVertexBuffer_swap(v.CPtr(), right)
	return
}

func (v *VertexBuffer) Update(vertices *Vertex, vertexCount int32, offset int32) bool {
	return C.sfVertexBuffer_update(v.CPtr(), vertices, vertexCount, offset)
}

func (v *VertexBuffer) UpdateFromVertexBuffer(other *VertexBuffer) bool {
	return C.sfVertexBuffer_updateFromVertexBuffer(v.CPtr(), other)
}

func VideoModeGetDesktopMode() VideoMode {
	cval := C.sfVideoMode_getDesktopMode()
	return VideoMode{Width: (cval.width), Height: (cval.height), BitsPerPixel: (cval.bitsperpixel)}
}

func VideoModeGetFullscreenModes(count int32) VideoMode {
	cval := C.sfVideoMode_getFullscreenModes(count)
	return VideoMode{Width: (cval.width), Height: (cval.height), BitsPerPixel: (cval.bitsperpixel)}
}

func (v VideoMode) IsValid() bool {
	return C.sfVideoMode_isValid(v)
}

func (v *View) Copy() *View {
	cval := unsafe.Pointer(C.sfView_copy(v.CPtr()))
	return &View{ptr: cval}
}

func ViewCreate() *View {
	cval := unsafe.Pointer(C.sfView_create())
	return &View{ptr: cval}
}

func ViewCreateFromRect(rectangle FloatRect) *View {
	cval := unsafe.Pointer(C.sfView_createFromRect(rectangle.ToC()))
	return &View{ptr: cval}
}

func (v *View) Destroy() {
	C.sfView_destroy(v.CPtr())
	return
}

func (v *View) GetCenter() Vector2f {
	cval := C.sfView_getCenter(v.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (v *View) GetRotation() float32 {
	return C.sfView_getRotation(v.CPtr())
}

func (v *View) GetSize() Vector2f {
	cval := C.sfView_getSize(v.CPtr())
	return Vector2f{X: float32(cval.x), Y: float32(cval.y)}
}

func (v *View) GetViewport() FloatRect {
	cval := C.sfView_getViewport(v.CPtr())
	return FloatRect{Left: (cval.left), Top: (cval.top), Width: (cval.width), Height: (cval.height)}
}

func (v *View) Move(offset Vector2f) {
	C.sfView_move(v.CPtr(), offset.ToC())
	return
}

func (v *View) Reset(rectangle FloatRect) {
	C.sfView_reset(v.CPtr(), rectangle.ToC())
	return
}

func (v *View) Rotate(angle int32) {
	C.sfView_rotate(v.CPtr(), angle)
	return
}

func (v *View) SetCenter(center Vector2f) {
	C.sfView_setCenter(v.CPtr(), center.ToC())
	return
}

func (v *View) SetRotation(angle int32) {
	C.sfView_setRotation(v.CPtr(), angle)
	return
}

func (v *View) SetSize(size Vector2f) {
	C.sfView_setSize(v.CPtr(), size.ToC())
	return
}

func (v *View) SetViewport(viewport FloatRect) {
	C.sfView_setViewport(v.CPtr(), viewport.ToC())
	return
}

func (v *View) Zoom(factor int32) {
	C.sfView_zoom(v.CPtr(), factor)
	return
}

func VulkanGetFunction(name string) VulkanFunctionPointer {
	cval := unsafe.Pointer(C.sfVulkan_getFunction(C.CString(name)))
	return &VulkanFunctionPointer{ptr: cval}
}

func VulkanGetGraphicsRequiredInstanceExtensions(count int32) int32 {
	return C.sfVulkan_getGraphicsRequiredInstanceExtensions(count)
}

func VulkanIsAvailable(requireGraphics bool) bool {
	return C.sfVulkan_isAvailable(requireGraphics)
}

func (w *WindowBase) Close() {
	C.sfWindowBase_close(w.CPtr())
	return
}

func WindowBaseCreate(mode VideoMode, title string, style uint32) *WindowBase {
	cval := unsafe.Pointer(C.sfWindowBase_create(mode.ToC(), C.CString(title), style))
	return &WindowBase{ptr: cval}
}

func WindowBaseCreateFromHandle(handle uintptr) *WindowBase {
	cval := unsafe.Pointer(C.sfWindowBase_createFromHandle(handle))
	return &WindowBase{ptr: cval}
}

func WindowBaseCreateUnicode(mode VideoMode, title uint32, style uint32) *WindowBase {
	cval := unsafe.Pointer(C.sfWindowBase_createUnicode(mode.ToC(), title, style))
	return &WindowBase{ptr: cval}
}

func (w *WindowBase) CreateVulkanSurface(instance int32, surface int32, allocator int32) bool {
	return C.sfWindowBase_createVulkanSurface(w.CPtr(), instance, surface, allocator)
}

func (w *WindowBase) Destroy() {
	C.sfWindowBase_destroy(w.CPtr())
	return
}

func (w *WindowBase) GetPosition() Vector2i {
	cval := C.sfWindowBase_getPosition(w.CPtr())
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (w *WindowBase) GetSize() Vector2u {
	cval := C.sfWindowBase_getSize(w.CPtr())
	return Vector2u{X: uint32(cval.x), Y: uint32(cval.y)}
}

func (w *WindowBase) GetSystemHandle() int32 {
	return C.sfWindowBase_getSystemHandle(w.CPtr())
}

func (w *WindowBase) HasFocus() bool {
	return C.sfWindowBase_hasFocus(w.CPtr())
}

func (w *WindowBase) IsOpen() bool {
	return C.sfWindowBase_isOpen(w.CPtr())
}

func (w *WindowBase) PollEvent(event *Event) bool {
	return C.sfWindowBase_pollEvent(w.CPtr(), event)
}

func (w *WindowBase) RequestFocus() {
	C.sfWindowBase_requestFocus(w.CPtr())
	return
}

func (w *WindowBase) SetIcon(width int32, height int32, pixels int32) {
	C.sfWindowBase_setIcon(w.CPtr(), width, height, pixels)
	return
}

func (w *WindowBase) SetJoystickThreshold(threshold int32) {
	C.sfWindowBase_setJoystickThreshold(w.CPtr(), threshold)
	return
}

func (w *WindowBase) SetKeyRepeatEnabled(enabled int32) {
	C.sfWindowBase_setKeyRepeatEnabled(w.CPtr(), enabled)
	return
}

func (w *WindowBase) SetMouseCursor(cursor *Cursor) {
	C.sfWindowBase_setMouseCursor(w.CPtr(), cursor)
	return
}

func (w *WindowBase) SetMouseCursorGrabbed(grabbed int32) {
	C.sfWindowBase_setMouseCursorGrabbed(w.CPtr(), grabbed)
	return
}

func (w *WindowBase) SetMouseCursorVisible(visible int32) {
	C.sfWindowBase_setMouseCursorVisible(w.CPtr(), visible)
	return
}

func (w *WindowBase) SetPosition(position Vector2i) {
	C.sfWindowBase_setPosition(w.CPtr(), position.ToC())
	return
}

func (w *WindowBase) SetSize(size Vector2u) {
	C.sfWindowBase_setSize(w.CPtr(), size.ToC())
	return
}

func (w *WindowBase) SetTitle(title int32) {
	C.sfWindowBase_setTitle(w.CPtr(), C.CString(title))
	return
}

func (w *WindowBase) SetUnicodeTitle(title int32) {
	C.sfWindowBase_setUnicodeTitle(w.CPtr(), title)
	return
}

func (w *WindowBase) SetVisible(visible int32) {
	C.sfWindowBase_setVisible(w.CPtr(), visible)
	return
}

func (w *WindowBase) WaitEvent(event *Event) bool {
	return C.sfWindowBase_waitEvent(w.CPtr(), event)
}

func (w *Window) Close() {
	C.sfWindow_close(w.CPtr())
	return
}

func WindowCreate(mode VideoMode, title string, style uint32, settings *ContextSettings) *Window {
	cval := unsafe.Pointer(C.sfWindow_create(mode.ToC(), C.CString(title), style, settings))
	return &Window{ptr: cval}
}

func WindowCreateFromHandle(handle uintptr, settings *ContextSettings) *Window {
	cval := unsafe.Pointer(C.sfWindow_createFromHandle(handle, settings))
	return &Window{ptr: cval}
}

func WindowCreateUnicode(mode VideoMode, title uint32, style uint32, settings *ContextSettings) *Window {
	cval := unsafe.Pointer(C.sfWindow_createUnicode(mode.ToC(), title, style, settings))
	return &Window{ptr: cval}
}

func (w *Window) CreateVulkanSurface(instance int32, surface int32, allocator int32) bool {
	return C.sfWindow_createVulkanSurface(w.CPtr(), instance, surface, allocator)
}

func (w *Window) Destroy() {
	C.sfWindow_destroy(w.CPtr())
	return
}

func (w *Window) Display() {
	C.sfWindow_display(w.CPtr())
	return
}

func (w *Window) GetPosition() Vector2i {
	cval := C.sfWindow_getPosition(w.CPtr())
	return Vector2i{X: int32(cval.x), Y: int32(cval.y)}
}

func (w *Window) GetSettings() ContextSettings {
	cval := C.sfWindow_getSettings(w.CPtr())
	return ContextSettings{DepthBits: (cval.depthbits), StencilBits: (cval.stencilbits), AntialiasingLevel: (cval.antialiasinglevel), MajorVersion: (cval.majorversion), MinorVersion: (cval.minorversion), AttributeFlags: (cval.attributeflags), SRgbCapable: (cval.srgbcapable)}
}

func (w *Window) GetSize() Vector2u {
	cval := C.sfWindow_getSize(w.CPtr())
	return Vector2u{X: uint32(cval.x), Y: uint32(cval.y)}
}

func (w *Window) GetSystemHandle() int32 {
	return C.sfWindow_getSystemHandle(w.CPtr())
}

func (w *Window) HasFocus() bool {
	return C.sfWindow_hasFocus(w.CPtr())
}

func (w *Window) IsOpen() bool {
	return C.sfWindow_isOpen(w.CPtr())
}

func (w *Window) PollEvent(event *Event) bool {
	return C.sfWindow_pollEvent(w.CPtr(), event)
}

func (w *Window) RequestFocus() {
	C.sfWindow_requestFocus(w.CPtr())
	return
}

func (w *Window) SetActive(active int32) bool {
	return C.sfWindow_setActive(w.CPtr(), active)
}

func (w *Window) SetFramerateLimit(limit int32) {
	C.sfWindow_setFramerateLimit(w.CPtr(), limit)
	return
}

func (w *Window) SetIcon(width int32, height int32, pixels int32) {
	C.sfWindow_setIcon(w.CPtr(), width, height, pixels)
	return
}

func (w *Window) SetJoystickThreshold(threshold int32) {
	C.sfWindow_setJoystickThreshold(w.CPtr(), threshold)
	return
}

func (w *Window) SetKeyRepeatEnabled(enabled int32) {
	C.sfWindow_setKeyRepeatEnabled(w.CPtr(), enabled)
	return
}

func (w *Window) SetMouseCursor(cursor *Cursor) {
	C.sfWindow_setMouseCursor(w.CPtr(), cursor)
	return
}

func (w *Window) SetMouseCursorGrabbed(grabbed int32) {
	C.sfWindow_setMouseCursorGrabbed(w.CPtr(), grabbed)
	return
}

func (w *Window) SetMouseCursorVisible(visible int32) {
	C.sfWindow_setMouseCursorVisible(w.CPtr(), visible)
	return
}

func (w *Window) SetPosition(position Vector2i) {
	C.sfWindow_setPosition(w.CPtr(), position.ToC())
	return
}

func (w *Window) SetSize(size Vector2u) {
	C.sfWindow_setSize(w.CPtr(), size.ToC())
	return
}

func (w *Window) SetTitle(title int32) {
	C.sfWindow_setTitle(w.CPtr(), C.CString(title))
	return
}

func (w *Window) SetUnicodeTitle(title int32) {
	C.sfWindow_setUnicodeTitle(w.CPtr(), title)
	return
}

func (w *Window) SetVerticalSyncEnabled(enabled int32) {
	C.sfWindow_setVerticalSyncEnabled(w.CPtr(), enabled)
	return
}

func (w *Window) SetVisible(visible int32) {
	C.sfWindow_setVisible(w.CPtr(), visible)
	return
}

func (w *Window) WaitEvent(event *Event) bool {
	return C.sfWindow_waitEvent(w.CPtr(), event)
}

