// Code generated by go-sfml. DO NOT EDIT.

package sfml

import (
	"C"
)

func BufferCreate() int32 {
	return C.sfBuffer_create()
}

func (b *Buffer) Destroy() int32 {
	return C.sfBuffer_destroy(b.CPtr())
}

func (b *Buffer) GetData() int32 {
	return C.sfBuffer_getData(b.CPtr())
}

func (b *Buffer) GetSize() int32 {
	return C.sfBuffer_getSize(b.CPtr())
}

func (c *CircleShape) Copy() int32 {
	return C.sfCircleShape_copy(c.CPtr())
}

func CircleShapeCreate() int32 {
	return C.sfCircleShape_create()
}

func (c *CircleShape) Destroy() int32 {
	return C.sfCircleShape_destroy(c.CPtr())
}

func (c *CircleShape) GetFillColor() int32 {
	return C.sfCircleShape_getFillColor(c.CPtr())
}

func (c *CircleShape) GetGlobalBounds() int32 {
	return C.sfCircleShape_getGlobalBounds(c.CPtr())
}

func (c *CircleShape) GetInverseTransform() int32 {
	return C.sfCircleShape_getInverseTransform(c.CPtr())
}

func (c *CircleShape) GetLocalBounds() int32 {
	return C.sfCircleShape_getLocalBounds(c.CPtr())
}

func (c *CircleShape) GetOrigin() int32 {
	return C.sfCircleShape_getOrigin(c.CPtr())
}

func (c *CircleShape) GetOutlineColor() int32 {
	return C.sfCircleShape_getOutlineColor(c.CPtr())
}

func (c *CircleShape) GetOutlineThickness() int32 {
	return C.sfCircleShape_getOutlineThickness(c.CPtr())
}

func (c *CircleShape) GetPoint(index int32) int32 {
	return C.sfCircleShape_getPoint(c.CPtr(), index)
}

func (c *CircleShape) GetPointCount() int32 {
	return C.sfCircleShape_getPointCount(c.CPtr())
}

func (c *CircleShape) GetPosition() int32 {
	return C.sfCircleShape_getPosition(c.CPtr())
}

func (c *CircleShape) GetRadius() int32 {
	return C.sfCircleShape_getRadius(c.CPtr())
}

func (c *CircleShape) GetRotation() int32 {
	return C.sfCircleShape_getRotation(c.CPtr())
}

func (c *CircleShape) GetScale() int32 {
	return C.sfCircleShape_getScale(c.CPtr())
}

func (c *CircleShape) GetTexture() int32 {
	return C.sfCircleShape_getTexture(c.CPtr())
}

func (c *CircleShape) GetTextureRect() int32 {
	return C.sfCircleShape_getTextureRect(c.CPtr())
}

func (c *CircleShape) GetTransform() int32 {
	return C.sfCircleShape_getTransform(c.CPtr())
}

func (c *CircleShape) Move(offset Vector2f) int32 {
	return C.sfCircleShape_move(c.CPtr(), offset.ToC())
}

func (c *CircleShape) Rotate(angle int32) int32 {
	return C.sfCircleShape_rotate(c.CPtr(), angle)
}

func (c *CircleShape) Scale(factors Vector2f) int32 {
	return C.sfCircleShape_scale(c.CPtr(), factors.ToC())
}

func (c *CircleShape) SetFillColor(color Color) int32 {
	return C.sfCircleShape_setFillColor(c.CPtr(), color)
}

func (c *CircleShape) SetOrigin(origin Vector2f) int32 {
	return C.sfCircleShape_setOrigin(c.CPtr(), origin.ToC())
}

func (c *CircleShape) SetOutlineColor(color Color) int32 {
	return C.sfCircleShape_setOutlineColor(c.CPtr(), color)
}

func (c *CircleShape) SetOutlineThickness(thickness int32) int32 {
	return C.sfCircleShape_setOutlineThickness(c.CPtr(), thickness)
}

func (c *CircleShape) SetPointCount(count int32) int32 {
	return C.sfCircleShape_setPointCount(c.CPtr(), count)
}

func (c *CircleShape) SetPosition(position Vector2f) int32 {
	return C.sfCircleShape_setPosition(c.CPtr(), position.ToC())
}

func (c *CircleShape) SetRadius(radius int32) int32 {
	return C.sfCircleShape_setRadius(c.CPtr(), radius)
}

func (c *CircleShape) SetRotation(angle int32) int32 {
	return C.sfCircleShape_setRotation(c.CPtr(), angle)
}

func (c *CircleShape) SetScale(scale Vector2f) int32 {
	return C.sfCircleShape_setScale(c.CPtr(), scale.ToC())
}

func (c *CircleShape) SetTexture(texture *Texture, resetRect int32) int32 {
	return C.sfCircleShape_setTexture(c.CPtr(), texture, resetRect)
}

func (c *CircleShape) SetTextureRect(rect IntRect) int32 {
	return C.sfCircleShape_setTextureRect(c.CPtr(), rect)
}

func ClipboardGetString() int32 {
	return C.sfClipboard_getString()
}

func ClipboardGetUnicodeString() int32 {
	return C.sfClipboard_getUnicodeString()
}

func ClipboardSetString(text byte) int32 {
	return C.sfClipboard_setString(text)
}

func ClipboardSetUnicodeString(text uint32) int32 {
	return C.sfClipboard_setUnicodeString(text)
}

func (c *Clock) Copy() int32 {
	return C.sfClock_copy(c.CPtr())
}

func ClockCreate() int32 {
	return C.sfClock_create()
}

func (c *Clock) Destroy() int32 {
	return C.sfClock_destroy(c.CPtr())
}

func (c *Clock) GetElapsedTime() int32 {
	return C.sfClock_getElapsedTime(c.CPtr())
}

func (c *Clock) Restart() int32 {
	return C.sfClock_restart(c.CPtr())
}

func (c Color) Add(color2 Color) int32 {
	return C.sfColor_add(c, color2)
}

func ColorFromInteger(color uint32) int32 {
	return C.sfColor_fromInteger(color)
}

func ColorFromRgb(red uint8, green uint8, blue uint8) int32 {
	return C.sfColor_fromRGB(red, green, blue)
}

func ColorFromRgba(red uint8, green uint8, blue uint8, alpha uint8) int32 {
	return C.sfColor_fromRGBA(red, green, blue, alpha)
}

func (c Color) Modulate(color2 Color) int32 {
	return C.sfColor_modulate(c, color2)
}

func (c Color) Subtract(color2 Color) int32 {
	return C.sfColor_subtract(c, color2)
}

func (c Color) ToInteger() int32 {
	return C.sfColor_toInteger(c)
}

func ContextCreate() int32 {
	return C.sfContext_create()
}

func (c *Context) Destroy() int32 {
	return C.sfContext_destroy(c.CPtr())
}

func ContextGetActiveContextId() int32 {
	return C.sfContext_getActiveContextId()
}

func ContextGetFunction(name byte) int32 {
	return C.sfContext_getFunction(name)
}

func (c *Context) GetSettings() int32 {
	return C.sfContext_getSettings(c.CPtr())
}

func ContextIsExtensionAvailable(name byte) int32 {
	return C.sfContext_isExtensionAvailable(name)
}

func (c *Context) SetActive(active int32) int32 {
	return C.sfContext_setActive(c.CPtr(), active)
}

func (c *ConvexShape) Copy() int32 {
	return C.sfConvexShape_copy(c.CPtr())
}

func ConvexShapeCreate() int32 {
	return C.sfConvexShape_create()
}

func (c *ConvexShape) Destroy() int32 {
	return C.sfConvexShape_destroy(c.CPtr())
}

func (c *ConvexShape) GetFillColor() int32 {
	return C.sfConvexShape_getFillColor(c.CPtr())
}

func (c *ConvexShape) GetGlobalBounds() int32 {
	return C.sfConvexShape_getGlobalBounds(c.CPtr())
}

func (c *ConvexShape) GetInverseTransform() int32 {
	return C.sfConvexShape_getInverseTransform(c.CPtr())
}

func (c *ConvexShape) GetLocalBounds() int32 {
	return C.sfConvexShape_getLocalBounds(c.CPtr())
}

func (c *ConvexShape) GetOrigin() int32 {
	return C.sfConvexShape_getOrigin(c.CPtr())
}

func (c *ConvexShape) GetOutlineColor() int32 {
	return C.sfConvexShape_getOutlineColor(c.CPtr())
}

func (c *ConvexShape) GetOutlineThickness() int32 {
	return C.sfConvexShape_getOutlineThickness(c.CPtr())
}

func (c *ConvexShape) GetPoint(index int32) int32 {
	return C.sfConvexShape_getPoint(c.CPtr(), index)
}

func (c *ConvexShape) GetPointCount() int32 {
	return C.sfConvexShape_getPointCount(c.CPtr())
}

func (c *ConvexShape) GetPosition() int32 {
	return C.sfConvexShape_getPosition(c.CPtr())
}

func (c *ConvexShape) GetRotation() int32 {
	return C.sfConvexShape_getRotation(c.CPtr())
}

func (c *ConvexShape) GetScale() int32 {
	return C.sfConvexShape_getScale(c.CPtr())
}

func (c *ConvexShape) GetTexture() int32 {
	return C.sfConvexShape_getTexture(c.CPtr())
}

func (c *ConvexShape) GetTextureRect() int32 {
	return C.sfConvexShape_getTextureRect(c.CPtr())
}

func (c *ConvexShape) GetTransform() int32 {
	return C.sfConvexShape_getTransform(c.CPtr())
}

func (c *ConvexShape) Move(offset Vector2f) int32 {
	return C.sfConvexShape_move(c.CPtr(), offset.ToC())
}

func (c *ConvexShape) Rotate(angle int32) int32 {
	return C.sfConvexShape_rotate(c.CPtr(), angle)
}

func (c *ConvexShape) Scale(factors Vector2f) int32 {
	return C.sfConvexShape_scale(c.CPtr(), factors.ToC())
}

func (c *ConvexShape) SetFillColor(color Color) int32 {
	return C.sfConvexShape_setFillColor(c.CPtr(), color)
}

func (c *ConvexShape) SetOrigin(origin Vector2f) int32 {
	return C.sfConvexShape_setOrigin(c.CPtr(), origin.ToC())
}

func (c *ConvexShape) SetOutlineColor(color Color) int32 {
	return C.sfConvexShape_setOutlineColor(c.CPtr(), color)
}

func (c *ConvexShape) SetOutlineThickness(thickness int32) int32 {
	return C.sfConvexShape_setOutlineThickness(c.CPtr(), thickness)
}

func (c *ConvexShape) SetPoint(index int32, point Vector2f) int32 {
	return C.sfConvexShape_setPoint(c.CPtr(), index, point.ToC())
}

func (c *ConvexShape) SetPointCount(count int32) int32 {
	return C.sfConvexShape_setPointCount(c.CPtr(), count)
}

func (c *ConvexShape) SetPosition(position Vector2f) int32 {
	return C.sfConvexShape_setPosition(c.CPtr(), position.ToC())
}

func (c *ConvexShape) SetRotation(angle int32) int32 {
	return C.sfConvexShape_setRotation(c.CPtr(), angle)
}

func (c *ConvexShape) SetScale(scale Vector2f) int32 {
	return C.sfConvexShape_setScale(c.CPtr(), scale.ToC())
}

func (c *ConvexShape) SetTexture(texture *Texture, resetRect int32) int32 {
	return C.sfConvexShape_setTexture(c.CPtr(), texture, resetRect)
}

func (c *ConvexShape) SetTextureRect(rect IntRect) int32 {
	return C.sfConvexShape_setTextureRect(c.CPtr(), rect)
}

func CursorCreateFromPixels(pixels uint8, size Vector2u, hotspot Vector2u) int32 {
	return C.sfCursor_createFromPixels(pixels, size.ToC(), hotspot.ToC())
}

func CursorCreateFromSystem(cursorType CursorType) int32 {
	return C.sfCursor_createFromSystem(cursorType)
}

func (c *Cursor) Destroy() int32 {
	return C.sfCursor_destroy(c.CPtr())
}

func (f *FloatRect) Contains(x int32, y int32) int32 {
	return C.sfFloatRect_contains(f.CPtr(), x, y)
}

func (f *FloatRect) GetPosition() int32 {
	return C.sfFloatRect_getPosition(f.CPtr())
}

func (f *FloatRect) GetSize() int32 {
	return C.sfFloatRect_getSize(f.CPtr())
}

func (f *FloatRect) Intersects(rect2 *FloatRect, intersection *FloatRect) int32 {
	return C.sfFloatRect_intersects(f.CPtr(), rect2, intersection)
}

func (f *Font) Copy() int32 {
	return C.sfFont_copy(f.CPtr())
}

func FontCreateFromFile(filename byte) int32 {
	return C.sfFont_createFromFile(filename)
}

func FontCreateFromMemory(data int32, sizeInBytes int32) int32 {
	return C.sfFont_createFromMemory(data, sizeInBytes)
}

func FontCreateFromStream(stream *InputStream) int32 {
	return C.sfFont_createFromStream(stream)
}

func (f *Font) Destroy() int32 {
	return C.sfFont_destroy(f.CPtr())
}

func (f *Font) GetBoldKerning(first int32, second int32, characterSize int32) int32 {
	return C.sfFont_getBoldKerning(f.CPtr(), first, second, characterSize)
}

func (f *Font) GetGlyph(codePoint int32, characterSize int32, bold int32, outlineThickness int32) int32 {
	return C.sfFont_getGlyph(f.CPtr(), codePoint, characterSize, bold, outlineThickness)
}

func (f *Font) GetInfo() int32 {
	return C.sfFont_getInfo(f.CPtr())
}

func (f *Font) GetKerning(first int32, second int32, characterSize int32) int32 {
	return C.sfFont_getKerning(f.CPtr(), first, second, characterSize)
}

func (f *Font) GetLineSpacing(characterSize int32) int32 {
	return C.sfFont_getLineSpacing(f.CPtr(), characterSize)
}

func (f *Font) GetTexture(characterSize int32) int32 {
	return C.sfFont_getTexture(f.CPtr(), characterSize)
}

func (f *Font) GetUnderlinePosition(characterSize int32) int32 {
	return C.sfFont_getUnderlinePosition(f.CPtr(), characterSize)
}

func (f *Font) GetUnderlineThickness(characterSize int32) int32 {
	return C.sfFont_getUnderlineThickness(f.CPtr(), characterSize)
}

func (f *Font) HasGlyph(codePoint int32) int32 {
	return C.sfFont_hasGlyph(f.CPtr(), codePoint)
}

func (f *Font) IsSmooth() int32 {
	return C.sfFont_isSmooth(f.CPtr())
}

func (f *Font) SetSmooth(smooth int32) int32 {
	return C.sfFont_setSmooth(f.CPtr(), smooth)
}

func (f *FtpDirectoryResponse) Destroy() int32 {
	return C.sfFtpDirectoryResponse_destroy(f.CPtr())
}

func (f *FtpDirectoryResponse) GetDirectory() int32 {
	return C.sfFtpDirectoryResponse_getDirectory(f.CPtr())
}

func (f *FtpDirectoryResponse) GetMessage() int32 {
	return C.sfFtpDirectoryResponse_getMessage(f.CPtr())
}

func (f *FtpDirectoryResponse) GetStatus() int32 {
	return C.sfFtpDirectoryResponse_getStatus(f.CPtr())
}

func (f *FtpDirectoryResponse) IsOk() int32 {
	return C.sfFtpDirectoryResponse_isOk(f.CPtr())
}

func (f *FtpListingResponse) Destroy() int32 {
	return C.sfFtpListingResponse_destroy(f.CPtr())
}

func (f *FtpListingResponse) GetCount() int32 {
	return C.sfFtpListingResponse_getCount(f.CPtr())
}

func (f *FtpListingResponse) GetMessage() int32 {
	return C.sfFtpListingResponse_getMessage(f.CPtr())
}

func (f *FtpListingResponse) GetName(index int32) int32 {
	return C.sfFtpListingResponse_getName(f.CPtr(), index)
}

func (f *FtpListingResponse) GetStatus() int32 {
	return C.sfFtpListingResponse_getStatus(f.CPtr())
}

func (f *FtpListingResponse) IsOk() int32 {
	return C.sfFtpListingResponse_isOk(f.CPtr())
}

func (f *FtpResponse) Destroy() int32 {
	return C.sfFtpResponse_destroy(f.CPtr())
}

func (f *FtpResponse) GetMessage() int32 {
	return C.sfFtpResponse_getMessage(f.CPtr())
}

func (f *FtpResponse) GetStatus() int32 {
	return C.sfFtpResponse_getStatus(f.CPtr())
}

func (f *FtpResponse) IsOk() int32 {
	return C.sfFtpResponse_isOk(f.CPtr())
}

func (f *Ftp) ChangeDirectory(directory int32) int32 {
	return C.sfFtp_changeDirectory(f.CPtr(), directory)
}

func (f *Ftp) Connect(server IpAddress, port int32, timeout Time) int32 {
	return C.sfFtp_connect(f.CPtr(), server, port, timeout)
}

func FtpCreate() int32 {
	return C.sfFtp_create()
}

func (f *Ftp) CreateDirectory(name int32) int32 {
	return C.sfFtp_createDirectory(f.CPtr(), name)
}

func (f *Ftp) DeleteDirectory(name int32) int32 {
	return C.sfFtp_deleteDirectory(f.CPtr(), name)
}

func (f *Ftp) DeleteFile(name int32) int32 {
	return C.sfFtp_deleteFile(f.CPtr(), name)
}

func (f *Ftp) Destroy() int32 {
	return C.sfFtp_destroy(f.CPtr())
}

func (f *Ftp) Disconnect() int32 {
	return C.sfFtp_disconnect(f.CPtr())
}

func (f *Ftp) Download(remoteFile int32, localPath int32, mode FtpTransferMode) int32 {
	return C.sfFtp_download(f.CPtr(), remoteFile, localPath, mode)
}

func (f *Ftp) GetDirectoryListing(directory int32) int32 {
	return C.sfFtp_getDirectoryListing(f.CPtr(), directory)
}

func (f *Ftp) GetWorkingDirectory() int32 {
	return C.sfFtp_getWorkingDirectory(f.CPtr())
}

func (f *Ftp) KeepAlive() int32 {
	return C.sfFtp_keepAlive(f.CPtr())
}

func (f *Ftp) Login(name int32, password int32) int32 {
	return C.sfFtp_login(f.CPtr(), name, password)
}

func (f *Ftp) LoginAnonymous() int32 {
	return C.sfFtp_loginAnonymous(f.CPtr())
}

func (f *Ftp) ParentDirectory() int32 {
	return C.sfFtp_parentDirectory(f.CPtr())
}

func (f *Ftp) RenameFile(file int32, newName int32) int32 {
	return C.sfFtp_renameFile(f.CPtr(), file, newName)
}

func (f *Ftp) SendCommand(command int32, parameter int32) int32 {
	return C.sfFtp_sendCommand(f.CPtr(), command, parameter)
}

func (f *Ftp) Upload(localFile int32, remotePath int32, mode FtpTransferMode, append int32) int32 {
	return C.sfFtp_upload(f.CPtr(), localFile, remotePath, mode, append)
}

func HttpRequestCreate() int32 {
	return C.sfHttpRequest_create()
}

func (h *HttpRequest) Destroy() int32 {
	return C.sfHttpRequest_destroy(h.CPtr())
}

func (h *HttpRequest) SetBody(body int32) int32 {
	return C.sfHttpRequest_setBody(h.CPtr(), body)
}

func (h *HttpRequest) SetField(field int32, value int32) int32 {
	return C.sfHttpRequest_setField(h.CPtr(), field, value)
}

func (h *HttpRequest) SetHttpVersion(major int32, minor int32) int32 {
	return C.sfHttpRequest_setHttpVersion(h.CPtr(), major, minor)
}

func (h *HttpRequest) SetMethod(method HttpMethod) int32 {
	return C.sfHttpRequest_setMethod(h.CPtr(), method)
}

func (h *HttpRequest) SetUri(uri int32) int32 {
	return C.sfHttpRequest_setUri(h.CPtr(), uri)
}

func (h *HttpResponse) Destroy() int32 {
	return C.sfHttpResponse_destroy(h.CPtr())
}

func (h *HttpResponse) GetBody() int32 {
	return C.sfHttpResponse_getBody(h.CPtr())
}

func (h *HttpResponse) GetField(field int32) int32 {
	return C.sfHttpResponse_getField(h.CPtr(), field)
}

func (h *HttpResponse) GetMajorVersion() int32 {
	return C.sfHttpResponse_getMajorVersion(h.CPtr())
}

func (h *HttpResponse) GetMinorVersion() int32 {
	return C.sfHttpResponse_getMinorVersion(h.CPtr())
}

func (h *HttpResponse) GetStatus() int32 {
	return C.sfHttpResponse_getStatus(h.CPtr())
}

func HttpCreate() int32 {
	return C.sfHttp_create()
}

func (h *Http) Destroy() int32 {
	return C.sfHttp_destroy(h.CPtr())
}

func (h *Http) SendRequest(request *HttpRequest, timeout Time) int32 {
	return C.sfHttp_sendRequest(h.CPtr(), request, timeout)
}

func (h *Http) SetHost(host int32, port int32) int32 {
	return C.sfHttp_setHost(h.CPtr(), host, port)
}

func (i *Image) Copy() int32 {
	return C.sfImage_copy(i.CPtr())
}

func (i *Image) CopyImage(source *Image, destX int32, destY int32, sourceRect IntRect, applyAlpha int32) int32 {
	return C.sfImage_copyImage(i.CPtr(), source, destX, destY, sourceRect, applyAlpha)
}

func ImageCreate(width uint32, height uint32) int32 {
	return C.sfImage_create(width, height)
}

func ImageCreateFromColor(width uint32, height uint32, color Color) int32 {
	return C.sfImage_createFromColor(width, height, color)
}

func ImageCreateFromFile(filename byte) int32 {
	return C.sfImage_createFromFile(filename)
}

func ImageCreateFromMemory(data int32, size int32) int32 {
	return C.sfImage_createFromMemory(data, size)
}

func ImageCreateFromPixels(width uint32, height uint32, pixels uint8) int32 {
	return C.sfImage_createFromPixels(width, height, pixels)
}

func ImageCreateFromStream(stream *InputStream) int32 {
	return C.sfImage_createFromStream(stream)
}

func (i *Image) CreateMaskFromColor(color Color, alpha int32) int32 {
	return C.sfImage_createMaskFromColor(i.CPtr(), color, alpha)
}

func (i *Image) Destroy() int32 {
	return C.sfImage_destroy(i.CPtr())
}

func (i *Image) FlipHorizontally() int32 {
	return C.sfImage_flipHorizontally(i.CPtr())
}

func (i *Image) FlipVertically() int32 {
	return C.sfImage_flipVertically(i.CPtr())
}

func (i *Image) GetPixel(x int32, y int32) int32 {
	return C.sfImage_getPixel(i.CPtr(), x, y)
}

func (i *Image) GetPixelsPtr() int32 {
	return C.sfImage_getPixelsPtr(i.CPtr())
}

func (i *Image) GetSize() int32 {
	return C.sfImage_getSize(i.CPtr())
}

func (i *Image) SaveToFile(filename int32) int32 {
	return C.sfImage_saveToFile(i.CPtr(), filename)
}

func (i *Image) SaveToMemory(output *Buffer, format int32) int32 {
	return C.sfImage_saveToMemory(i.CPtr(), output, format)
}

func (i *Image) SetPixel(x int32, y int32, color Color) int32 {
	return C.sfImage_setPixel(i.CPtr(), x, y, color)
}

func (i *IntRect) Contains(x int32, y int32) int32 {
	return C.sfIntRect_contains(i.CPtr(), x, y)
}

func (i *IntRect) GetPosition() int32 {
	return C.sfIntRect_getPosition(i.CPtr())
}

func (i *IntRect) GetSize() int32 {
	return C.sfIntRect_getSize(i.CPtr())
}

func (i *IntRect) Intersects(rect2 *IntRect, intersection *IntRect) int32 {
	return C.sfIntRect_intersects(i.CPtr(), rect2, intersection)
}

func IpAddressFromBytes(byte0 uint8, byte1 uint8, byte2 uint8, byte3 uint8) int32 {
	return C.sfIpAddress_fromBytes(byte0, byte1, byte2, byte3)
}

func IpAddressFromInteger(address uint32) int32 {
	return C.sfIpAddress_fromInteger(address)
}

func IpAddressFromString(address byte) int32 {
	return C.sfIpAddress_fromString(address)
}

func IpAddressGetLocalAddress() int32 {
	return C.sfIpAddress_getLocalAddress()
}

func IpAddressGetPublicAddress(timeout Time) int32 {
	return C.sfIpAddress_getPublicAddress(timeout)
}

func (i IpAddress) ToInteger() int32 {
	return C.sfIpAddress_toInteger(i)
}

func (i IpAddress) ToString(string int32) int32 {
	return C.sfIpAddress_toString(i, string)
}

func JoystickGetAxisPosition(joystick uint32, axis JoystickAxis) int32 {
	return C.sfJoystick_getAxisPosition(joystick, axis)
}

func JoystickGetButtonCount(joystick uint32) int32 {
	return C.sfJoystick_getButtonCount(joystick)
}

func JoystickGetIdentification(joystick uint32) int32 {
	return C.sfJoystick_getIdentification(joystick)
}

func JoystickHasAxis(joystick uint32, axis JoystickAxis) int32 {
	return C.sfJoystick_hasAxis(joystick, axis)
}

func JoystickIsButtonPressed(joystick uint32, button uint32) int32 {
	return C.sfJoystick_isButtonPressed(joystick, button)
}

func JoystickIsConnected(joystick uint32) int32 {
	return C.sfJoystick_isConnected(joystick)
}

func JoystickUpdate() int32 {
	return C.sfJoystick_update()
}

func KeyboardDelocalize(key KeyCode) int32 {
	return C.sfKeyboard_delocalize(key)
}

func KeyboardGetDescription(code Scancode) int32 {
	return C.sfKeyboard_getDescription(code)
}

func KeyboardIsKeyPressed(key KeyCode) int32 {
	return C.sfKeyboard_isKeyPressed(key)
}

func KeyboardIsScancodePressed(code Scancode) int32 {
	return C.sfKeyboard_isScancodePressed(code)
}

func KeyboardLocalize(code Scancode) int32 {
	return C.sfKeyboard_localize(code)
}

func KeyboardSetVirtualKeyboardVisible(visible bool) int32 {
	return C.sfKeyboard_setVirtualKeyboardVisible(visible)
}

func ListenerGetDirection() int32 {
	return C.sfListener_getDirection()
}

func ListenerGetGlobalVolume() int32 {
	return C.sfListener_getGlobalVolume()
}

func ListenerGetPosition() int32 {
	return C.sfListener_getPosition()
}

func ListenerGetUpVector() int32 {
	return C.sfListener_getUpVector()
}

func ListenerSetDirection(direction Vector3f) int32 {
	return C.sfListener_setDirection(direction.ToC())
}

func ListenerSetGlobalVolume(volume float32) int32 {
	return C.sfListener_setGlobalVolume(volume)
}

func ListenerSetPosition(position Vector3f) int32 {
	return C.sfListener_setPosition(position.ToC())
}

func ListenerSetUpVector(upVector Vector3f) int32 {
	return C.sfListener_setUpVector(upVector.ToC())
}

func MouseGetPosition(relativeTo *Window) int32 {
	return C.sfMouse_getPosition(relativeTo)
}

func MouseGetPositionRenderWindow(relativeTo *RenderWindow) int32 {
	return C.sfMouse_getPositionRenderWindow(relativeTo)
}

func MouseGetPositionWindowBase(relativeTo *WindowBase) int32 {
	return C.sfMouse_getPositionWindowBase(relativeTo)
}

func MouseIsButtonPressed(button MouseButton) int32 {
	return C.sfMouse_isButtonPressed(button)
}

func MouseSetPosition(position Vector2i, relativeTo *Window) int32 {
	return C.sfMouse_setPosition(position.ToC(), relativeTo)
}

func MouseSetPositionRenderWindow(position Vector2i, relativeTo *RenderWindow) int32 {
	return C.sfMouse_setPositionRenderWindow(position.ToC(), relativeTo)
}

func MouseSetPositionWindowBase(position Vector2i, relativeTo *WindowBase) int32 {
	return C.sfMouse_setPositionWindowBase(position.ToC(), relativeTo)
}

func MusicCreateFromFile(filename byte) int32 {
	return C.sfMusic_createFromFile(filename)
}

func MusicCreateFromMemory(data int32, sizeInBytes int32) int32 {
	return C.sfMusic_createFromMemory(data, sizeInBytes)
}

func MusicCreateFromStream(stream *InputStream) int32 {
	return C.sfMusic_createFromStream(stream)
}

func (m *Music) Destroy() int32 {
	return C.sfMusic_destroy(m.CPtr())
}

func (m *Music) GetAttenuation() int32 {
	return C.sfMusic_getAttenuation(m.CPtr())
}

func (m *Music) GetChannelCount() int32 {
	return C.sfMusic_getChannelCount(m.CPtr())
}

func (m *Music) GetDuration() int32 {
	return C.sfMusic_getDuration(m.CPtr())
}

func (m *Music) GetLoop() int32 {
	return C.sfMusic_getLoop(m.CPtr())
}

func (m *Music) GetLoopPoints() int32 {
	return C.sfMusic_getLoopPoints(m.CPtr())
}

func (m *Music) GetMinDistance() int32 {
	return C.sfMusic_getMinDistance(m.CPtr())
}

func (m *Music) GetPitch() int32 {
	return C.sfMusic_getPitch(m.CPtr())
}

func (m *Music) GetPlayingOffset() int32 {
	return C.sfMusic_getPlayingOffset(m.CPtr())
}

func (m *Music) GetPosition() int32 {
	return C.sfMusic_getPosition(m.CPtr())
}

func (m *Music) GetSampleRate() int32 {
	return C.sfMusic_getSampleRate(m.CPtr())
}

func (m *Music) GetStatus() int32 {
	return C.sfMusic_getStatus(m.CPtr())
}

func (m *Music) GetVolume() int32 {
	return C.sfMusic_getVolume(m.CPtr())
}

func (m *Music) IsRelativeToListener() int32 {
	return C.sfMusic_isRelativeToListener(m.CPtr())
}

func (m *Music) Pause() int32 {
	return C.sfMusic_pause(m.CPtr())
}

func (m *Music) Play() int32 {
	return C.sfMusic_play(m.CPtr())
}

func (m *Music) SetAttenuation(attenuation int32) int32 {
	return C.sfMusic_setAttenuation(m.CPtr(), attenuation)
}

func (m *Music) SetLoop(loop int32) int32 {
	return C.sfMusic_setLoop(m.CPtr(), loop)
}

func (m *Music) SetLoopPoints(timePoints TimeSpan) int32 {
	return C.sfMusic_setLoopPoints(m.CPtr(), timePoints)
}

func (m *Music) SetMinDistance(distance int32) int32 {
	return C.sfMusic_setMinDistance(m.CPtr(), distance)
}

func (m *Music) SetPitch(pitch int32) int32 {
	return C.sfMusic_setPitch(m.CPtr(), pitch)
}

func (m *Music) SetPlayingOffset(timeOffset Time) int32 {
	return C.sfMusic_setPlayingOffset(m.CPtr(), timeOffset)
}

func (m *Music) SetPosition(position Vector3f) int32 {
	return C.sfMusic_setPosition(m.CPtr(), position.ToC())
}

func (m *Music) SetRelativeToListener(relative int32) int32 {
	return C.sfMusic_setRelativeToListener(m.CPtr(), relative)
}

func (m *Music) SetVolume(volume int32) int32 {
	return C.sfMusic_setVolume(m.CPtr(), volume)
}

func (m *Music) Stop() int32 {
	return C.sfMusic_stop(m.CPtr())
}

func MutexCreate() int32 {
	return C.sfMutex_create()
}

func (m *Mutex) Destroy() int32 {
	return C.sfMutex_destroy(m.CPtr())
}

func (m *Mutex) Lock() int32 {
	return C.sfMutex_lock(m.CPtr())
}

func (m *Mutex) Unlock() int32 {
	return C.sfMutex_unlock(m.CPtr())
}

func (p *Packet) Append(data int32, sizeInBytes int32) int32 {
	return C.sfPacket_append(p.CPtr(), data, sizeInBytes)
}

func (p *Packet) CanRead() int32 {
	return C.sfPacket_canRead(p.CPtr())
}

func (p *Packet) Clear() int32 {
	return C.sfPacket_clear(p.CPtr())
}

func (p *Packet) Copy() int32 {
	return C.sfPacket_copy(p.CPtr())
}

func PacketCreate() int32 {
	return C.sfPacket_create()
}

func (p *Packet) Destroy() int32 {
	return C.sfPacket_destroy(p.CPtr())
}

func (p *Packet) EndOfPacket() int32 {
	return C.sfPacket_endOfPacket(p.CPtr())
}

func (p *Packet) GetData() int32 {
	return C.sfPacket_getData(p.CPtr())
}

func (p *Packet) GetDataSize() int32 {
	return C.sfPacket_getDataSize(p.CPtr())
}

func (p *Packet) GetReadPosition() int32 {
	return C.sfPacket_getReadPosition(p.CPtr())
}

func (p *Packet) ReadBool() int32 {
	return C.sfPacket_readBool(p.CPtr())
}

func (p *Packet) ReadDouble() int32 {
	return C.sfPacket_readDouble(p.CPtr())
}

func (p *Packet) ReadFloat() int32 {
	return C.sfPacket_readFloat(p.CPtr())
}

func (p *Packet) ReadInt16() int32 {
	return C.sfPacket_readInt16(p.CPtr())
}

func (p *Packet) ReadInt32() int32 {
	return C.sfPacket_readInt32(p.CPtr())
}

func (p *Packet) ReadInt8() int32 {
	return C.sfPacket_readInt8(p.CPtr())
}

func (p *Packet) ReadString(string int32) int32 {
	return C.sfPacket_readString(p.CPtr(), string)
}

func (p *Packet) ReadUint16() int32 {
	return C.sfPacket_readUint16(p.CPtr())
}

func (p *Packet) ReadUint32() int32 {
	return C.sfPacket_readUint32(p.CPtr())
}

func (p *Packet) ReadUint8() int32 {
	return C.sfPacket_readUint8(p.CPtr())
}

func (p *Packet) ReadWideString(string int32) int32 {
	return C.sfPacket_readWideString(p.CPtr(), string)
}

func (p *Packet) WriteBool(arg0 int32) int32 {
	return C.sfPacket_writeBool(p.CPtr(), arg0)
}

func (p *Packet) WriteDouble(arg0 int32) int32 {
	return C.sfPacket_writeDouble(p.CPtr(), arg0)
}

func (p *Packet) WriteFloat(arg0 int32) int32 {
	return C.sfPacket_writeFloat(p.CPtr(), arg0)
}

func (p *Packet) WriteInt16(arg0 int32) int32 {
	return C.sfPacket_writeInt16(p.CPtr(), arg0)
}

func (p *Packet) WriteInt32(arg0 int32) int32 {
	return C.sfPacket_writeInt32(p.CPtr(), arg0)
}

func (p *Packet) WriteInt8(arg0 int32) int32 {
	return C.sfPacket_writeInt8(p.CPtr(), arg0)
}

func (p *Packet) WriteString(string int32) int32 {
	return C.sfPacket_writeString(p.CPtr(), string)
}

func (p *Packet) WriteUint16(arg0 int32) int32 {
	return C.sfPacket_writeUint16(p.CPtr(), arg0)
}

func (p *Packet) WriteUint32(arg0 int32) int32 {
	return C.sfPacket_writeUint32(p.CPtr(), arg0)
}

func (p *Packet) WriteUint8(arg0 int32) int32 {
	return C.sfPacket_writeUint8(p.CPtr(), arg0)
}

func (p *Packet) WriteWideString(string int32) int32 {
	return C.sfPacket_writeWideString(p.CPtr(), string)
}

func (r *RectangleShape) Copy() int32 {
	return C.sfRectangleShape_copy(r.CPtr())
}

func RectangleShapeCreate() int32 {
	return C.sfRectangleShape_create()
}

func (r *RectangleShape) Destroy() int32 {
	return C.sfRectangleShape_destroy(r.CPtr())
}

func (r *RectangleShape) GetFillColor() int32 {
	return C.sfRectangleShape_getFillColor(r.CPtr())
}

func (r *RectangleShape) GetGlobalBounds() int32 {
	return C.sfRectangleShape_getGlobalBounds(r.CPtr())
}

func (r *RectangleShape) GetInverseTransform() int32 {
	return C.sfRectangleShape_getInverseTransform(r.CPtr())
}

func (r *RectangleShape) GetLocalBounds() int32 {
	return C.sfRectangleShape_getLocalBounds(r.CPtr())
}

func (r *RectangleShape) GetOrigin() int32 {
	return C.sfRectangleShape_getOrigin(r.CPtr())
}

func (r *RectangleShape) GetOutlineColor() int32 {
	return C.sfRectangleShape_getOutlineColor(r.CPtr())
}

func (r *RectangleShape) GetOutlineThickness() int32 {
	return C.sfRectangleShape_getOutlineThickness(r.CPtr())
}

func (r *RectangleShape) GetPoint(index int32) int32 {
	return C.sfRectangleShape_getPoint(r.CPtr(), index)
}

func (r *RectangleShape) GetPointCount() int32 {
	return C.sfRectangleShape_getPointCount(r.CPtr())
}

func (r *RectangleShape) GetPosition() int32 {
	return C.sfRectangleShape_getPosition(r.CPtr())
}

func (r *RectangleShape) GetRotation() int32 {
	return C.sfRectangleShape_getRotation(r.CPtr())
}

func (r *RectangleShape) GetScale() int32 {
	return C.sfRectangleShape_getScale(r.CPtr())
}

func (r *RectangleShape) GetSize() int32 {
	return C.sfRectangleShape_getSize(r.CPtr())
}

func (r *RectangleShape) GetTexture() int32 {
	return C.sfRectangleShape_getTexture(r.CPtr())
}

func (r *RectangleShape) GetTextureRect() int32 {
	return C.sfRectangleShape_getTextureRect(r.CPtr())
}

func (r *RectangleShape) GetTransform() int32 {
	return C.sfRectangleShape_getTransform(r.CPtr())
}

func (r *RectangleShape) Move(offset Vector2f) int32 {
	return C.sfRectangleShape_move(r.CPtr(), offset.ToC())
}

func (r *RectangleShape) Rotate(angle int32) int32 {
	return C.sfRectangleShape_rotate(r.CPtr(), angle)
}

func (r *RectangleShape) Scale(factors Vector2f) int32 {
	return C.sfRectangleShape_scale(r.CPtr(), factors.ToC())
}

func (r *RectangleShape) SetFillColor(color Color) int32 {
	return C.sfRectangleShape_setFillColor(r.CPtr(), color)
}

func (r *RectangleShape) SetOrigin(origin Vector2f) int32 {
	return C.sfRectangleShape_setOrigin(r.CPtr(), origin.ToC())
}

func (r *RectangleShape) SetOutlineColor(color Color) int32 {
	return C.sfRectangleShape_setOutlineColor(r.CPtr(), color)
}

func (r *RectangleShape) SetOutlineThickness(thickness int32) int32 {
	return C.sfRectangleShape_setOutlineThickness(r.CPtr(), thickness)
}

func (r *RectangleShape) SetPosition(position Vector2f) int32 {
	return C.sfRectangleShape_setPosition(r.CPtr(), position.ToC())
}

func (r *RectangleShape) SetRotation(angle int32) int32 {
	return C.sfRectangleShape_setRotation(r.CPtr(), angle)
}

func (r *RectangleShape) SetScale(scale Vector2f) int32 {
	return C.sfRectangleShape_setScale(r.CPtr(), scale.ToC())
}

func (r *RectangleShape) SetSize(size Vector2f) int32 {
	return C.sfRectangleShape_setSize(r.CPtr(), size.ToC())
}

func (r *RectangleShape) SetTexture(texture *Texture, resetRect int32) int32 {
	return C.sfRectangleShape_setTexture(r.CPtr(), texture, resetRect)
}

func (r *RectangleShape) SetTextureRect(rect IntRect) int32 {
	return C.sfRectangleShape_setTextureRect(r.CPtr(), rect)
}

func RenderStatesDefault() int32 {
	return C.sfRenderStates_default()
}

func (r *RenderTexture) Clear(color Color) int32 {
	return C.sfRenderTexture_clear(r.CPtr(), color)
}

func RenderTextureCreate(width uint32, height uint32, depthBuffer bool) int32 {
	return C.sfRenderTexture_create(width, height, depthBuffer)
}

func RenderTextureCreateWithSettings(width uint32, height uint32, settings *ContextSettings) int32 {
	return C.sfRenderTexture_createWithSettings(width, height, settings)
}

func (r *RenderTexture) Destroy() int32 {
	return C.sfRenderTexture_destroy(r.CPtr())
}

func (r *RenderTexture) Display() int32 {
	return C.sfRenderTexture_display(r.CPtr())
}

func (r *RenderTexture) DrawCircleShape(object *CircleShape, states *RenderStates) int32 {
	return C.sfRenderTexture_drawCircleShape(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawConvexShape(object *ConvexShape, states *RenderStates) int32 {
	return C.sfRenderTexture_drawConvexShape(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawPrimitives(vertices *Vertex, vertexCount int32, primitiveType PrimitiveType, states *RenderStates) int32 {
	return C.sfRenderTexture_drawPrimitives(r.CPtr(), vertices, vertexCount, primitiveType, states)
}

func (r *RenderTexture) DrawRectangleShape(object *RectangleShape, states *RenderStates) int32 {
	return C.sfRenderTexture_drawRectangleShape(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawShape(object *Shape, states *RenderStates) int32 {
	return C.sfRenderTexture_drawShape(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawSprite(object *Sprite, states *RenderStates) int32 {
	return C.sfRenderTexture_drawSprite(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawText(object *Text, states *RenderStates) int32 {
	return C.sfRenderTexture_drawText(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawVertexArray(object *VertexArray, states *RenderStates) int32 {
	return C.sfRenderTexture_drawVertexArray(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawVertexBuffer(object *VertexBuffer, states *RenderStates) int32 {
	return C.sfRenderTexture_drawVertexBuffer(r.CPtr(), object, states)
}

func (r *RenderTexture) DrawVertexBufferRange(object *VertexBuffer, firstVertex int32, vertexCount int32, states *RenderStates) int32 {
	return C.sfRenderTexture_drawVertexBufferRange(r.CPtr(), object, firstVertex, vertexCount, states)
}

func (r *RenderTexture) GenerateMipmap() int32 {
	return C.sfRenderTexture_generateMipmap(r.CPtr())
}

func (r *RenderTexture) GetDefaultView() int32 {
	return C.sfRenderTexture_getDefaultView(r.CPtr())
}

func RenderTextureGetMaximumAntialiasingLevel() int32 {
	return C.sfRenderTexture_getMaximumAntialiasingLevel()
}

func (r *RenderTexture) GetSize() int32 {
	return C.sfRenderTexture_getSize(r.CPtr())
}

func (r *RenderTexture) GetTexture() int32 {
	return C.sfRenderTexture_getTexture(r.CPtr())
}

func (r *RenderTexture) GetView() int32 {
	return C.sfRenderTexture_getView(r.CPtr())
}

func (r *RenderTexture) GetViewport(view *View) int32 {
	return C.sfRenderTexture_getViewport(r.CPtr(), view)
}

func (r *RenderTexture) IsRepeated() int32 {
	return C.sfRenderTexture_isRepeated(r.CPtr())
}

func (r *RenderTexture) IsSmooth() int32 {
	return C.sfRenderTexture_isSmooth(r.CPtr())
}

func (r *RenderTexture) IsSrgb() int32 {
	return C.sfRenderTexture_isSrgb(r.CPtr())
}

func (r *RenderTexture) MapCoordsToPixel(point Vector2f, view *View) int32 {
	return C.sfRenderTexture_mapCoordsToPixel(r.CPtr(), point.ToC(), view)
}

func (r *RenderTexture) MapPixelToCoords(point Vector2i, view *View) int32 {
	return C.sfRenderTexture_mapPixelToCoords(r.CPtr(), point.ToC(), view)
}

func (r *RenderTexture) PopGlsTates() int32 {
	return C.sfRenderTexture_popGLStates(r.CPtr())
}

func (r *RenderTexture) PushGlsTates() int32 {
	return C.sfRenderTexture_pushGLStates(r.CPtr())
}

func (r *RenderTexture) ResetGlsTates() int32 {
	return C.sfRenderTexture_resetGLStates(r.CPtr())
}

func (r *RenderTexture) SetActive(active int32) int32 {
	return C.sfRenderTexture_setActive(r.CPtr(), active)
}

func (r *RenderTexture) SetRepeated(repeated int32) int32 {
	return C.sfRenderTexture_setRepeated(r.CPtr(), repeated)
}

func (r *RenderTexture) SetSmooth(smooth int32) int32 {
	return C.sfRenderTexture_setSmooth(r.CPtr(), smooth)
}

func (r *RenderTexture) SetView(view *View) int32 {
	return C.sfRenderTexture_setView(r.CPtr(), view)
}

func (r *RenderWindow) Capture() int32 {
	return C.sfRenderWindow_capture(r.CPtr())
}

func (r *RenderWindow) Clear(color Color) int32 {
	return C.sfRenderWindow_clear(r.CPtr(), color)
}

func (r *RenderWindow) Close() int32 {
	return C.sfRenderWindow_close(r.CPtr())
}

func RenderWindowCreate(mode VideoMode, title byte, style uint32, settings *ContextSettings) int32 {
	return C.sfRenderWindow_create(mode.ToC(), title, style, settings)
}

func RenderWindowCreateFromHandle(handle uintptr, settings *ContextSettings) int32 {
	return C.sfRenderWindow_createFromHandle(handle, settings)
}

func RenderWindowCreateUnicode(mode VideoMode, title uint32, style uint32, settings *ContextSettings) int32 {
	return C.sfRenderWindow_createUnicode(mode.ToC(), title, style, settings)
}

func (r *RenderWindow) CreateVulkanSurface(instance int32, surface int32, allocator int32) int32 {
	return C.sfRenderWindow_createVulkanSurface(r.CPtr(), instance, surface, allocator)
}

func (r *RenderWindow) Destroy() int32 {
	return C.sfRenderWindow_destroy(r.CPtr())
}

func (r *RenderWindow) Display() int32 {
	return C.sfRenderWindow_display(r.CPtr())
}

func (r *RenderWindow) DrawCircleShape(object *CircleShape, states *RenderStates) int32 {
	return C.sfRenderWindow_drawCircleShape(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawConvexShape(object *ConvexShape, states *RenderStates) int32 {
	return C.sfRenderWindow_drawConvexShape(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawPrimitives(vertices *Vertex, vertexCount int32, primitiveType PrimitiveType, states *RenderStates) int32 {
	return C.sfRenderWindow_drawPrimitives(r.CPtr(), vertices, vertexCount, primitiveType, states)
}

func (r *RenderWindow) DrawRectangleShape(object *RectangleShape, states *RenderStates) int32 {
	return C.sfRenderWindow_drawRectangleShape(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawShape(object *Shape, states *RenderStates) int32 {
	return C.sfRenderWindow_drawShape(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawSprite(object *Sprite, states *RenderStates) int32 {
	return C.sfRenderWindow_drawSprite(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawText(object *Text, states *RenderStates) int32 {
	return C.sfRenderWindow_drawText(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawVertexArray(object *VertexArray, states *RenderStates) int32 {
	return C.sfRenderWindow_drawVertexArray(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawVertexBuffer(object *VertexBuffer, states *RenderStates) int32 {
	return C.sfRenderWindow_drawVertexBuffer(r.CPtr(), object, states)
}

func (r *RenderWindow) DrawVertexBufferRange(object *VertexBuffer, firstVertex int32, vertexCount int32, states *RenderStates) int32 {
	return C.sfRenderWindow_drawVertexBufferRange(r.CPtr(), object, firstVertex, vertexCount, states)
}

func (r *RenderWindow) GetDefaultView() int32 {
	return C.sfRenderWindow_getDefaultView(r.CPtr())
}

func (r *RenderWindow) GetPosition() int32 {
	return C.sfRenderWindow_getPosition(r.CPtr())
}

func (r *RenderWindow) GetSettings() int32 {
	return C.sfRenderWindow_getSettings(r.CPtr())
}

func (r *RenderWindow) GetSize() int32 {
	return C.sfRenderWindow_getSize(r.CPtr())
}

func (r *RenderWindow) GetSystemHandle() int32 {
	return C.sfRenderWindow_getSystemHandle(r.CPtr())
}

func (r *RenderWindow) GetView() int32 {
	return C.sfRenderWindow_getView(r.CPtr())
}

func (r *RenderWindow) GetViewport(view *View) int32 {
	return C.sfRenderWindow_getViewport(r.CPtr(), view)
}

func (r *RenderWindow) HasFocus() int32 {
	return C.sfRenderWindow_hasFocus(r.CPtr())
}

func (r *RenderWindow) IsOpen() int32 {
	return C.sfRenderWindow_isOpen(r.CPtr())
}

func (r *RenderWindow) IsSrgb() int32 {
	return C.sfRenderWindow_isSrgb(r.CPtr())
}

func (r *RenderWindow) MapCoordsToPixel(point Vector2f, view *View) int32 {
	return C.sfRenderWindow_mapCoordsToPixel(r.CPtr(), point.ToC(), view)
}

func (r *RenderWindow) MapPixelToCoords(point Vector2i, view *View) int32 {
	return C.sfRenderWindow_mapPixelToCoords(r.CPtr(), point.ToC(), view)
}

func (r *RenderWindow) PollEvent(event *Event) int32 {
	return C.sfRenderWindow_pollEvent(r.CPtr(), event)
}

func (r *RenderWindow) PopGlsTates() int32 {
	return C.sfRenderWindow_popGLStates(r.CPtr())
}

func (r *RenderWindow) PushGlsTates() int32 {
	return C.sfRenderWindow_pushGLStates(r.CPtr())
}

func (r *RenderWindow) RequestFocus() int32 {
	return C.sfRenderWindow_requestFocus(r.CPtr())
}

func (r *RenderWindow) ResetGlsTates() int32 {
	return C.sfRenderWindow_resetGLStates(r.CPtr())
}

func (r *RenderWindow) SetActive(active int32) int32 {
	return C.sfRenderWindow_setActive(r.CPtr(), active)
}

func (r *RenderWindow) SetFramerateLimit(limit int32) int32 {
	return C.sfRenderWindow_setFramerateLimit(r.CPtr(), limit)
}

func (r *RenderWindow) SetIcon(width int32, height int32, pixels int32) int32 {
	return C.sfRenderWindow_setIcon(r.CPtr(), width, height, pixels)
}

func (r *RenderWindow) SetJoystickThreshold(threshold int32) int32 {
	return C.sfRenderWindow_setJoystickThreshold(r.CPtr(), threshold)
}

func (r *RenderWindow) SetKeyRepeatEnabled(enabled int32) int32 {
	return C.sfRenderWindow_setKeyRepeatEnabled(r.CPtr(), enabled)
}

func (r *RenderWindow) SetMouseCursor(cursor *Cursor) int32 {
	return C.sfRenderWindow_setMouseCursor(r.CPtr(), cursor)
}

func (r *RenderWindow) SetMouseCursorGrabbed(grabbed int32) int32 {
	return C.sfRenderWindow_setMouseCursorGrabbed(r.CPtr(), grabbed)
}

func (r *RenderWindow) SetMouseCursorVisible(show int32) int32 {
	return C.sfRenderWindow_setMouseCursorVisible(r.CPtr(), show)
}

func (r *RenderWindow) SetPosition(position Vector2i) int32 {
	return C.sfRenderWindow_setPosition(r.CPtr(), position.ToC())
}

func (r *RenderWindow) SetSize(size Vector2u) int32 {
	return C.sfRenderWindow_setSize(r.CPtr(), size.ToC())
}

func (r *RenderWindow) SetTitle(title int32) int32 {
	return C.sfRenderWindow_setTitle(r.CPtr(), title)
}

func (r *RenderWindow) SetUnicodeTitle(title int32) int32 {
	return C.sfRenderWindow_setUnicodeTitle(r.CPtr(), title)
}

func (r *RenderWindow) SetVerticalSyncEnabled(enabled int32) int32 {
	return C.sfRenderWindow_setVerticalSyncEnabled(r.CPtr(), enabled)
}

func (r *RenderWindow) SetView(view *View) int32 {
	return C.sfRenderWindow_setView(r.CPtr(), view)
}

func (r *RenderWindow) SetVisible(visible int32) int32 {
	return C.sfRenderWindow_setVisible(r.CPtr(), visible)
}

func (r *RenderWindow) WaitEvent(event *Event) int32 {
	return C.sfRenderWindow_waitEvent(r.CPtr(), event)
}

func SensorGetValue(sensor SensorType) int32 {
	return C.sfSensor_getValue(sensor)
}

func SensorIsAvailable(sensor SensorType) int32 {
	return C.sfSensor_isAvailable(sensor)
}

func SensorSetEnabled(sensor SensorType, enabled bool) int32 {
	return C.sfSensor_setEnabled(sensor, enabled)
}

func (s *Shader) Bind() int32 {
	return C.sfShader_bind(s.CPtr())
}

func ShaderCreateFromFile(vertexShaderFilename byte, geometryShaderFilename byte, fragmentShaderFilename byte) int32 {
	return C.sfShader_createFromFile(vertexShaderFilename, geometryShaderFilename, fragmentShaderFilename)
}

func ShaderCreateFromMemory(vertexShader byte, geometryShader byte, fragmentShader byte) int32 {
	return C.sfShader_createFromMemory(vertexShader, geometryShader, fragmentShader)
}

func ShaderCreateFromStream(vertexShaderStream *InputStream, geometryShaderStream *InputStream, fragmentShaderStream *InputStream) int32 {
	return C.sfShader_createFromStream(vertexShaderStream, geometryShaderStream, fragmentShaderStream)
}

func (s *Shader) Destroy() int32 {
	return C.sfShader_destroy(s.CPtr())
}

func (s *Shader) GetNativeHandle() int32 {
	return C.sfShader_getNativeHandle(s.CPtr())
}

func ShaderIsAvailable() int32 {
	return C.sfShader_isAvailable()
}

func ShaderIsGeometryAvailable() int32 {
	return C.sfShader_isGeometryAvailable()
}

func (s *Shader) SetBoolUniform(name int32, x int32) int32 {
	return C.sfShader_setBoolUniform(s.CPtr(), name, x)
}

func (s *Shader) SetBvec2uniform(name int32, vector Vector2b) int32 {
	return C.sfShader_setBvec2Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetBvec3uniform(name int32, vector Vector3b) int32 {
	return C.sfShader_setBvec3Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetBvec4uniform(name int32, vector Vector4b) int32 {
	return C.sfShader_setBvec4Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetColorParameter(name int32, color Color) int32 {
	return C.sfShader_setColorParameter(s.CPtr(), name, color)
}

func (s *Shader) SetColorUniform(name int32, color Color) int32 {
	return C.sfShader_setColorUniform(s.CPtr(), name, color)
}

func (s *Shader) SetCurrentTextureParameter(name int32) int32 {
	return C.sfShader_setCurrentTextureParameter(s.CPtr(), name)
}

func (s *Shader) SetCurrentTextureUniform(name int32) int32 {
	return C.sfShader_setCurrentTextureUniform(s.CPtr(), name)
}

func (s *Shader) SetFloat2parameter(name int32, x int32, y int32) int32 {
	return C.sfShader_setFloat2Parameter(s.CPtr(), name, x, y)
}

func (s *Shader) SetFloat3parameter(name int32, x int32, y int32, z int32) int32 {
	return C.sfShader_setFloat3Parameter(s.CPtr(), name, x, y, z)
}

func (s *Shader) SetFloat4parameter(name int32, x int32, y int32, z int32, w int32) int32 {
	return C.sfShader_setFloat4Parameter(s.CPtr(), name, x, y, z, w)
}

func (s *Shader) SetFloatParameter(name int32, x int32) int32 {
	return C.sfShader_setFloatParameter(s.CPtr(), name, x)
}

func (s *Shader) SetFloatUniform(name int32, x int32) int32 {
	return C.sfShader_setFloatUniform(s.CPtr(), name, x)
}

func (s *Shader) SetFloatUniformArray(name int32, scalarArray int32, length int32) int32 {
	return C.sfShader_setFloatUniformArray(s.CPtr(), name, scalarArray, length)
}

func (s *Shader) SetIntColorUniform(name int32, color Color) int32 {
	return C.sfShader_setIntColorUniform(s.CPtr(), name, color)
}

func (s *Shader) SetIntUniform(name int32, x int32) int32 {
	return C.sfShader_setIntUniform(s.CPtr(), name, x)
}

func (s *Shader) SetIvec2uniform(name int32, vector Vector2i) int32 {
	return C.sfShader_setIvec2Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetIvec3uniform(name int32, vector Vector3i) int32 {
	return C.sfShader_setIvec3Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetIvec4uniform(name int32, vector Vector4i) int32 {
	return C.sfShader_setIvec4Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetMat3uniform(name int32, matrix *GlslMat3) int32 {
	return C.sfShader_setMat3Uniform(s.CPtr(), name, matrix)
}

func (s *Shader) SetMat3uniformArray(name int32, matrixArray *GlslMat3, length int32) int32 {
	return C.sfShader_setMat3UniformArray(s.CPtr(), name, matrixArray, length)
}

func (s *Shader) SetMat4uniform(name int32, matrix *GlslMat4) int32 {
	return C.sfShader_setMat4Uniform(s.CPtr(), name, matrix)
}

func (s *Shader) SetMat4uniformArray(name int32, matrixArray *GlslMat4, length int32) int32 {
	return C.sfShader_setMat4UniformArray(s.CPtr(), name, matrixArray, length)
}

func (s *Shader) SetTextureParameter(name int32, texture *Texture) int32 {
	return C.sfShader_setTextureParameter(s.CPtr(), name, texture)
}

func (s *Shader) SetTextureUniform(name int32, texture *Texture) int32 {
	return C.sfShader_setTextureUniform(s.CPtr(), name, texture)
}

func (s *Shader) SetTransformParameter(name int32, transform Transform) int32 {
	return C.sfShader_setTransformParameter(s.CPtr(), name, transform)
}

func (s *Shader) SetVec2uniform(name int32, vector Vector2f) int32 {
	return C.sfShader_setVec2Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetVec2uniformArray(name int32, vectorArray *Vector2f, length int32) int32 {
	return C.sfShader_setVec2UniformArray(s.CPtr(), name, vectorArray, length)
}

func (s *Shader) SetVec3uniform(name int32, vector Vector3f) int32 {
	return C.sfShader_setVec3Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetVec3uniformArray(name int32, vectorArray *Vector3f, length int32) int32 {
	return C.sfShader_setVec3UniformArray(s.CPtr(), name, vectorArray, length)
}

func (s *Shader) SetVec4uniform(name int32, vector Vector4f) int32 {
	return C.sfShader_setVec4Uniform(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetVec4uniformArray(name int32, vectorArray *Vector4f, length int32) int32 {
	return C.sfShader_setVec4UniformArray(s.CPtr(), name, vectorArray, length)
}

func (s *Shader) SetVector2parameter(name int32, vector Vector2f) int32 {
	return C.sfShader_setVector2Parameter(s.CPtr(), name, vector.ToC())
}

func (s *Shader) SetVector3parameter(name int32, vector Vector3f) int32 {
	return C.sfShader_setVector3Parameter(s.CPtr(), name, vector.ToC())
}

func (s *Shape) Destroy() int32 {
	return C.sfShape_destroy(s.CPtr())
}

func (s *Shape) GetFillColor() int32 {
	return C.sfShape_getFillColor(s.CPtr())
}

func (s *Shape) GetGlobalBounds() int32 {
	return C.sfShape_getGlobalBounds(s.CPtr())
}

func (s *Shape) GetInverseTransform() int32 {
	return C.sfShape_getInverseTransform(s.CPtr())
}

func (s *Shape) GetLocalBounds() int32 {
	return C.sfShape_getLocalBounds(s.CPtr())
}

func (s *Shape) GetOrigin() int32 {
	return C.sfShape_getOrigin(s.CPtr())
}

func (s *Shape) GetOutlineColor() int32 {
	return C.sfShape_getOutlineColor(s.CPtr())
}

func (s *Shape) GetOutlineThickness() int32 {
	return C.sfShape_getOutlineThickness(s.CPtr())
}

func (s *Shape) GetPoint(index int32) int32 {
	return C.sfShape_getPoint(s.CPtr(), index)
}

func (s *Shape) GetPointCount() int32 {
	return C.sfShape_getPointCount(s.CPtr())
}

func (s *Shape) GetPosition() int32 {
	return C.sfShape_getPosition(s.CPtr())
}

func (s *Shape) GetRotation() int32 {
	return C.sfShape_getRotation(s.CPtr())
}

func (s *Shape) GetScale() int32 {
	return C.sfShape_getScale(s.CPtr())
}

func (s *Shape) GetTexture() int32 {
	return C.sfShape_getTexture(s.CPtr())
}

func (s *Shape) GetTextureRect() int32 {
	return C.sfShape_getTextureRect(s.CPtr())
}

func (s *Shape) GetTransform() int32 {
	return C.sfShape_getTransform(s.CPtr())
}

func (s *Shape) Move(offset Vector2f) int32 {
	return C.sfShape_move(s.CPtr(), offset.ToC())
}

func (s *Shape) Rotate(angle int32) int32 {
	return C.sfShape_rotate(s.CPtr(), angle)
}

func (s *Shape) Scale(factors Vector2f) int32 {
	return C.sfShape_scale(s.CPtr(), factors.ToC())
}

func (s *Shape) SetFillColor(color Color) int32 {
	return C.sfShape_setFillColor(s.CPtr(), color)
}

func (s *Shape) SetOrigin(origin Vector2f) int32 {
	return C.sfShape_setOrigin(s.CPtr(), origin.ToC())
}

func (s *Shape) SetOutlineColor(color Color) int32 {
	return C.sfShape_setOutlineColor(s.CPtr(), color)
}

func (s *Shape) SetOutlineThickness(thickness int32) int32 {
	return C.sfShape_setOutlineThickness(s.CPtr(), thickness)
}

func (s *Shape) SetPosition(position Vector2f) int32 {
	return C.sfShape_setPosition(s.CPtr(), position.ToC())
}

func (s *Shape) SetRotation(angle int32) int32 {
	return C.sfShape_setRotation(s.CPtr(), angle)
}

func (s *Shape) SetScale(scale Vector2f) int32 {
	return C.sfShape_setScale(s.CPtr(), scale.ToC())
}

func (s *Shape) SetTexture(texture *Texture, resetRect int32) int32 {
	return C.sfShape_setTexture(s.CPtr(), texture, resetRect)
}

func (s *Shape) SetTextureRect(rect IntRect) int32 {
	return C.sfShape_setTextureRect(s.CPtr(), rect)
}

func (s *Shape) Update() int32 {
	return C.sfShape_update(s.CPtr())
}

func (s *SocketSelector) AddTcpListener(socket *TcpListener) int32 {
	return C.sfSocketSelector_addTcpListener(s.CPtr(), socket)
}

func (s *SocketSelector) AddTcpSocket(socket *TcpSocket) int32 {
	return C.sfSocketSelector_addTcpSocket(s.CPtr(), socket)
}

func (s *SocketSelector) AddUdpSocket(socket *UdpSocket) int32 {
	return C.sfSocketSelector_addUdpSocket(s.CPtr(), socket)
}

func (s *SocketSelector) Clear() int32 {
	return C.sfSocketSelector_clear(s.CPtr())
}

func (s *SocketSelector) Copy() int32 {
	return C.sfSocketSelector_copy(s.CPtr())
}

func SocketSelectorCreate() int32 {
	return C.sfSocketSelector_create()
}

func (s *SocketSelector) Destroy() int32 {
	return C.sfSocketSelector_destroy(s.CPtr())
}

func (s *SocketSelector) IsTcpListenerReady(socket *TcpListener) int32 {
	return C.sfSocketSelector_isTcpListenerReady(s.CPtr(), socket)
}

func (s *SocketSelector) IsTcpSocketReady(socket *TcpSocket) int32 {
	return C.sfSocketSelector_isTcpSocketReady(s.CPtr(), socket)
}

func (s *SocketSelector) IsUdpSocketReady(socket *UdpSocket) int32 {
	return C.sfSocketSelector_isUdpSocketReady(s.CPtr(), socket)
}

func (s *SocketSelector) RemoveTcpListener(socket *TcpListener) int32 {
	return C.sfSocketSelector_removeTcpListener(s.CPtr(), socket)
}

func (s *SocketSelector) RemoveTcpSocket(socket *TcpSocket) int32 {
	return C.sfSocketSelector_removeTcpSocket(s.CPtr(), socket)
}

func (s *SocketSelector) RemoveUdpSocket(socket *UdpSocket) int32 {
	return C.sfSocketSelector_removeUdpSocket(s.CPtr(), socket)
}

func (s *SocketSelector) Wait(timeout Time) int32 {
	return C.sfSocketSelector_wait(s.CPtr(), timeout)
}

func SoundBufferRecorderCreate() int32 {
	return C.sfSoundBufferRecorder_create()
}

func (s *SoundBufferRecorder) Destroy() int32 {
	return C.sfSoundBufferRecorder_destroy(s.CPtr())
}

func (s *SoundBufferRecorder) GetBuffer() int32 {
	return C.sfSoundBufferRecorder_getBuffer(s.CPtr())
}

func (s *SoundBufferRecorder) GetChannelCount() int32 {
	return C.sfSoundBufferRecorder_getChannelCount(s.CPtr())
}

func (s *SoundBufferRecorder) GetDevice() int32 {
	return C.sfSoundBufferRecorder_getDevice(s.CPtr())
}

func (s *SoundBufferRecorder) GetSampleRate() int32 {
	return C.sfSoundBufferRecorder_getSampleRate(s.CPtr())
}

func (s *SoundBufferRecorder) SetChannelCount(channelCount int32) int32 {
	return C.sfSoundBufferRecorder_setChannelCount(s.CPtr(), channelCount)
}

func (s *SoundBufferRecorder) SetDevice(name int32) int32 {
	return C.sfSoundBufferRecorder_setDevice(s.CPtr(), name)
}

func (s *SoundBufferRecorder) Start(sampleRate int32) int32 {
	return C.sfSoundBufferRecorder_start(s.CPtr(), sampleRate)
}

func (s *SoundBufferRecorder) Stop() int32 {
	return C.sfSoundBufferRecorder_stop(s.CPtr())
}

func (s *SoundBuffer) Copy() int32 {
	return C.sfSoundBuffer_copy(s.CPtr())
}

func SoundBufferCreateFromFile(filename byte) int32 {
	return C.sfSoundBuffer_createFromFile(filename)
}

func SoundBufferCreateFromMemory(data int32, sizeInBytes int32) int32 {
	return C.sfSoundBuffer_createFromMemory(data, sizeInBytes)
}

func SoundBufferCreateFromSamples(samples int16, sampleCount uint64, channelCount uint32, sampleRate uint32) int32 {
	return C.sfSoundBuffer_createFromSamples(samples, sampleCount, channelCount, sampleRate)
}

func SoundBufferCreateFromStream(stream *InputStream) int32 {
	return C.sfSoundBuffer_createFromStream(stream)
}

func (s *SoundBuffer) Destroy() int32 {
	return C.sfSoundBuffer_destroy(s.CPtr())
}

func (s *SoundBuffer) GetChannelCount() int32 {
	return C.sfSoundBuffer_getChannelCount(s.CPtr())
}

func (s *SoundBuffer) GetDuration() int32 {
	return C.sfSoundBuffer_getDuration(s.CPtr())
}

func (s *SoundBuffer) GetSampleCount() int32 {
	return C.sfSoundBuffer_getSampleCount(s.CPtr())
}

func (s *SoundBuffer) GetSampleRate() int32 {
	return C.sfSoundBuffer_getSampleRate(s.CPtr())
}

func (s *SoundBuffer) GetSamples() int32 {
	return C.sfSoundBuffer_getSamples(s.CPtr())
}

func (s *SoundBuffer) SaveToFile(filename int32) int32 {
	return C.sfSoundBuffer_saveToFile(s.CPtr(), filename)
}

func (s *Sound) Copy() int32 {
	return C.sfSound_copy(s.CPtr())
}

func SoundCreate() int32 {
	return C.sfSound_create()
}

func (s *Sound) Destroy() int32 {
	return C.sfSound_destroy(s.CPtr())
}

func (s *Sound) GetAttenuation() int32 {
	return C.sfSound_getAttenuation(s.CPtr())
}

func (s *Sound) GetBuffer() int32 {
	return C.sfSound_getBuffer(s.CPtr())
}

func (s *Sound) GetLoop() int32 {
	return C.sfSound_getLoop(s.CPtr())
}

func (s *Sound) GetMinDistance() int32 {
	return C.sfSound_getMinDistance(s.CPtr())
}

func (s *Sound) GetPitch() int32 {
	return C.sfSound_getPitch(s.CPtr())
}

func (s *Sound) GetPlayingOffset() int32 {
	return C.sfSound_getPlayingOffset(s.CPtr())
}

func (s *Sound) GetPosition() int32 {
	return C.sfSound_getPosition(s.CPtr())
}

func (s *Sound) GetStatus() int32 {
	return C.sfSound_getStatus(s.CPtr())
}

func (s *Sound) GetVolume() int32 {
	return C.sfSound_getVolume(s.CPtr())
}

func (s *Sound) IsRelativeToListener() int32 {
	return C.sfSound_isRelativeToListener(s.CPtr())
}

func (s *Sound) Pause() int32 {
	return C.sfSound_pause(s.CPtr())
}

func (s *Sound) Play() int32 {
	return C.sfSound_play(s.CPtr())
}

func (s *Sound) SetAttenuation(attenuation int32) int32 {
	return C.sfSound_setAttenuation(s.CPtr(), attenuation)
}

func (s *Sound) SetBuffer(buffer *SoundBuffer) int32 {
	return C.sfSound_setBuffer(s.CPtr(), buffer)
}

func (s *Sound) SetLoop(loop int32) int32 {
	return C.sfSound_setLoop(s.CPtr(), loop)
}

func (s *Sound) SetMinDistance(distance int32) int32 {
	return C.sfSound_setMinDistance(s.CPtr(), distance)
}

func (s *Sound) SetPitch(pitch int32) int32 {
	return C.sfSound_setPitch(s.CPtr(), pitch)
}

func (s *Sound) SetPlayingOffset(timeOffset Time) int32 {
	return C.sfSound_setPlayingOffset(s.CPtr(), timeOffset)
}

func (s *Sound) SetPosition(position Vector3f) int32 {
	return C.sfSound_setPosition(s.CPtr(), position.ToC())
}

func (s *Sound) SetRelativeToListener(relative int32) int32 {
	return C.sfSound_setRelativeToListener(s.CPtr(), relative)
}

func (s *Sound) SetVolume(volume int32) int32 {
	return C.sfSound_setVolume(s.CPtr(), volume)
}

func (s *Sound) Stop() int32 {
	return C.sfSound_stop(s.CPtr())
}

func (s *Sprite) Copy() int32 {
	return C.sfSprite_copy(s.CPtr())
}

func SpriteCreate() int32 {
	return C.sfSprite_create()
}

func (s *Sprite) Destroy() int32 {
	return C.sfSprite_destroy(s.CPtr())
}

func (s *Sprite) GetColor() int32 {
	return C.sfSprite_getColor(s.CPtr())
}

func (s *Sprite) GetGlobalBounds() int32 {
	return C.sfSprite_getGlobalBounds(s.CPtr())
}

func (s *Sprite) GetInverseTransform() int32 {
	return C.sfSprite_getInverseTransform(s.CPtr())
}

func (s *Sprite) GetLocalBounds() int32 {
	return C.sfSprite_getLocalBounds(s.CPtr())
}

func (s *Sprite) GetOrigin() int32 {
	return C.sfSprite_getOrigin(s.CPtr())
}

func (s *Sprite) GetPosition() int32 {
	return C.sfSprite_getPosition(s.CPtr())
}

func (s *Sprite) GetRotation() int32 {
	return C.sfSprite_getRotation(s.CPtr())
}

func (s *Sprite) GetScale() int32 {
	return C.sfSprite_getScale(s.CPtr())
}

func (s *Sprite) GetTexture() int32 {
	return C.sfSprite_getTexture(s.CPtr())
}

func (s *Sprite) GetTextureRect() int32 {
	return C.sfSprite_getTextureRect(s.CPtr())
}

func (s *Sprite) GetTransform() int32 {
	return C.sfSprite_getTransform(s.CPtr())
}

func (s *Sprite) Move(offset Vector2f) int32 {
	return C.sfSprite_move(s.CPtr(), offset.ToC())
}

func (s *Sprite) Rotate(angle int32) int32 {
	return C.sfSprite_rotate(s.CPtr(), angle)
}

func (s *Sprite) Scale(factors Vector2f) int32 {
	return C.sfSprite_scale(s.CPtr(), factors.ToC())
}

func (s *Sprite) SetColor(color Color) int32 {
	return C.sfSprite_setColor(s.CPtr(), color)
}

func (s *Sprite) SetOrigin(origin Vector2f) int32 {
	return C.sfSprite_setOrigin(s.CPtr(), origin.ToC())
}

func (s *Sprite) SetPosition(position Vector2f) int32 {
	return C.sfSprite_setPosition(s.CPtr(), position.ToC())
}

func (s *Sprite) SetRotation(angle int32) int32 {
	return C.sfSprite_setRotation(s.CPtr(), angle)
}

func (s *Sprite) SetScale(scale Vector2f) int32 {
	return C.sfSprite_setScale(s.CPtr(), scale.ToC())
}

func (s *Sprite) SetTexture(texture *Texture, resetRect int32) int32 {
	return C.sfSprite_setTexture(s.CPtr(), texture, resetRect)
}

func (s *Sprite) SetTextureRect(rectangle IntRect) int32 {
	return C.sfSprite_setTextureRect(s.CPtr(), rectangle)
}

func (t *TcpListener) Accept(connected *TcpSocket) int32 {
	return C.sfTcpListener_accept(t.CPtr(), connected)
}

func TcpListenerCreate() int32 {
	return C.sfTcpListener_create()
}

func (t *TcpListener) Destroy() int32 {
	return C.sfTcpListener_destroy(t.CPtr())
}

func (t *TcpListener) GetLocalPort() int32 {
	return C.sfTcpListener_getLocalPort(t.CPtr())
}

func (t *TcpListener) IsBlocking() int32 {
	return C.sfTcpListener_isBlocking(t.CPtr())
}

func (t *TcpListener) Listen(port int32, address IpAddress) int32 {
	return C.sfTcpListener_listen(t.CPtr(), port, address)
}

func (t *TcpListener) SetBlocking(blocking int32) int32 {
	return C.sfTcpListener_setBlocking(t.CPtr(), blocking)
}

func (t *TcpSocket) Connect(remoteAddress IpAddress, remotePort int32, timeout Time) int32 {
	return C.sfTcpSocket_connect(t.CPtr(), remoteAddress, remotePort, timeout)
}

func TcpSocketCreate() int32 {
	return C.sfTcpSocket_create()
}

func (t *TcpSocket) Destroy() int32 {
	return C.sfTcpSocket_destroy(t.CPtr())
}

func (t *TcpSocket) Disconnect() int32 {
	return C.sfTcpSocket_disconnect(t.CPtr())
}

func (t *TcpSocket) GetLocalPort() int32 {
	return C.sfTcpSocket_getLocalPort(t.CPtr())
}

func (t *TcpSocket) GetRemoteAddress() int32 {
	return C.sfTcpSocket_getRemoteAddress(t.CPtr())
}

func (t *TcpSocket) GetRemotePort() int32 {
	return C.sfTcpSocket_getRemotePort(t.CPtr())
}

func (t *TcpSocket) IsBlocking() int32 {
	return C.sfTcpSocket_isBlocking(t.CPtr())
}

func (t *TcpSocket) Receive(data int32, size int32, received int32) int32 {
	return C.sfTcpSocket_receive(t.CPtr(), data, size, received)
}

func (t *TcpSocket) ReceivePacket(packet *Packet) int32 {
	return C.sfTcpSocket_receivePacket(t.CPtr(), packet)
}

func (t *TcpSocket) Send(data int32, size int32) int32 {
	return C.sfTcpSocket_send(t.CPtr(), data, size)
}

func (t *TcpSocket) SendPacket(packet *Packet) int32 {
	return C.sfTcpSocket_sendPacket(t.CPtr(), packet)
}

func (t *TcpSocket) SendPartial(data int32, size int32, sent int32) int32 {
	return C.sfTcpSocket_sendPartial(t.CPtr(), data, size, sent)
}

func (t *TcpSocket) SetBlocking(blocking int32) int32 {
	return C.sfTcpSocket_setBlocking(t.CPtr(), blocking)
}

func (t *Text) Copy() int32 {
	return C.sfText_copy(t.CPtr())
}

func TextCreate() int32 {
	return C.sfText_create()
}

func (t *Text) Destroy() int32 {
	return C.sfText_destroy(t.CPtr())
}

func (t *Text) FindCharacterPos(index int32) int32 {
	return C.sfText_findCharacterPos(t.CPtr(), index)
}

func (t *Text) GetCharacterSize() int32 {
	return C.sfText_getCharacterSize(t.CPtr())
}

func (t *Text) GetColor() int32 {
	return C.sfText_getColor(t.CPtr())
}

func (t *Text) GetFillColor() int32 {
	return C.sfText_getFillColor(t.CPtr())
}

func (t *Text) GetFont() int32 {
	return C.sfText_getFont(t.CPtr())
}

func (t *Text) GetGlobalBounds() int32 {
	return C.sfText_getGlobalBounds(t.CPtr())
}

func (t *Text) GetInverseTransform() int32 {
	return C.sfText_getInverseTransform(t.CPtr())
}

func (t *Text) GetLetterSpacing() int32 {
	return C.sfText_getLetterSpacing(t.CPtr())
}

func (t *Text) GetLineSpacing() int32 {
	return C.sfText_getLineSpacing(t.CPtr())
}

func (t *Text) GetLocalBounds() int32 {
	return C.sfText_getLocalBounds(t.CPtr())
}

func (t *Text) GetOrigin() int32 {
	return C.sfText_getOrigin(t.CPtr())
}

func (t *Text) GetOutlineColor() int32 {
	return C.sfText_getOutlineColor(t.CPtr())
}

func (t *Text) GetOutlineThickness() int32 {
	return C.sfText_getOutlineThickness(t.CPtr())
}

func (t *Text) GetPosition() int32 {
	return C.sfText_getPosition(t.CPtr())
}

func (t *Text) GetRotation() int32 {
	return C.sfText_getRotation(t.CPtr())
}

func (t *Text) GetScale() int32 {
	return C.sfText_getScale(t.CPtr())
}

func (t *Text) GetString() int32 {
	return C.sfText_getString(t.CPtr())
}

func (t *Text) GetStyle() int32 {
	return C.sfText_getStyle(t.CPtr())
}

func (t *Text) GetTransform() int32 {
	return C.sfText_getTransform(t.CPtr())
}

func (t *Text) GetUnicodeString() int32 {
	return C.sfText_getUnicodeString(t.CPtr())
}

func (t *Text) Move(offset Vector2f) int32 {
	return C.sfText_move(t.CPtr(), offset.ToC())
}

func (t *Text) Rotate(angle int32) int32 {
	return C.sfText_rotate(t.CPtr(), angle)
}

func (t *Text) Scale(factors Vector2f) int32 {
	return C.sfText_scale(t.CPtr(), factors.ToC())
}

func (t *Text) SetCharacterSize(size int32) int32 {
	return C.sfText_setCharacterSize(t.CPtr(), size)
}

func (t *Text) SetColor(color Color) int32 {
	return C.sfText_setColor(t.CPtr(), color)
}

func (t *Text) SetFillColor(color Color) int32 {
	return C.sfText_setFillColor(t.CPtr(), color)
}

func (t *Text) SetFont(font *Font) int32 {
	return C.sfText_setFont(t.CPtr(), font)
}

func (t *Text) SetLetterSpacing(spacingFactor int32) int32 {
	return C.sfText_setLetterSpacing(t.CPtr(), spacingFactor)
}

func (t *Text) SetLineSpacing(spacingFactor int32) int32 {
	return C.sfText_setLineSpacing(t.CPtr(), spacingFactor)
}

func (t *Text) SetOrigin(origin Vector2f) int32 {
	return C.sfText_setOrigin(t.CPtr(), origin.ToC())
}

func (t *Text) SetOutlineColor(color Color) int32 {
	return C.sfText_setOutlineColor(t.CPtr(), color)
}

func (t *Text) SetOutlineThickness(thickness int32) int32 {
	return C.sfText_setOutlineThickness(t.CPtr(), thickness)
}

func (t *Text) SetPosition(position Vector2f) int32 {
	return C.sfText_setPosition(t.CPtr(), position.ToC())
}

func (t *Text) SetRotation(angle int32) int32 {
	return C.sfText_setRotation(t.CPtr(), angle)
}

func (t *Text) SetScale(scale Vector2f) int32 {
	return C.sfText_setScale(t.CPtr(), scale.ToC())
}

func (t *Text) SetString(string int32) int32 {
	return C.sfText_setString(t.CPtr(), string)
}

func (t *Text) SetStyle(style int32) int32 {
	return C.sfText_setStyle(t.CPtr(), style)
}

func (t *Text) SetUnicodeString(string int32) int32 {
	return C.sfText_setUnicodeString(t.CPtr(), string)
}

func (t *Texture) Bind(textureCoordinateType TextureCoordinateType) int32 {
	return C.sfTexture_bind(t.CPtr(), textureCoordinateType)
}

func (t *Texture) Copy() int32 {
	return C.sfTexture_copy(t.CPtr())
}

func (t *Texture) CopyToImage() int32 {
	return C.sfTexture_copyToImage(t.CPtr())
}

func TextureCreate(width uint32, height uint32) int32 {
	return C.sfTexture_create(width, height)
}

func TextureCreateFromFile(filename byte, area *IntRect) int32 {
	return C.sfTexture_createFromFile(filename, area)
}

func TextureCreateFromImage(image *Image, area *IntRect) int32 {
	return C.sfTexture_createFromImage(image, area)
}

func TextureCreateFromMemory(data int32, sizeInBytes int32, area *IntRect) int32 {
	return C.sfTexture_createFromMemory(data, sizeInBytes, area)
}

func TextureCreateFromStream(stream *InputStream, area *IntRect) int32 {
	return C.sfTexture_createFromStream(stream, area)
}

func TextureCreateSrgbFromFile(filename byte, area *IntRect) int32 {
	return C.sfTexture_createSrgbFromFile(filename, area)
}

func TextureCreateSrgbFromImage(image *Image, area *IntRect) int32 {
	return C.sfTexture_createSrgbFromImage(image, area)
}

func TextureCreateSrgbFromMemory(data int32, sizeInBytes int32, area *IntRect) int32 {
	return C.sfTexture_createSrgbFromMemory(data, sizeInBytes, area)
}

func TextureCreateSrgbFromStream(stream *InputStream, area *IntRect) int32 {
	return C.sfTexture_createSrgbFromStream(stream, area)
}

func (t *Texture) Destroy() int32 {
	return C.sfTexture_destroy(t.CPtr())
}

func (t *Texture) GenerateMipmap() int32 {
	return C.sfTexture_generateMipmap(t.CPtr())
}

func TextureGetMaximumSize() int32 {
	return C.sfTexture_getMaximumSize()
}

func (t *Texture) GetNativeHandle() int32 {
	return C.sfTexture_getNativeHandle(t.CPtr())
}

func (t *Texture) GetSize() int32 {
	return C.sfTexture_getSize(t.CPtr())
}

func (t *Texture) IsRepeated() int32 {
	return C.sfTexture_isRepeated(t.CPtr())
}

func (t *Texture) IsSmooth() int32 {
	return C.sfTexture_isSmooth(t.CPtr())
}

func (t *Texture) IsSrgb() int32 {
	return C.sfTexture_isSrgb(t.CPtr())
}

func (t *Texture) SetRepeated(repeated int32) int32 {
	return C.sfTexture_setRepeated(t.CPtr(), repeated)
}

func (t *Texture) SetSmooth(smooth int32) int32 {
	return C.sfTexture_setSmooth(t.CPtr(), smooth)
}

func (t *Texture) Swap(right *Texture) int32 {
	return C.sfTexture_swap(t.CPtr(), right)
}

func (t *Texture) UpdateFromImage(image *Image, x int32, y int32) int32 {
	return C.sfTexture_updateFromImage(t.CPtr(), image, x, y)
}

func (t *Texture) UpdateFromPixels(pixels int32, width int32, height int32, x int32, y int32) int32 {
	return C.sfTexture_updateFromPixels(t.CPtr(), pixels, width, height, x, y)
}

func (t *Texture) UpdateFromRenderWindow(renderWindow *RenderWindow, x int32, y int32) int32 {
	return C.sfTexture_updateFromRenderWindow(t.CPtr(), renderWindow, x, y)
}

func (t *Texture) UpdateFromTexture(source *Texture, x int32, y int32) int32 {
	return C.sfTexture_updateFromTexture(t.CPtr(), source, x, y)
}

func (t *Texture) UpdateFromWindow(window *Window, x int32, y int32) int32 {
	return C.sfTexture_updateFromWindow(t.CPtr(), window, x, y)
}

func ThreadCreate(function int32, userData int32) int32 {
	return C.sfThread_create(function, userData)
}

func (t *Thread) Destroy() int32 {
	return C.sfThread_destroy(t.CPtr())
}

func (t *Thread) Launch() int32 {
	return C.sfThread_launch(t.CPtr())
}

func (t *Thread) Terminate() int32 {
	return C.sfThread_terminate(t.CPtr())
}

func (t *Thread) Wait() int32 {
	return C.sfThread_wait(t.CPtr())
}

func (t Time) AsMicroseconds() int32 {
	return C.sfTime_asMicroseconds(t)
}

func (t Time) AsMilliseconds() int32 {
	return C.sfTime_asMilliseconds(t)
}

func (t Time) AsSeconds() int32 {
	return C.sfTime_asSeconds(t)
}

func TouchGetPosition(finger uint32, relativeTo *Window) int32 {
	return C.sfTouch_getPosition(finger, relativeTo)
}

func TouchGetPositionRenderWindow(finger uint32, relativeTo *RenderWindow) int32 {
	return C.sfTouch_getPositionRenderWindow(finger, relativeTo)
}

func TouchGetPositionWindowBase(finger uint32, relativeTo *WindowBase) int32 {
	return C.sfTouch_getPositionWindowBase(finger, relativeTo)
}

func TouchIsDown(finger uint32) int32 {
	return C.sfTouch_isDown(finger)
}

func (t *Transform) Combine(other *Transform) int32 {
	return C.sfTransform_combine(t.CPtr(), other)
}

func (t *Transform) Equal(right *Transform) int32 {
	return C.sfTransform_equal(t.CPtr(), right)
}

func TransformFromMatrix(a00 float32, a01 float32, a02 float32, a10 float32, a11 float32, a12 float32, a20 float32, a21 float32, a22 float32) int32 {
	return C.sfTransform_fromMatrix(a00, a01, a02, a10, a11, a12, a20, a21, a22)
}

func (t *Transform) GetInverse() int32 {
	return C.sfTransform_getInverse(t.CPtr())
}

func (t *Transform) GetMatrix(matrix int32) int32 {
	return C.sfTransform_getMatrix(t.CPtr(), matrix)
}

func (t *Transform) Rotate(angle int32) int32 {
	return C.sfTransform_rotate(t.CPtr(), angle)
}

func (t *Transform) RotateWithCenter(angle int32, centerX int32, centerY int32) int32 {
	return C.sfTransform_rotateWithCenter(t.CPtr(), angle, centerX, centerY)
}

func (t *Transform) Scale(scaleX int32, scaleY int32) int32 {
	return C.sfTransform_scale(t.CPtr(), scaleX, scaleY)
}

func (t *Transform) ScaleWithCenter(scaleX int32, scaleY int32, centerX int32, centerY int32) int32 {
	return C.sfTransform_scaleWithCenter(t.CPtr(), scaleX, scaleY, centerX, centerY)
}

func (t *Transform) TransformPoint(point Vector2f) int32 {
	return C.sfTransform_transformPoint(t.CPtr(), point.ToC())
}

func (t *Transform) TransformRect(rectangle FloatRect) int32 {
	return C.sfTransform_transformRect(t.CPtr(), rectangle)
}

func (t *Transform) Translate(x int32, y int32) int32 {
	return C.sfTransform_translate(t.CPtr(), x, y)
}

func (t *Transformable) Copy() int32 {
	return C.sfTransformable_copy(t.CPtr())
}

func TransformableCreate() int32 {
	return C.sfTransformable_create()
}

func (t *Transformable) Destroy() int32 {
	return C.sfTransformable_destroy(t.CPtr())
}

func (t *Transformable) GetInverseTransform() int32 {
	return C.sfTransformable_getInverseTransform(t.CPtr())
}

func (t *Transformable) GetOrigin() int32 {
	return C.sfTransformable_getOrigin(t.CPtr())
}

func (t *Transformable) GetPosition() int32 {
	return C.sfTransformable_getPosition(t.CPtr())
}

func (t *Transformable) GetRotation() int32 {
	return C.sfTransformable_getRotation(t.CPtr())
}

func (t *Transformable) GetScale() int32 {
	return C.sfTransformable_getScale(t.CPtr())
}

func (t *Transformable) GetTransform() int32 {
	return C.sfTransformable_getTransform(t.CPtr())
}

func (t *Transformable) Move(offset Vector2f) int32 {
	return C.sfTransformable_move(t.CPtr(), offset.ToC())
}

func (t *Transformable) Rotate(angle int32) int32 {
	return C.sfTransformable_rotate(t.CPtr(), angle)
}

func (t *Transformable) Scale(factors Vector2f) int32 {
	return C.sfTransformable_scale(t.CPtr(), factors.ToC())
}

func (t *Transformable) SetOrigin(origin Vector2f) int32 {
	return C.sfTransformable_setOrigin(t.CPtr(), origin.ToC())
}

func (t *Transformable) SetPosition(position Vector2f) int32 {
	return C.sfTransformable_setPosition(t.CPtr(), position.ToC())
}

func (t *Transformable) SetRotation(angle int32) int32 {
	return C.sfTransformable_setRotation(t.CPtr(), angle)
}

func (t *Transformable) SetScale(scale Vector2f) int32 {
	return C.sfTransformable_setScale(t.CPtr(), scale.ToC())
}

func (u *UdpSocket) Bind(port int32, address IpAddress) int32 {
	return C.sfUdpSocket_bind(u.CPtr(), port, address)
}

func UdpSocketCreate() int32 {
	return C.sfUdpSocket_create()
}

func (u *UdpSocket) Destroy() int32 {
	return C.sfUdpSocket_destroy(u.CPtr())
}

func (u *UdpSocket) GetLocalPort() int32 {
	return C.sfUdpSocket_getLocalPort(u.CPtr())
}

func (u *UdpSocket) IsBlocking() int32 {
	return C.sfUdpSocket_isBlocking(u.CPtr())
}

func UdpSocketMaxDatagramSize() int32 {
	return C.sfUdpSocket_maxDatagramSize()
}

func (u *UdpSocket) Receive(data int32, size int32, received int32, remoteAddress *IpAddress, remotePort int32) int32 {
	return C.sfUdpSocket_receive(u.CPtr(), data, size, received, remoteAddress, remotePort)
}

func (u *UdpSocket) ReceivePacket(packet *Packet, remoteAddress *IpAddress, remotePort int32) int32 {
	return C.sfUdpSocket_receivePacket(u.CPtr(), packet, remoteAddress, remotePort)
}

func (u *UdpSocket) Send(data int32, size int32, remoteAddress IpAddress, remotePort int32) int32 {
	return C.sfUdpSocket_send(u.CPtr(), data, size, remoteAddress, remotePort)
}

func (u *UdpSocket) SendPacket(packet *Packet, remoteAddress IpAddress, remotePort int32) int32 {
	return C.sfUdpSocket_sendPacket(u.CPtr(), packet, remoteAddress, remotePort)
}

func (u *UdpSocket) SetBlocking(blocking int32) int32 {
	return C.sfUdpSocket_setBlocking(u.CPtr(), blocking)
}

func (u *UdpSocket) Unbind() int32 {
	return C.sfUdpSocket_unbind(u.CPtr())
}

func (v *VertexArray) Append(vertex Vertex) int32 {
	return C.sfVertexArray_append(v.CPtr(), vertex)
}

func (v *VertexArray) Clear() int32 {
	return C.sfVertexArray_clear(v.CPtr())
}

func (v *VertexArray) Copy() int32 {
	return C.sfVertexArray_copy(v.CPtr())
}

func VertexArrayCreate() int32 {
	return C.sfVertexArray_create()
}

func (v *VertexArray) Destroy() int32 {
	return C.sfVertexArray_destroy(v.CPtr())
}

func (v *VertexArray) GetBounds() int32 {
	return C.sfVertexArray_getBounds(v.CPtr())
}

func (v *VertexArray) GetPrimitiveType() int32 {
	return C.sfVertexArray_getPrimitiveType(v.CPtr())
}

func (v *VertexArray) GetVertex(index int32) int32 {
	return C.sfVertexArray_getVertex(v.CPtr(), index)
}

func (v *VertexArray) GetVertexCount() int32 {
	return C.sfVertexArray_getVertexCount(v.CPtr())
}

func (v *VertexArray) Resize(vertexCount int32) int32 {
	return C.sfVertexArray_resize(v.CPtr(), vertexCount)
}

func (v *VertexArray) SetPrimitiveType(primitiveType PrimitiveType) int32 {
	return C.sfVertexArray_setPrimitiveType(v.CPtr(), primitiveType)
}

func (v *VertexBuffer) Bind() int32 {
	return C.sfVertexBuffer_bind(v.CPtr())
}

func (v *VertexBuffer) Copy() int32 {
	return C.sfVertexBuffer_copy(v.CPtr())
}

func VertexBufferCreate(vertexCount uint32, primitiveType PrimitiveType, usage VertexBufferUsage) int32 {
	return C.sfVertexBuffer_create(vertexCount, primitiveType, usage)
}

func (v *VertexBuffer) Destroy() int32 {
	return C.sfVertexBuffer_destroy(v.CPtr())
}

func (v *VertexBuffer) GetNativeHandle() int32 {
	return C.sfVertexBuffer_getNativeHandle(v.CPtr())
}

func (v *VertexBuffer) GetPrimitiveType() int32 {
	return C.sfVertexBuffer_getPrimitiveType(v.CPtr())
}

func (v *VertexBuffer) GetUsage() int32 {
	return C.sfVertexBuffer_getUsage(v.CPtr())
}

func (v *VertexBuffer) GetVertexCount() int32 {
	return C.sfVertexBuffer_getVertexCount(v.CPtr())
}

func VertexBufferIsAvailable() int32 {
	return C.sfVertexBuffer_isAvailable()
}

func (v *VertexBuffer) SetPrimitiveType(primitiveType PrimitiveType) int32 {
	return C.sfVertexBuffer_setPrimitiveType(v.CPtr(), primitiveType)
}

func (v *VertexBuffer) SetUsage(usage VertexBufferUsage) int32 {
	return C.sfVertexBuffer_setUsage(v.CPtr(), usage)
}

func (v *VertexBuffer) Swap(right *VertexBuffer) int32 {
	return C.sfVertexBuffer_swap(v.CPtr(), right)
}

func (v *VertexBuffer) Update(vertices *Vertex, vertexCount int32, offset int32) int32 {
	return C.sfVertexBuffer_update(v.CPtr(), vertices, vertexCount, offset)
}

func (v *VertexBuffer) UpdateFromVertexBuffer(other *VertexBuffer) int32 {
	return C.sfVertexBuffer_updateFromVertexBuffer(v.CPtr(), other)
}

func VideoModeGetDesktopMode() int32 {
	return C.sfVideoMode_getDesktopMode()
}

func VideoModeGetFullscreenModes(count int32) int32 {
	return C.sfVideoMode_getFullscreenModes(count)
}

func (v VideoMode) IsValid() int32 {
	return C.sfVideoMode_isValid(v)
}

func (v *View) Copy() int32 {
	return C.sfView_copy(v.CPtr())
}

func ViewCreate() int32 {
	return C.sfView_create()
}

func ViewCreateFromRect(rectangle FloatRect) int32 {
	return C.sfView_createFromRect(rectangle)
}

func (v *View) Destroy() int32 {
	return C.sfView_destroy(v.CPtr())
}

func (v *View) GetCenter() int32 {
	return C.sfView_getCenter(v.CPtr())
}

func (v *View) GetRotation() int32 {
	return C.sfView_getRotation(v.CPtr())
}

func (v *View) GetSize() int32 {
	return C.sfView_getSize(v.CPtr())
}

func (v *View) GetViewport() int32 {
	return C.sfView_getViewport(v.CPtr())
}

func (v *View) Move(offset Vector2f) int32 {
	return C.sfView_move(v.CPtr(), offset.ToC())
}

func (v *View) Reset(rectangle FloatRect) int32 {
	return C.sfView_reset(v.CPtr(), rectangle)
}

func (v *View) Rotate(angle int32) int32 {
	return C.sfView_rotate(v.CPtr(), angle)
}

func (v *View) SetCenter(center Vector2f) int32 {
	return C.sfView_setCenter(v.CPtr(), center.ToC())
}

func (v *View) SetRotation(angle int32) int32 {
	return C.sfView_setRotation(v.CPtr(), angle)
}

func (v *View) SetSize(size Vector2f) int32 {
	return C.sfView_setSize(v.CPtr(), size.ToC())
}

func (v *View) SetViewport(viewport FloatRect) int32 {
	return C.sfView_setViewport(v.CPtr(), viewport)
}

func (v *View) Zoom(factor int32) int32 {
	return C.sfView_zoom(v.CPtr(), factor)
}

func VulkanGetFunction(name byte) int32 {
	return C.sfVulkan_getFunction(name)
}

func VulkanGetGraphicsRequiredInstanceExtensions(count int32) int32 {
	return C.sfVulkan_getGraphicsRequiredInstanceExtensions(count)
}

func VulkanIsAvailable(requireGraphics bool) int32 {
	return C.sfVulkan_isAvailable(requireGraphics)
}

func (w *WindowBase) Close() int32 {
	return C.sfWindowBase_close(w.CPtr())
}

func WindowBaseCreate(mode VideoMode, title byte, style uint32) int32 {
	return C.sfWindowBase_create(mode.ToC(), title, style)
}

func WindowBaseCreateFromHandle(handle uintptr) int32 {
	return C.sfWindowBase_createFromHandle(handle)
}

func WindowBaseCreateUnicode(mode VideoMode, title uint32, style uint32) int32 {
	return C.sfWindowBase_createUnicode(mode.ToC(), title, style)
}

func (w *WindowBase) CreateVulkanSurface(instance int32, surface int32, allocator int32) int32 {
	return C.sfWindowBase_createVulkanSurface(w.CPtr(), instance, surface, allocator)
}

func (w *WindowBase) Destroy() int32 {
	return C.sfWindowBase_destroy(w.CPtr())
}

func (w *WindowBase) GetPosition() int32 {
	return C.sfWindowBase_getPosition(w.CPtr())
}

func (w *WindowBase) GetSize() int32 {
	return C.sfWindowBase_getSize(w.CPtr())
}

func (w *WindowBase) GetSystemHandle() int32 {
	return C.sfWindowBase_getSystemHandle(w.CPtr())
}

func (w *WindowBase) HasFocus() int32 {
	return C.sfWindowBase_hasFocus(w.CPtr())
}

func (w *WindowBase) IsOpen() int32 {
	return C.sfWindowBase_isOpen(w.CPtr())
}

func (w *WindowBase) PollEvent(event *Event) int32 {
	return C.sfWindowBase_pollEvent(w.CPtr(), event)
}

func (w *WindowBase) RequestFocus() int32 {
	return C.sfWindowBase_requestFocus(w.CPtr())
}

func (w *WindowBase) SetIcon(width int32, height int32, pixels int32) int32 {
	return C.sfWindowBase_setIcon(w.CPtr(), width, height, pixels)
}

func (w *WindowBase) SetJoystickThreshold(threshold int32) int32 {
	return C.sfWindowBase_setJoystickThreshold(w.CPtr(), threshold)
}

func (w *WindowBase) SetKeyRepeatEnabled(enabled int32) int32 {
	return C.sfWindowBase_setKeyRepeatEnabled(w.CPtr(), enabled)
}

func (w *WindowBase) SetMouseCursor(cursor *Cursor) int32 {
	return C.sfWindowBase_setMouseCursor(w.CPtr(), cursor)
}

func (w *WindowBase) SetMouseCursorGrabbed(grabbed int32) int32 {
	return C.sfWindowBase_setMouseCursorGrabbed(w.CPtr(), grabbed)
}

func (w *WindowBase) SetMouseCursorVisible(visible int32) int32 {
	return C.sfWindowBase_setMouseCursorVisible(w.CPtr(), visible)
}

func (w *WindowBase) SetPosition(position Vector2i) int32 {
	return C.sfWindowBase_setPosition(w.CPtr(), position.ToC())
}

func (w *WindowBase) SetSize(size Vector2u) int32 {
	return C.sfWindowBase_setSize(w.CPtr(), size.ToC())
}

func (w *WindowBase) SetTitle(title int32) int32 {
	return C.sfWindowBase_setTitle(w.CPtr(), title)
}

func (w *WindowBase) SetUnicodeTitle(title int32) int32 {
	return C.sfWindowBase_setUnicodeTitle(w.CPtr(), title)
}

func (w *WindowBase) SetVisible(visible int32) int32 {
	return C.sfWindowBase_setVisible(w.CPtr(), visible)
}

func (w *WindowBase) WaitEvent(event *Event) int32 {
	return C.sfWindowBase_waitEvent(w.CPtr(), event)
}

func (w *Window) Close() int32 {
	return C.sfWindow_close(w.CPtr())
}

func WindowCreate(mode VideoMode, title byte, style uint32, settings *ContextSettings) int32 {
	return C.sfWindow_create(mode.ToC(), title, style, settings)
}

func WindowCreateFromHandle(handle uintptr, settings *ContextSettings) int32 {
	return C.sfWindow_createFromHandle(handle, settings)
}

func WindowCreateUnicode(mode VideoMode, title uint32, style uint32, settings *ContextSettings) int32 {
	return C.sfWindow_createUnicode(mode.ToC(), title, style, settings)
}

func (w *Window) CreateVulkanSurface(instance int32, surface int32, allocator int32) int32 {
	return C.sfWindow_createVulkanSurface(w.CPtr(), instance, surface, allocator)
}

func (w *Window) Destroy() int32 {
	return C.sfWindow_destroy(w.CPtr())
}

func (w *Window) Display() int32 {
	return C.sfWindow_display(w.CPtr())
}

func (w *Window) GetPosition() int32 {
	return C.sfWindow_getPosition(w.CPtr())
}

func (w *Window) GetSettings() int32 {
	return C.sfWindow_getSettings(w.CPtr())
}

func (w *Window) GetSize() int32 {
	return C.sfWindow_getSize(w.CPtr())
}

func (w *Window) GetSystemHandle() int32 {
	return C.sfWindow_getSystemHandle(w.CPtr())
}

func (w *Window) HasFocus() int32 {
	return C.sfWindow_hasFocus(w.CPtr())
}

func (w *Window) IsOpen() int32 {
	return C.sfWindow_isOpen(w.CPtr())
}

func (w *Window) PollEvent(event *Event) int32 {
	return C.sfWindow_pollEvent(w.CPtr(), event)
}

func (w *Window) RequestFocus() int32 {
	return C.sfWindow_requestFocus(w.CPtr())
}

func (w *Window) SetActive(active int32) int32 {
	return C.sfWindow_setActive(w.CPtr(), active)
}

func (w *Window) SetFramerateLimit(limit int32) int32 {
	return C.sfWindow_setFramerateLimit(w.CPtr(), limit)
}

func (w *Window) SetIcon(width int32, height int32, pixels int32) int32 {
	return C.sfWindow_setIcon(w.CPtr(), width, height, pixels)
}

func (w *Window) SetJoystickThreshold(threshold int32) int32 {
	return C.sfWindow_setJoystickThreshold(w.CPtr(), threshold)
}

func (w *Window) SetKeyRepeatEnabled(enabled int32) int32 {
	return C.sfWindow_setKeyRepeatEnabled(w.CPtr(), enabled)
}

func (w *Window) SetMouseCursor(cursor *Cursor) int32 {
	return C.sfWindow_setMouseCursor(w.CPtr(), cursor)
}

func (w *Window) SetMouseCursorGrabbed(grabbed int32) int32 {
	return C.sfWindow_setMouseCursorGrabbed(w.CPtr(), grabbed)
}

func (w *Window) SetMouseCursorVisible(visible int32) int32 {
	return C.sfWindow_setMouseCursorVisible(w.CPtr(), visible)
}

func (w *Window) SetPosition(position Vector2i) int32 {
	return C.sfWindow_setPosition(w.CPtr(), position.ToC())
}

func (w *Window) SetSize(size Vector2u) int32 {
	return C.sfWindow_setSize(w.CPtr(), size.ToC())
}

func (w *Window) SetTitle(title int32) int32 {
	return C.sfWindow_setTitle(w.CPtr(), title)
}

func (w *Window) SetUnicodeTitle(title int32) int32 {
	return C.sfWindow_setUnicodeTitle(w.CPtr(), title)
}

func (w *Window) SetVerticalSyncEnabled(enabled int32) int32 {
	return C.sfWindow_setVerticalSyncEnabled(w.CPtr(), enabled)
}

func (w *Window) SetVisible(visible int32) int32 {
	return C.sfWindow_setVisible(w.CPtr(), visible)
}

func (w *Window) WaitEvent(event *Event) int32 {
	return C.sfWindow_waitEvent(w.CPtr(), event)
}

